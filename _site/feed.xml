<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FOAM Science; Doing CFD</title>
    <description>FOAM Science is a Computational Fluid Dynamics blog aiming to be a place for OpenFOAM users to share and gather knowledge about CFD related subjects.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 29 Aug 2019 12:12:10 +0100</pubDate>
    <lastBuildDate>Thu, 29 Aug 2019 12:12:10 +0100</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>The forAll Macro in OpenFOAM</title>
        <description>&lt;p&gt;Because of the frequent use of range-like loops in OpenFOAM (In official code base, forks, and
any independent work for that matter), the nice developers provided a “shortcut” to loop through
all elements of a list; any list. This post tries to take a way the popular misuse of this shortcut:
Believe it or not, people abuse the &lt;code class=&quot;highlighter-rouge&quot;&gt;forAll&lt;/code&gt; macro in every which way.
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#the-forall-macro-and-its-friends&quot; id=&quot;markdown-toc-the-forall-macro-and-its-friends&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;forAll&lt;/code&gt; macro and its “friends”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-word-on-ulist-in-openfoam&quot; id=&quot;markdown-toc-a-word-on-ulist-in-openfoam&quot;&gt;A word on &lt;code class=&quot;highlighter-rouge&quot;&gt;UList&lt;/code&gt; in OpenFOAM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-word-on-dictionary-in-openfoam&quot; id=&quot;markdown-toc-a-word-on-dictionary-in-openfoam&quot;&gt;A word on &lt;code class=&quot;highlighter-rouge&quot;&gt;dictionary&lt;/code&gt; in OpenFOAM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-forall-macro-and-its-friends&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;forAll&lt;/code&gt; macro and its “friends”&lt;/h2&gt;

&lt;p&gt;First of all, we all know that &lt;code class=&quot;highlighter-rouge&quot;&gt;forAll&lt;/code&gt; is not part of C++, so it is a user-defined macro. 
Assuming a recent fork/version of OpenFOAM is sourced, the definition
of this macro and similar ones can be found by running the folllwoing shell commands:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$FOAM_SRC&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$WM_PROJECT&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;define.*forAll&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The previous command reveals that there are at least four (4, &lt;code class=&quot;highlighter-rouge&quot;&gt;foam-extend&lt;/code&gt; has some more) 
defined macros to loop through “collections”:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The good old &lt;code class=&quot;highlighter-rouge&quot;&gt;forAll&lt;/code&gt; and its reversed-looping version &lt;code class=&quot;highlighter-rouge&quot;&gt;forAllReverse&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;forAllIter&lt;/code&gt; macro specialized in iterating over a Container using an “iterator” and a const-version of it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Yep, browsing source code is extremely useful (These macros are defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;UList.h&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;People need to understand that &lt;code class=&quot;highlighter-rouge&quot;&gt;forAll(list, i)&lt;/code&gt; is “just” a shortcut to &lt;code class=&quot;highlighter-rouge&quot;&gt;for (int i=0; i&amp;lt;(list).size(); i++)&lt;/code&gt;.
Although &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; is actually a &lt;code class=&quot;highlighter-rouge&quot;&gt;Foam::label&lt;/code&gt; in standard OF versions. Strictly speaking; the macro just “works”
on any container that has a &lt;code class=&quot;highlighter-rouge&quot;&gt;size()&lt;/code&gt; member method (Think of it as a vector of a known size - at construction
time). Such containers will probably (publicly) inherit from the &lt;code class=&quot;highlighter-rouge&quot;&gt;UList&lt;/code&gt; 
(The most lightweight-efficient base class I know of).&lt;/p&gt;

&lt;p&gt;Let’s examine a very simple example of constructing a &lt;code class=&quot;highlighter-rouge&quot;&gt;scalarList&lt;/code&gt; (a &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;scalar&amp;gt;&lt;/code&gt;, publicly
inheriting from &lt;code class=&quot;highlighter-rouge&quot;&gt;UList&amp;lt;scalar&amp;gt;&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;fvCFD.H&quot;
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   
    &lt;span class=&quot;c1&quot;&gt;// Create a list of some scalars
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;scalarList&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someScalars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Perfectly fine use of forAll
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;forAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalarList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scalarList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSomeCalculations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;End&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But this may be misleading; what if someone uses the macro to loop over a “different” type of containers,
say a &lt;code class=&quot;highlighter-rouge&quot;&gt;dictionary&lt;/code&gt;? Is &lt;code class=&quot;highlighter-rouge&quot;&gt;forAll&lt;/code&gt; suitable for such tasks?&lt;/p&gt;

&lt;p&gt;The answer is in the previous example actually: Common use of &lt;code class=&quot;highlighter-rouge&quot;&gt;forAll&lt;/code&gt; requires the list object to&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Have a &lt;code class=&quot;highlighter-rouge&quot;&gt;size()&lt;/code&gt; method and&lt;/li&gt;
  &lt;li&gt;Be &lt;em&gt;efficiently&lt;/em&gt; indexable with some method/operator (&lt;code class=&quot;highlighter-rouge&quot;&gt;operator[]&lt;/code&gt; in this case), otherwise, 
there is no benefit in looping through some collection if you can’t access its elements!!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, if &lt;code class=&quot;highlighter-rouge&quot;&gt;dictionary&lt;/code&gt; objects verify these requirements; we’re golden.&lt;/p&gt;

&lt;p&gt;In fact, The &lt;code class=&quot;highlighter-rouge&quot;&gt;DictionaryBase&lt;/code&gt; Template class publicly inherits from the (Link) List Type it is templated on.
It’s easy to follow the inheritance diagram of the most commonly used class 
&lt;a href=&quot;https://cpp.openfoam.org/v7/classFoam_1_1dictionary.html&quot;&gt;dictionary&lt;/a&gt; to see that there is no &lt;code class=&quot;highlighter-rouge&quot;&gt;size()&lt;/code&gt; method
defined anywhere. Also, how would one refer to an entry as &lt;code class=&quot;highlighter-rouge&quot;&gt;dictionary[i]&lt;/code&gt; ??&lt;/p&gt;

&lt;p&gt;It should be obvious now that &lt;code class=&quot;highlighter-rouge&quot;&gt;forAll&lt;/code&gt; is not the right macro to use in this case. That’s where the second family
of macros kicks in: Instead of using a (possibly more efficient) predefined-size containers, some situations
require the use of “more dynamic” ones which only hold “pointers” to their begin/end positions. An iterator
is then used to go back and forth between these positions.&lt;/p&gt;

&lt;p&gt;A nice usage of this macro can be found at line 175 of &lt;a href=&quot;https://cpp.openfoam.org/v7/solution_8C_source.html&quot;&gt;solution.C&lt;/a&gt;
file so newer versions of OpenFOAM would understand older specification of &lt;code class=&quot;highlighter-rouge&quot;&gt;fvSolution.solver&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The const-iter version of &lt;code class=&quot;highlighter-rouge&quot;&gt;forAllIter&lt;/code&gt; is also used to read entries of a &lt;code class=&quot;highlighter-rouge&quot;&gt;dictionary&lt;/code&gt; into a &lt;code class=&quot;highlighter-rouge&quot;&gt;HashTable&lt;/code&gt; … you can
find an example at line 146 of &lt;a href=&quot;https://cpp.openfoam.org/v7/HashPtrTableIO_8C_source.html&quot;&gt;HashPtrTableIO.C&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-word-on-ulist-in-openfoam&quot;&gt;A word on &lt;code class=&quot;highlighter-rouge&quot;&gt;UList&lt;/code&gt; in OpenFOAM&lt;/h2&gt;

&lt;p&gt;As far as I can tell, this class is just “well written” - “well thought through”. Its purpose is 
to provide an efficient base class for “Sub-Lists”. A quick look on 
&lt;a href=&quot;https://cpp.openfoam.org/v7/classFoam_1_1UList.html#details&quot;&gt;the list of classes&lt;/a&gt; 
that directly inherit from it shows how important &lt;code class=&quot;highlighter-rouge&quot;&gt;UList&lt;/code&gt; is.&lt;/p&gt;

&lt;p&gt;By the way, the class also holds a random access iterator; so it can be used with &lt;code class=&quot;highlighter-rouge&quot;&gt;forAllIter&lt;/code&gt;:
We use an object (usually called &lt;code class=&quot;highlighter-rouge&quot;&gt;iter&lt;/code&gt;) to “point” to a list item each time we iterate. The
list item itself is accessed by dereferencing the pointer (&lt;code class=&quot;highlighter-rouge&quot;&gt;*iter&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I’m not aware of a way to get the “index” of an element in a List; It would be inefficient!
So I never bothered to search for one. Another thing I should point out is that &lt;code class=&quot;highlighter-rouge&quot;&gt;std::distance&lt;/code&gt;
probably won’t work without some serious Type Casting :). It’s (was?) dangerous anyway, and I 
don’t know if a similar function is available for OpenFOAM iterators).&lt;/p&gt;

&lt;p&gt;In fact, the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;std::distance&lt;/code&gt; takes away one the most important features of iterator-based
loops: The ability to loop through a container where either &lt;code class=&quot;highlighter-rouge&quot;&gt;.begin()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.end()&lt;/code&gt; is not
reachable from the other (possibly by incrementing &lt;code class=&quot;highlighter-rouge&quot;&gt;iter&lt;/code&gt;) as it results in “undefined behavior”.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In recent OpenFOAM versions, &lt;code class=&quot;highlighter-rouge&quot;&gt;GeometricField&lt;/code&gt; (Base class for &lt;code class=&quot;highlighter-rouge&quot;&gt;volScalarField&lt;/code&gt; …) inherits
from &lt;code class=&quot;highlighter-rouge&quot;&gt;UList&lt;/code&gt;, so, one can typically loop through their elements  with both macros; although 
template specializations specialize the sense of “loop through their elements”: Some types 
support looping through “internalField”; others make it so the loop hits everything.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;a-word-on-dictionary-in-openfoam&quot;&gt;A word on &lt;code class=&quot;highlighter-rouge&quot;&gt;dictionary&lt;/code&gt; in OpenFOAM&lt;/h2&gt;

&lt;p&gt;This class a good example of a lot of things. “An iterator-based container” as I introduced it in 
this post is just the tip of the iceberg. The reason I chose it for this post is that most 
OpenFOAM &lt;em&gt;users&lt;/em&gt; consider a dictionary to be a “list” which is not entirely true. The similarity 
of, for example, getting some IDs (0, 1, 2, 3 … ) for mesh patches from the &lt;code class=&quot;highlighter-rouge&quot;&gt;boundary&lt;/code&gt; files 
doesn’t mean a dictionary is indexable (I’m talking about “old-fashion” indexing here).&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;!-- Disp add --&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-3635214305281166&quot; data-ad-slot=&quot;6599434036&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block; text-align:center;&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-3635214305281166&quot; data-ad-slot=&quot;4856474507&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 28 Aug 2019 11:13:02 +0100</pubDate>
        <link>http://localhost:4000/forall-openfoam-cpp/</link>
        <guid isPermaLink="true">http://localhost:4000/forall-openfoam-cpp/</guid>
        
        <category>cpp</category>
        
        <category>programming</category>
        
        
        <category>Cpp</category>
        
      </item>
    
      <item>
        <title>Customize VIM to work efficiently with OpenFOAM - Part 2</title>
        <description>&lt;p&gt;We’ve seen in &lt;a href=&quot;/vim-openfoam-power-part1&quot;&gt;the previous part&lt;/a&gt;
some ways to improve our interaction with
OpenFOAM case directories and files.
In this new post, we want to implement something that facilitates
running &lt;code class=&quot;highlighter-rouge&quot;&gt;blockMesh&lt;/code&gt;, or the case solver, right from inside VIM; without going back to the shell.
Of course, our implementation should catch errors in the quick fix list (if there are any), 
then go to the concerned file, and put the cursor on the error line.
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#studying-an-example-vim-compiler&quot; id=&quot;markdown-toc-studying-an-example-vim-compiler&quot;&gt;Studying an example VIM compiler&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#using-errorformats-to-catch-openfoam-fatal-errors&quot; id=&quot;markdown-toc-using-errorformats-to-catch-openfoam-fatal-errors&quot;&gt;Using errorformats to catch OpenFOAM Fatal Errors&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#building-a-compiler-plugin-for-blockmesh&quot; id=&quot;markdown-toc-building-a-compiler-plugin-for-blockmesh&quot;&gt;Building a compiler plugin for blockMesh&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#use-foamgetapplication-to-get-solver-name&quot; id=&quot;markdown-toc-use-foamgetapplication-to-get-solver-name&quot;&gt;Use FOAMGetApplication to get solver name&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-general-vim-compiler-plugin-for-openfoam&quot; id=&quot;markdown-toc-the-general-vim-compiler-plugin-for-openfoam&quot;&gt;The general VIM compiler plugin for OpenFOAM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#final-tweaks-vims-auto-commands&quot; id=&quot;markdown-toc-final-tweaks-vims-auto-commands&quot;&gt;Final tweaks: VIM’s auto-commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this, we’ll use two main VIM facilities: &lt;em&gt;VIM compilers&lt;/em&gt; and &lt;em&gt;QuickFix&lt;/em&gt; list.
The compilers are used to automatically run a shell command on a file; For example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Running a &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; if there is a &lt;em&gt;makeFile&lt;/em&gt;) command on a &lt;code class=&quot;highlighter-rouge&quot;&gt;*.cpp&lt;/code&gt; file would compile it
to an executable,&lt;/li&gt;
  &lt;li&gt;Running a &lt;code class=&quot;highlighter-rouge&quot;&gt;pdflatex&lt;/code&gt; (or better &lt;code class=&quot;highlighter-rouge&quot;&gt;latexmk&lt;/code&gt;) command on a &lt;em&gt;Latex file&lt;/em&gt; would compile
a PDF version of the document.&lt;/li&gt;
  &lt;li&gt;Running a &lt;code class=&quot;highlighter-rouge&quot;&gt;blockMesh&lt;/code&gt; command on a &lt;em&gt;blockMeshDict&lt;/em&gt; would build the mesh and check
for errors in &lt;code class=&quot;highlighter-rouge&quot;&gt;blockMesh&lt;/code&gt;’s output.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In fact, we can run as many commands as we want on the file using VIM compilers.
Think: Generate the mesh, check its validity, set fields and run appropriate solvers
(In my opinion, this kind of work-flows beats GUIs to death).&lt;/p&gt;

&lt;p&gt;So, let’s get to work: We need to know how VIM’s default compiler plugins are set, 
and the best way to learn is by looking at examples. On Unix systems, the default compilers should be
in &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/vim/vim74/compiler&lt;/code&gt; directory, you can use VIM’s ex-command &lt;code class=&quot;highlighter-rouge&quot;&gt;:compile&lt;/code&gt; to find out where 
they are on your system.&lt;/p&gt;

&lt;h2 id=&quot;studying-an-example-vim-compiler&quot;&gt;Studying an example VIM compiler&lt;/h2&gt;

&lt;p&gt;First of all, a VIM compiler plugin is nothing more than a short &lt;code class=&quot;highlighter-rouge&quot;&gt;VimL&lt;/code&gt; script, configuring two
main things: &lt;code class=&quot;highlighter-rouge&quot;&gt;errorformat&lt;/code&gt; (scanf-style strings, separated by commas, showing the
format of error lines) and &lt;code class=&quot;highlighter-rouge&quot;&gt;makeprg&lt;/code&gt; (make program, the shell executable to run).&lt;/p&gt;

&lt;p&gt;As an example, let’s go through the &lt;em&gt;ant-compiler&lt;/em&gt; line by line:&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot; Vim Compiler File&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; Compiler:	ant&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; Maintainer:	Johannes Zellner &amp;lt;johannes@zellner.org&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; Last Change:	Mi, 13 Apr 2005 22:50:07 CEST&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The header, just for information, then we have some checks to perform:&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; exists&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;current_compiler&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;finish&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; current_compiler &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ant&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; exists&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:CompilerSet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;		&quot; older Vim always used &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setlocal&lt;/span&gt;
  command &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;nargs&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;* CompilerSet &lt;span class=&quot;k&quot;&gt;setlocal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;args&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first if structure checks if the compiler is already set (if it’s the case, vim will leave the script). 
If not, it
declares &lt;code class=&quot;highlighter-rouge&quot;&gt;current_compiler&lt;/code&gt; as &lt;em&gt;“ant”&lt;/em&gt; (so, the next time the script executes, it will be finished in
the first if structure). The second if statement sets compatibility stuff for older VIM
versions.&lt;/p&gt;

&lt;p&gt;All the &lt;code class=&quot;highlighter-rouge&quot;&gt;cpo&lt;/code&gt;-related stuff are set to configure Vi-compatibility options, we don’t need to
learn about this topic, just don’t touch those lines!&lt;/p&gt;

&lt;p&gt;The line &lt;code class=&quot;highlighter-rouge&quot;&gt;CompilerSet makeprg=ant&lt;/code&gt; sets the ant program as the make program (when
you execute the ex-command &lt;code class=&quot;highlighter-rouge&quot;&gt;:make&lt;/code&gt;, VIM runs &lt;code class=&quot;highlighter-rouge&quot;&gt;ant&lt;/code&gt; in a shell, and watches for its output).&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;!-- Disp add --&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-3635214305281166&quot; data-ad-slot=&quot;6599434036&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CompilerSet errorformat=\ %#[%.%#]\ %#%f:%l:%v:%*\\d:%*\\d:\%t%[%^:]%#:%m&lt;/code&gt;
shows VIM how to find the error line and what to extract from it (explained in more
details in the next section).&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s:cpo_save&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &amp;amp;cpo
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; cpo&amp;amp;&lt;span class=&quot;k&quot;&gt;vim&lt;/span&gt;

CompilerSet makeprg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;ant

&lt;span class=&quot;c&quot;&gt;&quot; first  line:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;     ant with jikes +E, which assumes  the following&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;     two property lines in your 'build.xml':&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;         &amp;lt;property name = &quot;build.compiler&quot;       value = &quot;jikes&quot;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;         &amp;lt;property name = &quot;build.compiler.emacs&quot; value = &quot;true&quot;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; second line:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;     ant with javac&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; note that this will work also for tasks like [wtkbuild]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;&lt;/span&gt;
CompilerSet errorformat&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;\ %#&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;%&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;%#&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;\ %#%&lt;span class=&quot;k&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;%&lt;span class=&quot;k&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;%&lt;span class=&quot;k&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;%*\\&lt;span class=&quot;k&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;%*\\&lt;span class=&quot;k&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;\ %&lt;span class=&quot;k&quot;&gt;t&lt;/span&gt;%&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;%^&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;%#&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;%&lt;span class=&quot;k&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;    \&lt;/span&gt;%A\ %#&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;%&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;%#&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;\ %&lt;span class=&quot;k&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;%&lt;span class=&quot;k&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;\ %&lt;span class=&quot;k&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;%&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;Z\ %#&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;%&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;%#&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;\ %&lt;span class=&quot;k&quot;&gt;p&lt;/span&gt;^&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;%C\ %#&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;%&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;%#&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;\ %#%&lt;span class=&quot;k&quot;&gt;m&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; ,%-C%.%#&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &amp;amp;cpo &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s:cpo_save&lt;/span&gt;
unlet &lt;span class=&quot;nv&quot;&gt;s:cpo_save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;using-errorformats-to-catch-openfoam-fatal-errors&quot;&gt;Using errorformats to catch OpenFOAM Fatal Errors&lt;/h3&gt;

&lt;p&gt;These &lt;em&gt;errorformats&lt;/em&gt; are similar to regular expressions. Assume a program outputting errors in the
following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Error: something-is-wrong in /path/to/file at line 25&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To match this error line, we use a single scanf-style string, that may contain special
items (these are the most important ones):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%f&lt;/code&gt; matches a file name (a string), eg. &lt;em&gt;/path/to/file&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%l&lt;/code&gt; matches a line number (digits), eg. &lt;em&gt;25&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%m&lt;/code&gt; matches an error message, eg. &lt;em&gt;something-is-wrong&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%*{conv}&lt;/code&gt; converts stuff from regexp to scanf string, eg. %*[a-z] matches any number
of lowercase alphabets.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus, the example line would be matched with &lt;code class=&quot;highlighter-rouge&quot;&gt;\Error: %m in %f at line %l&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;building-a-compiler-plugin-for-blockmesh&quot;&gt;Building a compiler plugin for blockMesh&lt;/h2&gt;

&lt;p&gt;The goal of this section is to build a blockMesh-compiler for VIM which can be used to
browse errors when the tool fails. For this, we need to create our custom-compilers directory
&lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME/.vim/compiler&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;ant.vim&lt;/code&gt; compiler to that directory and rename it as &lt;code class=&quot;highlighter-rouge&quot;&gt;blockMesh.vim&lt;/code&gt;, on Unix
systems, one can say:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp /usr/share/vim/vim74/compiler/ant.vim ~/.vim/compiler/blockMesh.vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Modify the header so it suits your preferences, and then start building the custom VIM compiler:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Hopefully, you are editing the file with VIM.&lt;/li&gt;
  &lt;li&gt;Change all occurrences of “&lt;em&gt;ant&lt;/em&gt;” to “&lt;em&gt;blockMesh&lt;/em&gt;” in the file &lt;code class=&quot;highlighter-rouge&quot;&gt;:%s/ant/blockMesh/g&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Time to set the “errorformat”: We know that OpenFOAM displays errors in multiple
lines (if you write “hxe” instead of “hex” in a &lt;em&gt;blockMeshDict&lt;/em&gt;):&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--&amp;gt; FOAM FATAL IO ERROR:
CellShape has unknown model on line 45 the word 'hxe'
file: /home/elwardi/OpenFOAM/elwardi-4.1/run/movingCone/system/blockMeshDict.blocks at line 45.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that this is NOT a general FOAM ERROR; some other IO errors specify a range
of lines; others suggest solutions before stating the error-line.&lt;/p&gt;

&lt;p&gt;The most important line is probably the one stating
the filename, and the exact line to jump to (these will be stored
in &lt;code class=&quot;highlighter-rouge&quot;&gt;%f&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;%l&lt;/code&gt; respectively).However, there are some problems in the filename:
notice the ending &lt;code class=&quot;highlighter-rouge&quot;&gt;.blocks&lt;/code&gt; appended to it, in fact, things could be messier:
&lt;code class=&quot;highlighter-rouge&quot;&gt;.ddtschemes.default&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How many dots are there in the filename? The real problem is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;path/to/case&lt;/code&gt;
always contains a dot character (frrom the OpenFOAM version, eg. user-4.1), so matching
from the start of the path to the first dot character won’t work!&lt;/p&gt;

&lt;p&gt;Instead, we do notice that versions are expressed in digits, and that case names
usually contain no dots (hopefully); so, matching the path up to the first dot character preceding
an alphabet character is a good idea:
&lt;code class=&quot;highlighter-rouge&quot;&gt;CompilerSet errorformat=\file:\ %f\.%[a-z]%*[a-z\ ]\ line\ %l\.&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%f&lt;/code&gt; matches the string “file: “ at the start of line, then starts storing the 
filename up to the first dot that falls immediately before a lowercase alphabet character 
(hopefully, that’s the keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;.blocks&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;.fvSchemes&lt;/code&gt; …). Then we’ll have 
some lowercase characters and spaces until we reach the last line before “line” string, 
then &lt;code class=&quot;highlighter-rouge&quot;&gt;%l&lt;/code&gt; catches the line number (in case there are two, it catches the last one!).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, what to tell the user? Well, It’s good to have a message at the status line
saying “&lt;em&gt;CellShape has unknown model …&lt;/em&gt;”, so, we should use a complex multi-line
&lt;em&gt;errorformat&lt;/em&gt;! But, still we’ll have to deal with the problem of how many lines are
there between the line that tells our message and the line that spells out the error line.&lt;/p&gt;

&lt;p&gt;This is actually troublesome, so, I’ve decided to approach the situation differently: 
We leave our filename and error-line alone, and add another error that captures only the
message (using a simple multi-line error-format).&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CompilerSet errorformat&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;\&lt;span class=&quot;k&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;\ %&lt;span class=&quot;k&quot;&gt;f&lt;/span&gt;\&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;%&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;%*&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;z\ &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;\ line\ %&lt;span class=&quot;k&quot;&gt;l&lt;/span&gt;\&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;                        \&lt;/span&gt;%E&lt;span class=&quot;p&quot;&gt;--&amp;gt;&lt;/span&gt;\ %*&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;A&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;Z&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;\ &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;%Z%&lt;span class=&quot;k&quot;&gt;m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%E&lt;/code&gt; denotes the start of a multi-line error.&lt;/li&gt;
  &lt;li&gt;Then we find the line saying &lt;code class=&quot;highlighter-rouge&quot;&gt;Fatal IO Error&lt;/code&gt; (starts with –&amp;gt; then there are some
uppercase letters,semicolons, and spaces).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%Z&lt;/code&gt; denotes the end of multi-line error (which is only one line here!) then
 we capture everything in the second line as a &lt;code class=&quot;highlighter-rouge&quot;&gt;%m&lt;/code&gt; (an error message).&lt;/li&gt;
&lt;/ul&gt;

&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block; text-align:center;&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-3635214305281166&quot; data-ad-slot=&quot;4856474507&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The compiler plugin is now complete:&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot; Vim Compiler File&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; Compiler: blockMesh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; Fadeli Mohammed Elwardi &amp;lt;foamscience.github.io&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; exists&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;current_compiler&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;finish&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; current_compiler &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;blockMesh&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; exists&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:CompilerSet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; older Vim always used :setlocal&lt;/span&gt;
command &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;nargs&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;* CompilerSet &lt;span class=&quot;k&quot;&gt;setlocal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;args&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s:cpo_save&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &amp;amp;cpo
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; cpo&amp;amp;&lt;span class=&quot;k&quot;&gt;vim&lt;/span&gt;

CompilerSet makeprg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;blockMesh

CompilerSet errorformat&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;                 \&lt;/span&gt;\&lt;span class=&quot;k&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;\ %&lt;span class=&quot;k&quot;&gt;f&lt;/span&gt;\&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;%&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;%*&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;z\ &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;\ line\ %&lt;span class=&quot;k&quot;&gt;l&lt;/span&gt;\&lt;span class=&quot;p&quot;&gt;.,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;                 \&lt;/span&gt;%E&lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;\ %*&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;A&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;Z&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;\ &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;%Z%&lt;span class=&quot;k&quot;&gt;m&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &amp;amp;cpo &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s:cpo_save&lt;/span&gt;
unlet &lt;span class=&quot;nv&quot;&gt;s:cpo_save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you should be ready to test it with a sample (erroneous) &lt;code class=&quot;highlighter-rouge&quot;&gt;blockMeshDict&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Make something of importance go wrong in a &lt;code class=&quot;highlighter-rouge&quot;&gt;blockMeshDict&lt;/code&gt; (the last ; in a block is
not that important).&lt;/li&gt;
  &lt;li&gt;While editing &lt;code class=&quot;highlighter-rouge&quot;&gt;blockMeshDict&lt;/code&gt;, run &lt;code class=&quot;highlighter-rouge&quot;&gt;:compile blockMesh&lt;/code&gt; to set the correct compiler
(We’ll improve on this).&lt;/li&gt;
  &lt;li&gt;Hopefully your working directory is set by our previous &lt;code class=&quot;highlighter-rouge&quot;&gt;customFoam&lt;/code&gt; script, if it
is the case, run the ex-command &lt;code class=&quot;highlighter-rouge&quot;&gt;:make&lt;/code&gt; and check that beautiful (and useful) error
message!&lt;/li&gt;
  &lt;li&gt;To automatically jump to the error line, type &lt;code class=&quot;highlighter-rouge&quot;&gt;:cn&lt;/code&gt; (short of cnext).&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;The error format can’t handle “from line 15 to line 18.” lines, because no file path
will be output in such lines!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that VIM knows how to handle &lt;code class=&quot;highlighter-rouge&quot;&gt;blockMesh&lt;/code&gt;, let’s introduce it to the other FOAM applications 
(we’ll be doing just solvers for illustration). Wait, should we repeat the work done previously tens
of times? Absolutely not.&lt;/p&gt;

&lt;p&gt;The goal of this blog post is to achieve this work-flow:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;When I read in a FOAM File, VIM changes its working dir. to case dir.
(already implemented in &lt;code class=&quot;highlighter-rouge&quot;&gt;customFoam.vim&lt;/code&gt;, see 
&lt;a href=&quot;/vim-openfoam-power-part1&quot;&gt;this earlier post&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;VIM looks for the suitable OpenFOAM solver for the current case (mentioned in &lt;code class=&quot;highlighter-rouge&quot;&gt;controlDict&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;VIM sets the right solver as the &lt;code class=&quot;highlighter-rouge&quot;&gt;makeprg&lt;/code&gt; automatically.&lt;/li&gt;
  &lt;li&gt;When I run &lt;code class=&quot;highlighter-rouge&quot;&gt;:make&lt;/code&gt; (Or press a shortcut to it), VIM will filter the output to 
show me the errors if there are any.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One more thing, I want my own solvers to be involved, so, I won’t generate a list of
standard solvers and compare anything to its content. That’s one lousy approach to take!&lt;/p&gt;

&lt;p&gt;Instead, I’m going to define two functions: The first one, in &lt;code class=&quot;highlighter-rouge&quot;&gt;customFoam.vim&lt;/code&gt;, which searches
and stores the solver name, and the second sets the option &lt;code class=&quot;highlighter-rouge&quot;&gt;makeprg&lt;/code&gt; dynamically in a
general compiler plugin called &lt;code class=&quot;highlighter-rouge&quot;&gt;foam.vim&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;use-foamgetapplication-to-get-solver-name&quot;&gt;Use FOAMGetApplication to get solver name&lt;/h2&gt;

&lt;p&gt;From any file in the case dir., we can tell VIM what solver is to be used with the current
case because it’s mentioned in the &lt;code class=&quot;highlighter-rouge&quot;&gt;controlDict&lt;/code&gt; file. Actually, we have two options
here:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use VIM to take a look at &lt;code class=&quot;highlighter-rouge&quot;&gt;controlDict&lt;/code&gt;, and store a string representing the solver name.&lt;/li&gt;
  &lt;li&gt;Or, do it the FOAM way (use run functions: &lt;code class=&quot;highlighter-rouge&quot;&gt;getApplication&lt;/code&gt;), which needs a working
Installation of OpenFOAM (but that’s Ok, you won’t be reading this guide otherwise).
This method is heavily used in .Allrun shell scripts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to learn how VIM interacts with the system, we’ll use the second option: We’ll
add a &lt;code class=&quot;highlighter-rouge&quot;&gt;FOAMGetApplication()&lt;/code&gt; function to our &lt;code class=&quot;highlighter-rouge&quot;&gt;customFoam.vim&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; FOAMGetApplication&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; Source run functions and execute getApplication&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; cmd&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;. $WM_PROJECT_DIR/bin/tools/RunFunctions &amp;amp;&amp;amp; getApplication&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; foamApp&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;system&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;cmd&lt;span class=&quot;p&quot;&gt;)[:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;echomsg&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'This case is set to be simulated with: '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;foamApp
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; foamApp
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd&lt;/code&gt; is a string, representing the shell command that sources run functions and then
executes &lt;code class=&quot;highlighter-rouge&quot;&gt;getApplication&lt;/code&gt; in the current case dir.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;foamApp&lt;/code&gt; is the output of the previous command (solver name), the &lt;code class=&quot;highlighter-rouge&quot;&gt;[:-2]&lt;/code&gt; part deletes
the last two characters from the output of the command (by default, It will output
&lt;code class=&quot;highlighter-rouge&quot;&gt;icoFoam @&lt;/code&gt;, the last two characters are not needed).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echomsg&lt;/code&gt; writes messages to the status line, and keeps them in messages list 
(run &lt;code class=&quot;highlighter-rouge&quot;&gt;:messages&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-general-vim-compiler-plugin-for-openfoam&quot;&gt;The general VIM compiler plugin for OpenFOAM&lt;/h2&gt;

&lt;p&gt;Copy &lt;code class=&quot;highlighter-rouge&quot;&gt;blockMesh.vim&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;foam.vim&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Don’t forget &lt;code class=&quot;highlighter-rouge&quot;&gt;let current_compiler = &quot;foam&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Declare a script variable, storing the solver name
&lt;code class=&quot;highlighter-rouge&quot;&gt;let s:foamApp = FOAMGetApplication()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;CompilerSet&lt;/code&gt;, define a new function setting the compiler to the solver
name, then call it.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; FOAMSetCompiler&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    exe &lt;span class=&quot;s1&quot;&gt;'CompilerSet makeprg='&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;s:foamApp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; FOAMSetCompiler&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;For the file line in the error format, use
&lt;code class=&quot;highlighter-rouge&quot;&gt;\\file:\ %f\.%*[a-zA-Z]%*[a-zA-Z\ .]\ line\ %l%*[.a-zA-Z0-9\ ]&lt;/code&gt;
So we can cover stuff like “from line 15 to line 20.” and be more dynamic with the
number of dots in the filename (handle things like &lt;code class=&quot;highlighter-rouge&quot;&gt;0/U.boundaryField.inlet&lt;/code&gt;).
Done!! We are ready to go!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;final-tweaks-vims-auto-commands&quot;&gt;Final tweaks: VIM’s auto-commands&lt;/h2&gt;

&lt;p&gt;We only need to tell VIM to set the compiler to “foam” whenever a Foam File is opened;
and to set the compiler to &lt;code class=&quot;highlighter-rouge&quot;&gt;blockMesh&lt;/code&gt; if the entered buffer is named &lt;code class=&quot;highlighter-rouge&quot;&gt;blockMeshDict&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;augroup FOAMautocmds
autocmd&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;
autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; foam* &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; FOAMSetPathToCaseDir&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; foam* &lt;span class=&quot;k&quot;&gt;compile&lt;/span&gt; foam
autocmd &lt;span class=&quot;nb&quot;&gt;BufEnter&lt;/span&gt; *blockMeshDict &lt;span class=&quot;k&quot;&gt;compile&lt;/span&gt; blockMesh
augroup End
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;FileType&lt;/em&gt; autocmds will &lt;em&gt;always&lt;/em&gt; be executed before &lt;em&gt;BufEnter&lt;/em&gt; ones, so &lt;code class=&quot;highlighter-rouge&quot;&gt;blockMeshDict&lt;/code&gt; files
will always have &lt;code class=&quot;highlighter-rouge&quot;&gt;blockMesh&lt;/code&gt; as their compiler.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The complete configuration files can be downloaded from here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://drive.google.com/uc?id=1Sf-6Pm8twy8dM6YIcWZ8lMFaem2S2F0O&amp;amp;export=download&quot; class=&quot;btn&quot;&gt;VIM Customization&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Aug 2018 16:33:24 +0100</pubDate>
        <link>http://localhost:4000/vim-openfoam-power-part2/</link>
        <guid isPermaLink="true">http://localhost:4000/vim-openfoam-power-part2/</guid>
        
        <category>openfoam</category>
        
        <category>productivity</category>
        
        
        <category>vim productivity with openfoam</category>
        
      </item>
    
      <item>
        <title>Customize VIM to work efficiently with OpenFOAM - Part 1</title>
        <description>&lt;p&gt;Today, I’m starting new (short) post series suggesting tricks to customize the &lt;strong&gt;VIM&lt;/strong&gt; 
text editor so it can be used to edit OpenFOAM cases more efficiently.
Of course, making VIM work optimally with every single piece of software you have
installed through scripting is a bit of “over-kill”; but having it configured properly is crucial.
&lt;!--more--&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;These series of posts are for those who are ready to write some lines of VIML code
to add interesting functionality to VIM (OpenFOAM-wise).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#vim-plugins-for-openfoam&quot; id=&quot;markdown-toc-vim-plugins-for-openfoam&quot;&gt;VIM Plugins for OpenFOAM&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#syntax-highlighting-of-openfoam-dictionaries-in-vim&quot; id=&quot;markdown-toc-syntax-highlighting-of-openfoam-dictionaries-in-vim&quot;&gt;Syntax Highlighting of OPENFOAM dictionaries in VIM&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#your-own-vim-scripts&quot; id=&quot;markdown-toc-your-own-vim-scripts&quot;&gt;Your own VIM scripts&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#first-steps-determining-file-types&quot; id=&quot;markdown-toc-first-steps-determining-file-types&quot;&gt;First steps: Determining file types&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#now-we-know-the-filetype-then-what&quot; id=&quot;markdown-toc-now-we-know-the-filetype-then-what&quot;&gt;Now we know the filetype, then what?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vim-plugins-for-openfoam&quot;&gt;VIM Plugins for OpenFOAM&lt;/h2&gt;

&lt;p&gt;We can easily customize our VIM installation using our own scripts, sourced in the &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt; file. 
The versatility of VIM allows for sharing these scripts between users, we then call the scripts: &lt;em&gt;Plug-ins&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;These plugins differ in both their goal and their implementation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;General purpose plugins. Eg. for handling text formatting, VIM configuration.&lt;/li&gt;
  &lt;li&gt;File-Type specific plugins. Eg. those which operate only on C source/header files.&lt;/li&gt;
  &lt;li&gt;Syntax highlighting. Eg. highlight OpenFOAM keywords in a OpenFOAM dictionary.&lt;/li&gt;
  &lt;li&gt;Compiler plugins. Eg. interpret a python script from VIM command line and jump to errors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As OpenFOAM users, we’ll naturally be interested in any C++ related plugins in addition to few
OpenFOAM-specific ones.&lt;/p&gt;

&lt;h3 id=&quot;syntax-highlighting-of-openfoam-dictionaries-in-vim&quot;&gt;Syntax Highlighting of OPENFOAM dictionaries in VIM&lt;/h3&gt;

&lt;p&gt;It’s always good to have keyword-specific highlighting of a file; It helps you instantly
catch misspelled keywords, it makes understanding the file easier; and with appropriate
color themes, it makes you feel comfortable while editing the file.&lt;/p&gt;

&lt;p&gt;There is already a VIM plugin that takes care of OpenFOAM keywords highlighting 
(Vim-OpenFOAM-syntax). It’s true that the plugin does some weird stuff 
(eg. loading weird files into the buffer list) 
but, in general, it’s good for the job of highlighting OpenFOAM syntax. 
To install it on your system, follow the instructions at 
&lt;a href=&quot;https://github.com/effi/vim-OpenFoam-syntax&quot;&gt;Vim-OpenFoam-syntax&lt;/a&gt; on github, or
the fork for manual installation (not that scary) 
&lt;a href=&quot;https://bitbucket.org/shor-ty/vimextensionopenfoam&quot;&gt;Vim-Extension-OpenFOAM&lt;/a&gt; on bitbucket.&lt;/p&gt;

&lt;p&gt;While programming, I usually use a couple of plugins:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;c-support&lt;/em&gt;: to turn VIM into a C/C++ IDE (code snippets … etc).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;taglist&lt;/em&gt;: to browse source code efficiently&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;your-own-vim-scripts&quot;&gt;Your own VIM scripts&lt;/h2&gt;

&lt;p&gt;In this blog post, we’ll write a very small VIM script, called &lt;code class=&quot;highlighter-rouge&quot;&gt;customFoam.vim&lt;/code&gt;, 
that is capable of doing a couple of things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It needs to be aware of the current file’s FileType.&lt;/li&gt;
  &lt;li&gt;When the file is of type &lt;code class=&quot;highlighter-rouge&quot;&gt;foam&lt;/code&gt;, VIM should set a couple of things up:
    &lt;ul&gt;
      &lt;li&gt;Changing the path variable for the &lt;code class=&quot;highlighter-rouge&quot;&gt;:find&lt;/code&gt; command so it includes our case’s directory.&lt;/li&gt;
      &lt;li&gt;Changing VIM’s current directory to case directory.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;At this moment, that’s all, but we’ll add some stuff in the upcoming blog posts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;first-steps-determining-file-types&quot;&gt;First steps: Determining file types&lt;/h3&gt;

&lt;p&gt;There are two common ways to determine a file type for a file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use the extension in its same; I call it the &lt;code class=&quot;highlighter-rouge&quot;&gt;lazy Windows way&lt;/code&gt;: for example ,files that have names
ending with &lt;code class=&quot;highlighter-rouge&quot;&gt;.html&lt;/code&gt; are considered HTML files no matter what their content is.&lt;/li&gt;
  &lt;li&gt;Take a look at the file’s content then decide; This is the Unix way, which we’ll be
using here: It just means we’ll search the content of a file for the line that says &lt;code class=&quot;highlighter-rouge&quot;&gt;FoamFile&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block; text-align:center;&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-3635214305281166&quot; data-ad-slot=&quot;4856474507&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;We are not the first ones who try to detect &lt;code class=&quot;highlighter-rouge&quot;&gt;foam&lt;/code&gt; file type in VIM; the &lt;em&gt;vim-OpenFoam-syntax&lt;/em&gt;
plugin already does that. Actually, it assigns different file types for different &lt;code class=&quot;highlighter-rouge&quot;&gt;foam&lt;/code&gt; files.
For example, it sets: 
&lt;code class=&quot;highlighter-rouge&quot;&gt;ft=&quot;foam256_thermodynamicProperties&quot;&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;thermodynamicProperties&lt;/code&gt; dictionaries, but
in general, its sets the file type to &lt;code class=&quot;highlighter-rouge&quot;&gt;foam256_general&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thus, if you have the plugin installed, you already have the required means to detect
&lt;code class=&quot;highlighter-rouge&quot;&gt;foam&lt;/code&gt; file type. However, for the sake of leaning VIM, we’ll illustrate a very quick way to
do it (but not that efficient!).&lt;/p&gt;

&lt;p&gt;All what we have to do is to write a small script -which contains only one function- 
searching the first few lines of a file for the keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;FoamFile&lt;/code&gt;. 
This tells VIM that the file is a &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenFOAM Dictionary File&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot; Filename: foamFT.vim&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; No debug stuff&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; Should check if the file type is already set&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; But it's OK; just set it again&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; SetFoamType&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; loop through the first 10 lines&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; FoamFile is at line 8 usually&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; nL &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; range&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; match 'FoamFile'&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;getline&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;nL&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'FoamFile'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;setfiletype&lt;/span&gt; foam
            &lt;span class=&quot;c&quot;&gt;&quot; if file type is set, leave the loop&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;endfor&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; That's it!&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; Now, when to call it?&lt;/span&gt;

augroup FOAMFTautocmds
autocmd&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;
autocmd &lt;span class=&quot;nb&quot;&gt;BufRead&lt;/span&gt; * &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; SetFoamType&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
augroup End
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To check whether the script works or not; Just execute the ex-command &lt;code class=&quot;highlighter-rouge&quot;&gt;:set ft&lt;/code&gt;
while an OpenFOAM dictionary is loaded. If it works,
the output should say &lt;em&gt;filetype=foam&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;now-we-know-the-filetype-then-what&quot;&gt;Now we know the filetype, then what?&lt;/h3&gt;

&lt;p&gt;Well, &lt;strong&gt;VIM&lt;/strong&gt; knows &lt;em&gt;what&lt;/em&gt; we are editing, but it doesn’t know &lt;em&gt;where&lt;/em&gt; we are editing it.
In fact, it does know the exact path to the current file (try running the ex-command &lt;code class=&quot;highlighter-rouge&quot;&gt;:pwd&lt;/code&gt;): 
VIM considers the startup-directory as your current directory; and to change it, guess what, we 
have to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;:cd&lt;/code&gt; (change directory!) command.&lt;/p&gt;

&lt;p&gt;If you invoke VIM from the case directory, you’ll have the advantage of file names auto-
completion in command-line mode; that is, when you type &lt;code class=&quot;highlighter-rouge&quot;&gt;:e c&amp;lt;TAB&amp;gt;&lt;/code&gt;, VIM automatically
completes &lt;em&gt;constant&lt;/em&gt; for you. But, if, for example, you invoke it from the system directory
of a case, it won’t know about the files in the other directories (&lt;em&gt;0&lt;/em&gt;, &lt;em&gt;constant&lt;/em&gt; … etc).&lt;/p&gt;

&lt;p&gt;There’s also the super-useful command &lt;code class=&quot;highlighter-rouge&quot;&gt;:find&lt;/code&gt; which finds the specified file in the path
(could include multiple -independent- directories) and then edit it. The desired work-flow can
be summarized as follows: While editing &lt;code class=&quot;highlighter-rouge&quot;&gt;blockMeshDict&lt;/code&gt; in &lt;em&gt;system&lt;/em&gt; directory of a case;
type &lt;code class=&quot;highlighter-rouge&quot;&gt;:find t&amp;lt;TAB&amp;gt;&lt;/code&gt;, which instantly expands to &lt;code class=&quot;highlighter-rouge&quot;&gt;:find transportProperties&lt;/code&gt; (Note that
this file is located under &lt;em&gt;constant&lt;/em&gt; directory), then, hitting &lt;em&gt;ENTER&lt;/em&gt; switches to that file to edit it.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot; Filename: customFoam.vim&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; FOAMSetPathToCaseDir&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; IF you care only for files in&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; system, 0, and constant, use&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; let caseDir = expand('%:p:h:h')&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; But, I'm a regexp lover, so,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; Make Vim remember everything in the path until case name.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; delete everything else!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; caseDir &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; expand&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%:p:s?\(\/.*run\/[a-zA-Z1-9\. ]*\)\/.*?\1?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; set path to include all subdirs of caseDir.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; you can also use '=+' instead of '=' to add the caseDir to&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; the default path; but I like it this way.&lt;/span&gt;
    exe &lt;span class=&quot;s1&quot;&gt;'set path='&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;caseDir&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/**'&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; I want to run blockMesh, solvers and other tools&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; Directly in VIM, so change dir to casedir&lt;/span&gt;
    exe &lt;span class=&quot;s1&quot;&gt;'cd '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;caseDir
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; This is just incredible&lt;/span&gt;

augroup FOAMautocmds
autocmd&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;
autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; foam* &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; FOAMSetPathToCaseDir&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
augroup End
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block; text-align:center;&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-3635214305281166&quot; data-ad-slot=&quot;3466181841&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Let’s go through that script line-by-line, shall we?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;function! FOAMSetPathToCaseDir()&lt;/code&gt; overwrites any function defined with this name
(Remember, user-defined function names start with a capital letter). &lt;code class=&quot;highlighter-rouge&quot;&gt;endfunction&lt;/code&gt;
denotes the end of function block.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All lines preceded with ( &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&lt;/code&gt; ) are considered comments.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The line &lt;code class=&quot;highlighter-rouge&quot;&gt;let caseDir = expand('%:p:s?\(\/.*run\/[a-zA-Z1-9\. ]*\)\/.*?\1?')&lt;/code&gt; needs
deeper explanation:&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;The standard function &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; defines Vim Variables (In this case, variables are local
to the user-defined function).&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;caseDir&lt;/em&gt; is the name of our variable (a string). It is local to the function: To use a
global variable inside a function, name it &lt;code class=&quot;highlighter-rouge&quot;&gt;g:var&lt;/code&gt;, to make it available only in this
script, use &lt;code class=&quot;highlighter-rouge&quot;&gt;s:var&lt;/code&gt;, and, in fact, to use a local variable in a function, it should be
called &lt;code class=&quot;highlighter-rouge&quot;&gt;l:var&lt;/code&gt;, but this is tolerated.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The standard function &lt;code class=&quot;highlighter-rouge&quot;&gt;expand&lt;/code&gt; manipulates filenames (shortcut &lt;em&gt;%&lt;/em&gt;) and paths to
them, with modifiers:&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:p&lt;/code&gt; prints the whole absolute path to the file, eg. while editing
&lt;em&gt;blockMeshDict&lt;/em&gt;,
 the ex-command &lt;code class=&quot;highlighter-rouge&quot;&gt;echo expand('%:p')&lt;/code&gt; should display something like
&lt;code class=&quot;highlighter-rouge&quot;&gt;/home/path-to-case/system/blockMeshDict&lt;/code&gt;.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:h&lt;/code&gt; removes the last entry in a path, eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;echo expand('%:p:h')&lt;/code&gt; would display
&lt;code class=&quot;highlighter-rouge&quot;&gt;/home/path-to-case/system&lt;/code&gt;&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s?pattern?string?&lt;/code&gt; acts like the substitute command. &lt;em&gt;pattern&lt;/em&gt; is a regular 
expression, and &lt;em&gt;string&lt;/em&gt; accepts &lt;strong&gt;back-references&lt;/strong&gt;; 
all the power you need in one command.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;So, the regexp &lt;code class=&quot;highlighter-rouge&quot;&gt;\(\/.*run\/[a-zA-Z1-9\. ]*\)\/.*&lt;/code&gt; remembers everything
from the start of filename to “run” (hopefully, your OpenFOAM cases directory) to
the first directory (that’s the case dir. at least for me). Case Name may contain
alphabet characters, digits, dots and spaces (The last two are really bad
options). The rest of the path is forgotten (eg./system/blockMeshDict).&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This way, we can find our path to the case no matter what case file we are
editing!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In the line &lt;code class=&quot;highlighter-rouge&quot;&gt;exe 'set path='.caseDir.'/**'&lt;/code&gt; , the command &lt;code class=&quot;highlighter-rouge&quot;&gt;exe&lt;/code&gt; (short for &lt;code class=&quot;highlighter-rouge&quot;&gt;execute&lt;/code&gt;) 
executes the following string as an ex-command. Concatenation in VIML is done with a dot, 
and because our &lt;em&gt;caseDir&lt;/em&gt; variable is a string, and we are still inside the same function, 
it can be concatenated with other strings. The /** part expands to all sub-directories, to the last
one of them, no matter how many levels of directories the case have.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The path variable is set so the &lt;code class=&quot;highlighter-rouge&quot;&gt;:find&lt;/code&gt; command can help us a bit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I like to change the directory to the case dir. so I can run commands directly from
within VIM without worrying about which files I’m editing, or the start-up directory.
For that, we simply use the &lt;code class=&quot;highlighter-rouge&quot;&gt;:cd&lt;/code&gt; ex-command (VIM’s command).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The function is completed, now, we have to find a way to automate calling it: 
&lt;code class=&quot;highlighter-rouge&quot;&gt;auto-commands&lt;/code&gt;. Simply, we group all of our autocmds in a group called &lt;code class=&quot;highlighter-rouge&quot;&gt;FOAMautocmds&lt;/code&gt;
(Good practice but optional) .&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;autocmd!&lt;/code&gt; overwrites previous autocmds of this group (often abbriviated as &lt;code class=&quot;highlighter-rouge&quot;&gt;au!&lt;/code&gt; ).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We want to call the function when we open a file of type &lt;code class=&quot;highlighter-rouge&quot;&gt;foam*&lt;/code&gt; (including &lt;code class=&quot;highlighter-rouge&quot;&gt;foam&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;foam_general&lt;/code&gt; … etc), so we write:
&lt;code class=&quot;highlighter-rouge&quot;&gt;autocmd FileType foam* call FOAMSetPathToCaseDir()&lt;/code&gt;
That’s it, source the script in your &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt; file and you are good to test it out:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;From the shell (from /../constant/polyMesh in an arbitrary OpenFOAM case, where the
mesh is present) run &lt;code class=&quot;highlighter-rouge&quot;&gt;vim boundary&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Now, in Vim, type &lt;code class=&quot;highlighter-rouge&quot;&gt;:fin tr&amp;lt;TAB&amp;gt;&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;fin&lt;/code&gt; is a short form for &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt;) then hit ENTER.&lt;/li&gt;
  &lt;li&gt;Check both the path and the working directory (using &lt;code class=&quot;highlighter-rouge&quot;&gt;:set path&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:pwd&lt;/code&gt; respectively).&lt;/li&gt;
  &lt;li&gt;You can issue &lt;code class=&quot;highlighter-rouge&quot;&gt;:!blockMesh&lt;/code&gt; while editing the file to rebuild the mesh.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it for now, the next post will explain ways to get the most of VIM compilers to
run &lt;code class=&quot;highlighter-rouge&quot;&gt;blockMesh&lt;/code&gt; and OpenFOAM solvers on cases right from inside VIM and browse errors.&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Aug 2018 11:21:00 +0100</pubDate>
        <link>http://localhost:4000/vim-openfoam-power-part1/</link>
        <guid isPermaLink="true">http://localhost:4000/vim-openfoam-power-part1/</guid>
        
        <category>openfoam</category>
        
        <category>productive</category>
        
        
        <category>vim productivity with openfoam</category>
        
      </item>
    
      <item>
        <title>Stock-Tank mesh construction using OpenSCAD</title>
        <description>&lt;p&gt;This post is part of a longer collection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/openscad-basics/&quot;&gt;OpenSCAD 101: Basics of the OpenSCAD language&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/openscad-transformations-boolean-operations/&quot;&gt;OpenSCAD Transformations &amp;amp; Boolean Ops&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/openscad-cfd-usage-examples/&quot;&gt;OpenSCAD CFD-oriented Usage Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It features a very simple, quick and efficient way of constructing
a (2D) stock-tank geometry and similar shapes using &lt;strong&gt;OpenSCAD&lt;/strong&gt;.
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#a-one-time-deal-hard-code-everything-in-openscad-scripts&quot; id=&quot;markdown-toc-a-one-time-deal-hard-code-everything-in-openscad-scripts&quot;&gt;A one time deal: Hard code everything in OpenSCAD scripts!&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#is-it-a-bad-idea-to-do-things-this-way&quot; id=&quot;markdown-toc-is-it-a-bad-idea-to-do-things-this-way&quot;&gt;Is it a bad idea to do things this way?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#parametric-design-of-a-stock-tank&quot; id=&quot;markdown-toc-parametric-design-of-a-stock-tank&quot;&gt;Parametric design of a stock tank&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#better-than-hard-coding-points-but-still-not-an-optimal-approach&quot; id=&quot;markdown-toc-better-than-hard-coding-points-but-still-not-an-optimal-approach&quot;&gt;Better than hard-coding points, but still not an optimal approach&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#using-modules-to-construct-parametric-geometries&quot; id=&quot;markdown-toc-using-modules-to-construct-parametric-geometries&quot;&gt;Using modules to construct parametric geometries&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main reason I present this way of thinking here is that I don’t think
&lt;code class=&quot;highlighter-rouge&quot;&gt;blockMesh&lt;/code&gt; is quite the right tool for such tasks; even when used with
a powerful macro language, like &lt;em&gt;m4&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Well, there are a couple of things I expect you to be proficient in:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A decent text editor should be used (I’m using VIM) to edit OpenSCAD scripts: 
It’s good to have something that allows for
quick basic calculations to be inserted, 
or at least, provide access to the shell.&lt;/li&gt;
  &lt;li&gt;Basic Knowledge of some interpreted languages (Python, Lua, Ruby … etc,
pick the one you like, I usually use Python): They are great to test ideas
quickly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an example mesh, we will be creating the one presented in the following
figure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/OpenSCAD/tank-model-sketch.png&quot; alt=&quot;Sketch of desired OpenSCAD model&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of course, model dimensions don’t matter because the goal is to
create a parametric one.&lt;/p&gt;

&lt;h1 id=&quot;a-one-time-deal-hard-code-everything-in-openscad-scripts&quot;&gt;A one time deal: Hard code everything in OpenSCAD scripts!&lt;/h1&gt;

&lt;p&gt;Constructing the stock-tank model point-by-point is not as hard as 
you might think:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create &lt;strong&gt;points&lt;/strong&gt; and &lt;strong&gt;paths&lt;/strong&gt; 
  vectors (if necessary) using your text editor.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;linear_extrude&lt;/code&gt; on resulting polygon.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first step strongly depends on used text editor; In VIM, 
I have this awesome vim command defined in my &lt;em&gt;.vimrc&lt;/em&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;command&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;nargs&lt;span class=&quot;p&quot;&gt;=+&lt;/span&gt; Calc &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;python &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt; &quot;from math import *;
&lt;span class=&quot;se&quot;&gt;            \&lt;/span&gt; import numpy &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; np;
&lt;span class=&quot;se&quot;&gt;            \&lt;/span&gt; np&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;set_printoptions&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;precision&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;se&quot;&gt;            \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;args&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which allows me to run Python code directly via VIM (imports
are kind of important here).&lt;/p&gt;

&lt;p&gt;If, for example, I need a set of points to define an “arc”
of &lt;strong&gt;radius = 1&lt;/strong&gt; between &lt;code class=&quot;highlighter-rouge&quot;&gt;[10,1]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;[12,1]&lt;/code&gt; points,
I only need to issue the following VIM command while
editing the SCAD script:&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;!-- Disp add --&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-3635214305281166&quot; data-ad-slot=&quot;6599434036&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Calc &lt;span class=&quot;k&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;np&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;linspace&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;np&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;np&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;sqrt&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;**&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;; print&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;transpose&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;tolist&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which will insert all points into the current file (actually, the print command
is the one responsible for this).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;linear_extrude&lt;/code&gt;’s default &lt;code class=&quot;highlighter-rouge&quot;&gt;paths&lt;/code&gt; vector is usually fine.&lt;/p&gt;

&lt;h2 id=&quot;is-it-a-bad-idea-to-do-things-this-way&quot;&gt;Is it a bad idea to do things this way?&lt;/h2&gt;

&lt;p&gt;Yes, it is. These tricks may work if one only needs to prototype something, or if
one desires to check whether an idea is good enough to be implemented! 
But they fail badly in real situations,
where users absolutely have to create a parametric model.&lt;/p&gt;

&lt;p&gt;Fortunately, similar tricks often suggest possible approaches to the task at hand:
Notice that we used Python’s &lt;strong&gt;list comprehensions&lt;/strong&gt; to create &lt;em&gt;numpy&lt;/em&gt; vectors;
So, why not using &lt;strong&gt;OpenSCAD list comprehensions&lt;/strong&gt; to create OpenSCAD vectors?&lt;/p&gt;

&lt;h1 id=&quot;parametric-design-of-a-stock-tank&quot;&gt;Parametric design of a stock tank&lt;/h1&gt;

&lt;h2 id=&quot;better-than-hard-coding-points-but-still-not-an-optimal-approach&quot;&gt;Better than hard-coding points, but still not an optimal approach&lt;/h2&gt;

&lt;p&gt;Instead of relying on the power of a text editor, it might be a good idea to
use list comprehensions to build needed points. Here’s a complete OpenSCAD
script explaining the situation:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;// Points of the lower arc:
// half-a-circle, radius = 1, between [10,1] and [12,1]
// which means center is [11,1]
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Points of the upper arc
// half-a-circle, radius = 2, between [9,1] and [13,1]
// which means center is [11,1]
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Repeating code, --&amp;gt; consider a function
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// polygon points, just some concatenated lists
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  

&lt;span class=&quot;c1&quot;&gt;// Default behavior of polygon module
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// The actual 3D model
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear_extrude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is certainly a better approach, but we still need to do some
adjustments for easier parameterization: Let’s define an (object) module to 
create the boxes-like portion of our model.&lt;/p&gt;

&lt;h2 id=&quot;using-modules-to-construct-parametric-geometries&quot;&gt;Using modules to construct parametric geometries&lt;/h2&gt;

&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block; text-align:center;&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-3635214305281166&quot; data-ad-slot=&quot;3466181841&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
    Create an object model called tank.
    Parameters:
    - w: Base width, to interface with the &quot;arc-y region&quot;, default=1.
    - tbh: Total Box height, defaults to 10.
    - pbl: A list of partial box lengths, defaults to [6,4]
    - pbw: A list of partial box &quot;widths&quot;, default = [3,1]
    - st: Translate partial boxes in x-direction, defaults to [0,3]
*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tank&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tbh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pbl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pbw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// create a parent cube, and subtruct all following objects
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// You can also build this region box-by-box    
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;difference&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// parent cube
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// A special box, allows for better connection with the arc.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tbh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tbh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// A set of helper boxes to create desired shape.
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pbw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can also define our own module to create arcs:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
    Create module named arc.
    Parameters:
    - r: inner radius, default=1.
    - w: arc width, defaults to 1.
    - ext: vertical extension length, defaults  to 3.
*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;arc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// points on arcs
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Default behavior of polygon, but let's
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// specify it.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;linear_extrude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To make sense of module arguments, refer to the following figure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/OpenSCAD/tank-model-boxes.png&quot; alt=&quot;Partially parametric OpenSCAD model&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, creating basic models is as simple as issuing:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;More complicated models can be easily derived by overwriting
default parameter values:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tbh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pbl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pbw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which results in:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/OpenSCAD/tank-model.png&quot; alt=&quot;Final OpenSCAD parametric model&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There may be simpler ways to achieve these results, but this approach
is most useful for users who want to practice creating 3D geometry
models with &lt;strong&gt;OpenSCAD&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Sun, 01 Jul 2018 20:02:01 +0100</pubDate>
        <link>http://localhost:4000/openscad-stock-tank-model/</link>
        <guid isPermaLink="true">http://localhost:4000/openscad-stock-tank-model/</guid>
        
        <category>openfoam</category>
        
        <category>openscad</category>
        
        <category>meshing</category>
        
        
        <category>openscad basics</category>
        
      </item>
    
      <item>
        <title>OpenSCAD CFD-oriented Usage Examples</title>
        <description>&lt;p&gt;We’ve been learning the basics of OpenSCAD language:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/openscad-basics/&quot;&gt;OpenSCAD 101: Basics of the OpenSCAD language&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/openscad-transformations-boolean-operations/&quot;&gt;OpenSCAD Transformations &amp;amp; Boolean Ops&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post, I’ll teach you how to build commonly used shapes using new tricks:
You probably can create them already, but I want to show you the power of
2D-shapes Extrusion in OpenSCAD.
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#a-parametric-t-junction-module&quot; id=&quot;markdown-toc-a-parametric-t-junction-module&quot;&gt;A parametric T-junction module.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-parametric-u-like-pipe-for-openscad-2016&quot; id=&quot;markdown-toc-a-parametric-u-like-pipe-for-openscad-2016&quot;&gt;A parametric U-like pipe [For OpenSCAD 2016+]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-parametric-u-like-pipe-for-older-openscad&quot; id=&quot;markdown-toc-a-parametric-u-like-pipe-for-older-openscad&quot;&gt;A parametric U-like pipe [For older OpenSCAD]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#an-even-better-ushape-module&quot; id=&quot;markdown-toc-an-even-better-ushape-module&quot;&gt;An Even Better Ushape module&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-bottle-of-water&quot; id=&quot;markdown-toc-a-bottle-of-water&quot;&gt;A Bottle of water&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#a-simple-model&quot; id=&quot;markdown-toc-a-simple-model&quot;&gt;A simple model&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#a-more-complicated-model&quot; id=&quot;markdown-toc-a-more-complicated-model&quot;&gt;A more complicated model&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#exporting-models-to-stl-format&quot; id=&quot;markdown-toc-exporting-models-to-stl-format&quot;&gt;Exporting models to STL format&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;One of the most important lessons I learned while working with OpenSCAD is
that I
absolutely have to keep my models “parametric” no matter what!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;a-parametric-t-junction-module&quot;&gt;A parametric T-junction module.&lt;/h2&gt;

&lt;p&gt;First, let’s learn how to manipulate module parameters (arguments) efficiently:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You already know that you can specify a default value for a parameter.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cylinder(r=1,h=2)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;cylinder(r1=1, r2=2, h=5)&lt;/code&gt; both work fine because
the cylinder module is set up in a way that if only one radius is supplied,
it’s considered as “cylinder radius”; but if two are supplied, the module
produces a cone like shape.&lt;/li&gt;
  &lt;li&gt;At the moment, OpenSCAD doesn’t support setting a module’s parameter value as the
default value of another one, i.e. the command &lt;code class=&quot;highlighter-rouge&quot;&gt;module dum(p1,p2=p1) {echo(p2);}&lt;/code&gt; 
will result in a warning: “Ignoring unknown variable p1”, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; command
will say that &lt;code class=&quot;highlighter-rouge&quot;&gt;p2&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;undef&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following example shows a way of dealing with such situations where we want
to use a second radius only if the user says so.&lt;/p&gt;

&lt;p&gt;The T-Junction shape I have in mind is illustrated in the following image 
(Well, this is actually the resulting one …):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/OpenSCAD/openscad-tjunction.jpg&quot; alt=&quot;OpenSCAD T-Junction Model&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you have any questions, don’t hesitate, fire at me in the comments section.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
    Create an object module called tJunction.
    Parameters:
    - mr1: Main cylinder radius in mm
    - mh:  Main cylinder height in mm
    - ar1: Additional cylinder radius in mm
    - ah:  Additional cylinder height in mm
    [Optional parameters, for cone-like shapes]
    - mr2: Second main cylinder radius in mm 
    - ar2: Second additional cylinder radius in mm 

    This module creates a T-shaped pipe (pointing up in z-direction).
*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tJunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ar1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ar2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// First check that the main cylinder is wider
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mr1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ar1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; 
       &lt;span class=&quot;c1&quot;&gt;// ECHO knows HTML 
&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// Use checkMesh-like indicators (***) for auto error finding
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;font color='red'&amp;gt;*** Check cylinders dimensions&amp;lt;/font&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
    
    &lt;span class=&quot;c1&quot;&gt;// If optional parameters are not defined,
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Use only the main ones.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;mr2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mr2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mr1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ar2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ar2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ar1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ar2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Build the actual thing
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cylinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cylinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ar1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ar2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// An example
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tJunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* translate(-[100,0,0]) tJunction(12,100,5,50,5,3, $fn=60); */&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;!-- Disp add --&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-3635214305281166&quot; data-ad-slot=&quot;6599434036&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-parametric-u-like-pipe-for-openscad-2016&quot;&gt;A parametric U-like pipe [For OpenSCAD 2016+]&lt;/h2&gt;

&lt;p&gt;There are generally two ways to create 3D shapes out of 2D ones with OpenSCAD:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Linear Extrusion:&lt;/strong&gt; Extruding a 2D shape in a single direction
(Specifically, in the z-direction), but the shape can be twisted!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Rotating Extrusion:&lt;/strong&gt; Rotating a 2D shape around the Z-axis to create a
symmetric shape (Rotational symmetry).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;… And there is a command for each method: &lt;code class=&quot;highlighter-rouge&quot;&gt;linear_extrude&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;rotate_extrude&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s see what parameters we need to specify in order to build a U-shaped pipe:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/OpenSCAD/openscad-ushape.jpg&quot; alt=&quot;OpenSCAD UShaped pipe&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
    Create an object module named Ushape.
    Parameters:
    - ur1: Pipe radius.
    - ur2: 2*ur2 is the center-to-center distance between 
           the extensions of U shape.
    - uh: length of these extensions.
    Requires OpenSCAD 2016.xx or newer because:
    ** It uses the angle argument **
    
    Makes use of standard extrusions to build
    a U-shaped pipe.
*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ushape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ur2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Circle resolution
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;cRes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Extrusion resolution
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;eRes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// The rounded part
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;rotate_extrude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convexity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// U extensions
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linear_extrude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linear_extrude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Simple example usage:
// Ushape(2,10,20);
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Hollow U-shape
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Ushape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Ushape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;20.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s important that you learn more about these extrusion commands from the
&lt;a href=&quot;https://en.wikibooks.org/wiki/OpenSCAD_User_Manual/2D_to_3D_Extrusion#Rotate_Extrude&quot;&gt;[User
Manual]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;a-parametric-u-like-pipe-for-older-openscad&quot;&gt;A parametric U-like pipe [For older OpenSCAD]&lt;/h2&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
    Create an object module named Ushape.
    Parameters:
    - ur1: Pipe radius.
    - ur2: 2*ur2 is the center-to-center distance between 
           the extensions of U shape.
    - uh: length of these extensions.
    Works with all OpenSCAD versions:
    Instead of using the new &quot;angle&quot; argument,
    use an intersection to get the same effect.
    Makes use of standard extrusions to build
    a U-shaped pipe.
*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ushape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ur2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Circle resolution
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;cRes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Extrusion resolution
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;eRes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The rounded part
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;intersection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Intersect the extruded circle with a cube
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;rotate_extrude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convexity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;# translate([0,(ur2+ur1),0])
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// U extensions
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linear_extrude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linear_extrude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Don’t forget to remove the highlighter (#) from the cube command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;an-even-better-ushape-module&quot;&gt;An Even Better Ushape module&lt;/h2&gt;

&lt;p&gt;Why limiting ourselves to circles? Indeed, there is no reason, so, we can
upgrade our previous model to take in any 2D shape (hopefully) and use it when
creating the U shape.&lt;/p&gt;

&lt;p&gt;The transition is simple:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Remove instructions and variables (Resolution and Radius variables) that
are related to the base circle in old module.&lt;/li&gt;
  &lt;li&gt;Replace every instance of the circle with &lt;code class=&quot;highlighter-rouge&quot;&gt;children(0)&lt;/code&gt; (The first item in the
children list).&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
    Create an operator module named Ushape.
    Parameters:
    - ur: 2*ur is the center-to-center distance between 
           the extensions of U shape.
    - uh: length of these extensions.
    Children:
    - Use only one child object
    Requires OpenSCAD 2016.xx or newer because:
    ** It uses the angle argument **
    
    Makes use of standard extrusions to build
    a U-shaped pipe.
*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ushape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Extrusion resolution
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;eRes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// The rounded part
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;rotate_extrude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convexity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

        &lt;span class=&quot;c1&quot;&gt;// U extensions
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linear_extrude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linear_extrude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Hollow U-shape
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Ushape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Ushape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;20.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The previous example should produce something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/OpenSCAD/openscad-operator-ushape.jpg&quot; alt=&quot;OpenSCAD operator module Ushape&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;

  &lt;blockquote&gt;
    &lt;p&gt;Note: These modules produce a medium-quality STLs (in terms of Triangle
Quality), but this can be easily improved if you are in dire need of quality
triangles.&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;blockquote&gt;
    &lt;p&gt;You can check these models using OpenFOAM’s &lt;code class=&quot;highlighter-rouge&quot;&gt;surfaceCheck&lt;/code&gt; utility after
exporting them to STL files.&lt;/p&gt;
  &lt;/blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;a-bottle-of-water&quot;&gt;A Bottle of water&lt;/h2&gt;

&lt;h3 id=&quot;a-simple-model&quot;&gt;A simple model&lt;/h3&gt;

&lt;p&gt;Extrusion commands are best used with &lt;code class=&quot;highlighter-rouge&quot;&gt;polygons&lt;/code&gt;; This example illustrate how
simple it is to model a bottle of water in OpenSCAD. Of course, the approach
used here is my own way of dealing with simple problems efficiently; For more
complicated shapes, I’ll show you another way to make the most of &lt;code class=&quot;highlighter-rouge&quot;&gt;rotate_extrude&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, we have to get a simple blueprint for a bottle of water.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://us.123rf.com/450wm/maralingstad/maralingstad1509/maralingstad150901356/45434655-vector-blueprint-water-bottle-on-engineer-or-architect-background-.jpg&quot;&gt;This picture&lt;/a&gt; is good enough.&lt;/p&gt;

&lt;p&gt;I usually use &lt;a href=&quot;https://automeris.io/WebPlotDigitizer&quot;&gt;WepPlotDigitizer&lt;/a&gt; 
   to extract the coordinates of the most important points in the shape:&lt;/p&gt;

&lt;p&gt;In this case, I chose the center of the main circle as an origin of
coordinates system (Both axes are chosen to match the featured “diameters”).&lt;/p&gt;

&lt;p&gt;In the following picture:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;X1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Y1&lt;/code&gt; are at the origin.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;X2= (1,0)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Y2= (0,3)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/OpenSCAD/openscad-bottle-coords.png&quot; alt=&quot;OpenSCAD bottle coords&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next we mark some points on one half of the bottle (so we can rotate it later):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The order of these points is actually not important because the &lt;code class=&quot;highlighter-rouge&quot;&gt;polygon&lt;/code&gt;
command in OpenSCAD has a &lt;code class=&quot;highlighter-rouge&quot;&gt;paths&lt;/code&gt; option to specify the correct order of
linked points, but this is extra work; Thus, make sure you create a manifold
polygon while selecting these points.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/OpenSCAD/openscad-bottle-points.png&quot; alt=&quot;WebPlotDigitizer bottle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Point coordinates can be viewed by Pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;View Data&lt;/code&gt; under the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dataset&lt;/code&gt; tab in
&lt;code class=&quot;highlighter-rouge&quot;&gt;WebPlotDigitizer&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/OpenSCAD/openscad-bottle-data.png&quot; alt=&quot;WebPlotDigitizer bottle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, creating the actual bottle model is as easy as executing the command:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Create points vector
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pnts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.458&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.033&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.458&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.395&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.553&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.433&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.842&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.367&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.905&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Create the polygon and rotate it.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rotate_extrude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convexity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pnts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;Note that we can omit point’s z-coordinate if it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;blockquote&gt;
    &lt;p&gt;Using a decent text editor is crucial here: In VIM, 
you can create the &lt;code class=&quot;highlighter-rouge&quot;&gt;pnts&lt;/code&gt; vector with only one command
(applied to the text in previous figure).
&lt;code class=&quot;highlighter-rouge&quot;&gt;:1,8 g/^/ exe &quot;norm! A],\&amp;lt;Esc&amp;gt;I[&quot;&lt;/code&gt;&lt;br /&gt;
Done! Now you only have to delete the last &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; is the first line’s number, and &lt;code class=&quot;highlighter-rouge&quot;&gt;8&lt;/code&gt; is the last one.&lt;/li&gt;
      &lt;li&gt;If you want to know more, ask in the comments.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;This should result in the following model:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/OpenSCAD/openscad-bottle-water.jpg&quot; alt=&quot;OpenSCAD Bottle Model&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-more-complicated-model&quot;&gt;A more complicated model&lt;/h3&gt;

&lt;p&gt;If you want an exact match to your sketch, you can follow the following approach:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Create an SVG-path file using &lt;code class=&quot;highlighter-rouge&quot;&gt;GIMP&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;LibreCAD&lt;/code&gt; for your model.&lt;/li&gt;
  &lt;li&gt;Convert the SVG file to DXF using &lt;code class=&quot;highlighter-rouge&quot;&gt;inkscape&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pstoedit&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Get it into OpenSCAD and use &lt;code class=&quot;highlighter-rouge&quot;&gt;rotate_extrude&lt;/code&gt; on it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An example SVG file for a sample bottle of water can be found
&lt;a href=&quot;/assets/img/OpenSCAD/openscad-path-bottle.svg&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/OpenSCAD/openscad-path-bottle.png&quot; alt=&quot;OpenSCAD SVG path&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s convert this SVG file to an OpenSCAD-compatible DXF:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;inkscape &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; intermediate.eps openscad-path-bottle.svg
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pstoedit &lt;span class=&quot;nt&quot;&gt;-dt&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; dxf:-polyaslines&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-mm&lt;/span&gt; intermediate.eps openscad-path-bottle.dxf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;The first command uses &lt;code class=&quot;highlighter-rouge&quot;&gt;inkscape&lt;/code&gt; to convert the SVG file to the EPS format.&lt;/li&gt;
  &lt;li&gt;The second one uses &lt;code class=&quot;highlighter-rouge&quot;&gt;pstoedit&lt;/code&gt; to convert the resulting EPS file to a DXF
file.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that the &lt;code class=&quot;highlighter-rouge&quot;&gt;-polyaslines&lt;/code&gt; option is very important as OpenSCAD doesn’t
support curved lines in DXF files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To use &lt;code class=&quot;highlighter-rouge&quot;&gt;openscad-path-bottle.dxf&lt;/code&gt; put it in the same directory as the following
script (2D shape highlighted):&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Easy as eveything else in OpenSCAD
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rotate_extrude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convexity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import(&quot;openscad-path-bottle.dxf&quot;);
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which will result in the following shape:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/OpenSCAD/openscad-bottle-svg.png&quot; alt=&quot;OpenSCAD STL bottle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hey, why don’t you try this for fun (Try it multiple times):&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polyR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polyR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rotate_extrude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convexity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block; text-align:center;&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-3635214305281166&quot; data-ad-slot=&quot;4856474507&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;exporting-models-to-stl-format&quot;&gt;Exporting models to STL format&lt;/h2&gt;

&lt;p&gt;To export your geometry models to STL files, you can either:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the GUI: &lt;code class=&quot;highlighter-rouge&quot;&gt;File &amp;gt; Export &amp;gt; Export as STL ...&lt;/code&gt; after rendering the model (with &lt;code class=&quot;highlighter-rouge&quot;&gt;F6&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Or, from the command line:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openscad file.scad &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; file.stl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By default, OpenSCAD exports everything as a single region (named
&lt;code class=&quot;highlighter-rouge&quot;&gt;OpenSCAD_Model&lt;/code&gt;) to an ASCII STL file. You’ll learn how to improve this
behavior in the next posts.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;All the models described here are fairly simple and OpenFOAM’s &lt;code class=&quot;highlighter-rouge&quot;&gt;autoPatch&lt;/code&gt; can
handle separating mesh boundary patches later efficiently!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s all for today, I hope this was a useful post; see you in the next one!&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Jun 2018 08:45:13 +0100</pubDate>
        <link>http://localhost:4000/openscad-cfd-usage-examples/</link>
        <guid isPermaLink="true">http://localhost:4000/openscad-cfd-usage-examples/</guid>
        
        <category>openfoam</category>
        
        <category>openscad</category>
        
        <category>meshing</category>
        
        
        <category>openscad basics</category>
        
      </item>
    
      <item>
        <title>OpenSCAD Transformations &amp; Boolean Operations</title>
        <description>&lt;p&gt;In my previous post, &lt;a href=&quot;/openscad-basics/&quot;&gt;OpenSCAD 101: Basics of the Programmers’ CAD software&lt;/a&gt;,
we’ve talked about the most important commands and OpenSCAD’s language features.
This time, we’ll discuss transformations (&lt;code class=&quot;highlighter-rouge&quot;&gt;translate&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;scale&lt;/code&gt;, … etc) and
introduce you to a new subject: Boolean operations on primitives.
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#more-on-openscads-transformation-modules&quot; id=&quot;markdown-toc-more-on-openscads-transformation-modules&quot;&gt;More on OpenSCAD’s transformation modules&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#cascading-transformations-on-a-group-of-objects&quot; id=&quot;markdown-toc-cascading-transformations-on-a-group-of-objects&quot;&gt;Cascading transformations on a group of objects&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#scope-of-openscad-variables&quot; id=&quot;markdown-toc-scope-of-openscad-variables&quot;&gt;Scope of OpenSCAD variables&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#boolean-operations-with-openscad&quot; id=&quot;markdown-toc-boolean-operations-with-openscad&quot;&gt;Boolean Operations with OpenSCAD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;more-on-openscads-transformation-modules&quot;&gt;More on OpenSCAD’s transformation modules&lt;/h2&gt;

&lt;h3 id=&quot;cascading-transformations-on-a-group-of-objects&quot;&gt;Cascading transformations on a group of objects&lt;/h3&gt;

&lt;p&gt;A transformation is basically an operator module, so, it returns a new object,
which, naturally, can be transformed again. You are already familiar with this
concept, but, what if we wanted to perform two transformations on a group of
objects?&lt;/p&gt;

&lt;p&gt;Well, grouping in OpenSCAD is usually performed with &lt;code class=&quot;highlighter-rouge&quot;&gt;{...}&lt;/code&gt; (groups objects,
actions … etc). The only requirement here is that you don’t forget the tailing
semi-colon at the end of each object definition:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;m_axis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mirror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sphere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;mirror&lt;/code&gt; transformation mirrors the object on a plane through the origin.
&lt;code class=&quot;highlighter-rouge&quot;&gt;m_axis&lt;/code&gt; is a normal vector to that plane. So, the previous snippet will:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a 10x20x20 cube at the origin.&lt;/li&gt;
  &lt;li&gt;Create a sphere of radius 5 at (10,0,0).&lt;/li&gt;
  &lt;li&gt;Translate each object by &lt;code class=&quot;highlighter-rouge&quot;&gt;cent&lt;/code&gt; vector.&lt;/li&gt;
  &lt;li&gt;Mirror both resulting objects on the X-Y plane.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;This &lt;a href=&quot;http://openscad.org/cheatsheet/&quot;&gt;[CheatSheet]&lt;/a&gt; lists the available transformations
and the &lt;a href=&quot;https://en.wikibooks.org/wiki/OpenSCAD_User_Manual/Transformations#mirror&quot;&gt;[user
manual]&lt;/a&gt;
explains how to use them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;scope-of-openscad-variables&quot;&gt;Scope of OpenSCAD variables&lt;/h3&gt;

&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block; text-align:center;&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-3635214305281166&quot; data-ad-slot=&quot;3466181841&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Continuing with our grouping thing: Remember when I told you not to mess with
variables in OpenSCAD? Well, you are now ready to do so:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;OpenSCAD (starting from 2015.03 I think) is a scope-aware language, which
means variables are defined locally in their scopes and can overwrite outer
ones but only inside their scope.&lt;/li&gt;
  &lt;li&gt;A couple of braces &lt;code class=&quot;highlighter-rouge&quot;&gt;{...}&lt;/code&gt; defines a new scope only if used with a module.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To illustrate, you can try out these few lines:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Global scope
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Inner scope
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sphere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Global scope is back
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; will output the value of the vector &lt;code class=&quot;highlighter-rouge&quot;&gt;vec&lt;/code&gt;; the second one will
say that &lt;code class=&quot;highlighter-rouge&quot;&gt;vec&lt;/code&gt; is a floating point equal to 5, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;rotate&lt;/code&gt; command
will use the vector &lt;code class=&quot;highlighter-rouge&quot;&gt;vec&lt;/code&gt; simply because it doesn’t know about the other &lt;code class=&quot;highlighter-rouge&quot;&gt;vec&lt;/code&gt;
(note that the &lt;code class=&quot;highlighter-rouge&quot;&gt;translate&lt;/code&gt; command also doesn’t know about it!).&lt;/p&gt;

&lt;p&gt;Dummy scopes like this one:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// is this a scope?
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ECHO: 10 
              No it's not! 
              If it was, ECHO should say 'undef' */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;are not considered as valid scopes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A side note:&lt;/strong&gt;&lt;br /&gt;
Numbers are represented as 64 bit IEEE floating points, and only decimal
notation is supported.
&lt;code class=&quot;highlighter-rouge&quot;&gt;nan&lt;/code&gt; (NotANumber) is the only value that is not equal to any value (including
itself):&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// You can't say this:
// if (x == 0/0) echo &quot;yes&quot;;
// Because nothing is equal to 0/0 including 0/0
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Alternatively, use this:
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// This also useful:
// Test to see if y is defined or not:
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;y is not defined yet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;boolean-operations-with-openscad&quot;&gt;Boolean Operations with OpenSCAD&lt;/h2&gt;

&lt;p&gt;There are three basic Boolean operations you can perform on a group of objects
in OpenSCAD:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Union (logical Or)&lt;/strong&gt;: Simply sums all child objects into a single one.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Difference (logical and not)&lt;/strong&gt;: Subtracts all child objects starting from
the second one from the first one.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Intersection (logical and)&lt;/strong&gt;: Intersects all child objects.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;They are all modules with no arguments, so:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sphere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sphere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Subtract all following objects from the sphere
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intersection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sphere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;!-- Disp add --&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-3635214305281166&quot; data-ad-slot=&quot;6599434036&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The following image showcases the results of each module call:
&lt;img src=&quot;/assets/img/OpenSCAD/openscad-boolean-operations.jpg&quot; alt=&quot;&amp;quot;OpenSCAD Boolean Operations&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s do something interesting with what we have just learned:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
   Create a module named specialCubes.
   It places a series of cubes on the perimeter of
   a circle (centered at the origin) where each
   cube is oriented towards the center of this circle.
   Parameters:
     - num: The number of cubes to place.
     - dist: circle radius (distance from origin). 
*/&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;specialCubes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Approximate the size of each cube
// Remember, this var. is local to this module
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* Yes, PI is defined in the MCAD library
   Alongside TAU (2*PI) and mm_per_inch to convert
   inches to meters.
   Take a look at /usr/share/openscad/libraries/MCAD/constants.scad
*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;360&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;360&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ranges are of the form [start: step :end]
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Subtract cubes as we create them from the first
// Cylinder.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cylinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;specialCubes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;specialCubes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cylinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will result in something similar to:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/OpenSCAD/openscad-interesting-boolean.jpg&quot; alt=&quot;OpenSCAD transformations and boolean ops&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;

  &lt;blockquote&gt;
    &lt;p&gt;Try to remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;center=true&lt;/code&gt; option from the first cylinder and
evaluate the results!&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;blockquote&gt;
    &lt;p&gt;If you are having trouble figuring out what happened here,&lt;br /&gt;
rebuild the module from scratch without the for command.&lt;/p&gt;
  &lt;/blockquote&gt;

&lt;/blockquote&gt;

&lt;p&gt;Let’s explain the &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; command though:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Create a cube at the origin of calculated size.&lt;/li&gt;
  &lt;li&gt;Rotate it 45 degrees so it’s oriented towards the origin in its original state.&lt;/li&gt;
  &lt;li&gt;Translate it in the x-direction by &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt; units.&lt;/li&gt;
  &lt;li&gt;Rotate the resulting object by &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; degrees around the z-axis.&lt;/li&gt;
  &lt;li&gt;These four steps are repeated for each &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;range&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that the last cylinder cannot have a height of ‘1’, because 
the &lt;code class=&quot;highlighter-rouge&quot;&gt;difference&lt;/code&gt; module will be confused when it finds the common
 surface (&lt;code class=&quot;highlighter-rouge&quot;&gt;h = 1.01&lt;/code&gt; will work fine though).&lt;/p&gt;
</description>
        <pubDate>Fri, 15 Jun 2018 07:50:02 +0100</pubDate>
        <link>http://localhost:4000/openscad-transformations-boolean-operations/</link>
        <guid isPermaLink="true">http://localhost:4000/openscad-transformations-boolean-operations/</guid>
        
        <category>openfoam</category>
        
        <category>openscad</category>
        
        <category>meshing</category>
        
        
        <category>openscad basics</category>
        
      </item>
    
      <item>
        <title>OpenSCAD 101: Basics of the Programmers' CAD software</title>
        <description>&lt;p&gt;When it comes to &lt;code class=&quot;highlighter-rouge&quot;&gt;creating a Mesh&lt;/code&gt; for OpenFOAM, I always look for the most
&lt;strong&gt;modular&lt;/strong&gt; way to do things:
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If a great control over the mesh is required, &lt;strong&gt;m4 macro language&lt;/strong&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;blockMesh&lt;/code&gt; 
are good choices. They are somewhat tiresome to use, but as long as they allow
me to do pretty much anything I can think of; I don’t care!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If I can live with little control over the mesh, (which is a more frequent case)
 I usually follow a 
&lt;strong&gt;Model-it-with-CAD-then-cfMesh-it&lt;/strong&gt; approach; and there are two reasons:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;If I’m to loose some control over the mesh anyway, why struggle with the &lt;em&gt;very-&lt;/em&gt;long &lt;code class=&quot;highlighter-rouge&quot;&gt;snappyHexMeshDict&lt;/code&gt;?&lt;/li&gt;
  &lt;li&gt;Parameterization of &lt;em&gt;cfMesh’s&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;meshDict&lt;/code&gt; is much easier.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#before-we-start-&quot; id=&quot;markdown-toc-before-we-start-&quot;&gt;Before we start …&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting-up-openscad&quot; id=&quot;markdown-toc-setting-up-openscad&quot;&gt;Setting up OpenSCAD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#first-steps-learning-the-syntax&quot; id=&quot;markdown-toc-first-steps-learning-the-syntax&quot;&gt;First steps: Learning the Syntax&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#general-syntax&quot; id=&quot;markdown-toc-general-syntax&quot;&gt;General syntax&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#variables-in-openscad&quot; id=&quot;markdown-toc-variables-in-openscad&quot;&gt;Variables in OpenSCAD&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#openscad-vectors-lists&quot; id=&quot;markdown-toc-openscad-vectors-lists&quot;&gt;OpenSCAD Vectors (Lists)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#openscad-functions&quot; id=&quot;markdown-toc-openscad-functions&quot;&gt;OpenSCAD functions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-include-directive&quot; id=&quot;markdown-toc-the-include-directive&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; “directive”&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#basic-openscad-commands&quot; id=&quot;markdown-toc-basic-openscad-commands&quot;&gt;Basic OpenSCAD commands&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#2d-and-3d-shapes&quot; id=&quot;markdown-toc-2d-and-3d-shapes&quot;&gt;2D and 3D shapes&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#transformations-and-modules&quot; id=&quot;markdown-toc-transformations-and-modules&quot;&gt;Transformations and Modules&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#modifiers&quot; id=&quot;markdown-toc-modifiers&quot;&gt;Modifiers&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post is part of a longer series on how to make use of OpenSCAD
capabilities to perform CFD-like mesh generation. The typical workflow you are supposed
to follow can be summarized in these three key points:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;parametric&lt;/code&gt; OpenSCAD model for your problem’s geometry.&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;cfMesh&lt;/code&gt; to generate quality meshes (which can also be parametric).&lt;/li&gt;
  &lt;li&gt;Simulate the case with OpenFOAM, change some design variables (Geometry, Mesh
or Simulation properties) and go back to step &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt; as needed.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;DISCLAIMER:&lt;/p&gt;

  &lt;p&gt;Every Code snippet in this post is a fully-functional OpenSCAD “script”.&lt;br /&gt;
I strongly recommend you follow through by “trying” the commands!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block; text-align:center;&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-3635214305281166&quot; data-ad-slot=&quot;4856474507&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;before-we-start-&quot;&gt;Before we start …&lt;/h2&gt;

&lt;p&gt;Before we dive into details of how to create parametric models in OpenSCAD, I
would like to introduce you to some important tips that you will find very
useful along the course of your learning process:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You can run OpenSCAD scripts here: &lt;a href=&quot;http://openscad.net&quot;&gt;openscad.net&lt;/a&gt; if
you don’t want to install it on your system.&lt;/li&gt;
  &lt;li&gt;OpenSCAD is written in &lt;strong&gt;C++&lt;/strong&gt;, and it’s a language by itself.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Variables&lt;/code&gt; in OpenSCAD are a bit &lt;em&gt;weird&lt;/em&gt;: They are set at compile time rather
than at “run” time (We’ll talk about this later, you only need to know
that you should never change the value of a variable after setting it).&lt;/li&gt;
  &lt;li&gt;Just like pretty much any other CAD software, you don’t need to stick with
the standard library: You can easily develop your own, and use others
libraries.&lt;/li&gt;
  &lt;li&gt;Learning the basics of OpenSCAD shouldn’t take longer than 15mins!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;OpenSCAD binaries&lt;/strong&gt; are available for a wide range of OSs but I’m focusing on
Linux distros (Command-line usage … etc).&lt;/li&gt;
  &lt;li&gt;You don’t need to write code with the awful default &lt;em&gt;text editor&lt;/em&gt; that comes
with OpenSCAD: Use your own text editor instead (I’m using VIM with
&lt;a href=&quot;http://github.com/torrancew/vim-openscad&quot;&gt;VIM-OpenSCAD plugin&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;setting-up-openscad&quot;&gt;Setting up OpenSCAD&lt;/h2&gt;

&lt;p&gt;On Ubuntu-based distros, installing OpenSCAD is as easy as executing the
command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install openscad
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But this may install a relatively outdated version of the software (&lt;strong&gt;Ubuntu
16.04 LTS&lt;/strong&gt; repos have the 2015.3 version, which is good for now). If you want
the latest release, follow the instructions provided in the 
&lt;a href=&quot;http://www.openscad.org/downloads.html&quot;&gt;Official OpenSCAD Download page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The default interface will combine a basic &lt;em&gt;text editor&lt;/em&gt;, a &lt;em&gt;preview/render window&lt;/em&gt;
(to preview the created models), and a &lt;em&gt;“log” console&lt;/em&gt; (displays useful information).&lt;/p&gt;

&lt;p&gt;I just can’t stand the default text editor so I’m using &lt;strong&gt;VIM&lt;/strong&gt; instead (you
can use your favorite text editor). You just have to make
sure that &lt;code class=&quot;highlighter-rouge&quot;&gt;Design &amp;gt;&amp;gt; Automatic Reload and Preview&lt;/code&gt; option is turned on (in
OpenSCAD); This way, every time you save your &lt;em&gt;.scad&lt;/em&gt; file, it gets reloaded and
models are automatically previewed.&lt;/p&gt;

&lt;p&gt;Of course, VIM doesn’t have native support for OpenSCAD’s language, that’s why I
needed to install a syntax-highlighting plugin first:
&lt;a href=&quot;http://github.com/torrancew/vim-openscad&quot;&gt;Vim-OpenSCAD&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, you may need to create a directory to hold all your OpenSCAD projects 
(Store &lt;em&gt;all&lt;/em&gt; of your OpenSCAD scripts in this directory) :&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/OpenSCADProjs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Just do it, OK! It eases dealing with library imports later!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;first-steps-learning-the-syntax&quot;&gt;First steps: Learning the Syntax&lt;/h2&gt;

&lt;p&gt;OpenSCAD’s language is actually very simple, and can be learned in no time; In
this section we’ll try to break down the most interesting features of the
language (from a beginner’s perspective of course).&lt;/p&gt;

&lt;h3 id=&quot;general-syntax&quot;&gt;General syntax&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Every statement in an OpenSCAD “script” has to end with a semi-colon.&lt;/li&gt;
  &lt;li&gt;A simple statement can create shapes, transform them, perform Boolean
operations … etc.&lt;/li&gt;
  &lt;li&gt;Single-line comments are triggered with &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt;, and multi-line ones are enclosed
between &lt;code class=&quot;highlighter-rouge&quot;&gt;/*&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*/&lt;/code&gt; just like in other C-like languages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;variables-in-openscad&quot;&gt;Variables in OpenSCAD&lt;/h3&gt;

&lt;p&gt;Variables in OpenSCAD are set during compile-time; Their behavior is different
from what you would expect. To illustrate this, let’s take a simple example:&lt;/p&gt;

&lt;p&gt;Suppose you have this Python script (Or the equivalent in any other well-known
language which implements some sort of mutable data approaches):&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# This is a comment&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;do_something_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Hey! x is not initialized!!&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# x variable will have a value of one&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;do_something_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Will do something with x = 1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Now x will have the value of 5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;do_something_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Will do something with x = 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In OpenSCAD, things are quite different:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// This is a comment
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_something_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// OK, this will do something with x = 5
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// x will have the value of 3 for a moment
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// y will have the value of 6
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* The final value of x, which is used in all other instructions */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See? Instead of treating the script line by line; OpenSCAD collects all variable
values first (If a variable is defined twice, the last value wins), then processes
the remaining instructions.&lt;/p&gt;

&lt;p&gt;Variable assignment is very simple &lt;code class=&quot;highlighter-rouge&quot;&gt;varName = varValue;&lt;/code&gt;, and you can use
arithmetic expressions in &lt;code class=&quot;highlighter-rouge&quot;&gt;varValue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As a general rule:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Never change a variable’s value with another instruction in your script; &lt;br /&gt;
Create new variables instead. Think of these variables as immutable.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can also think of OpenSCAD’s variables as C’s constants; Don’t mess with them
unless you know what you are doing!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;openscad-vectors-lists&quot;&gt;OpenSCAD Vectors (Lists)&lt;/h3&gt;

&lt;p&gt;You can define vectors in the following way:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Vector creation
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Display vector value in the console
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Matrix creation, trivial
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Some Vector operations are supported
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Access to elements:
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* Indexing follows C conventions */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Vectors are represented as simple lists; and some of their operations are 
supported by default (The ‘+’ operator can handle both floats and vectors).&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; command displays the value of the variable in the console (Look for
lines starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;ECHO: &lt;/code&gt; in the few first lines of the log).&lt;/p&gt;

&lt;p&gt;Indexing starts from ‘0’, so &lt;code class=&quot;highlighter-rouge&quot;&gt;vec[0]&lt;/code&gt; represents the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; (Just like in
any other C-based language).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Can you predict what the result of the last instruction in the previous
snippet would be?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Beginners may be tempted to use ranges to define vectors, which is not quite
right!&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ran&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Range starting from 1, ending with 10 (step =1)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ran&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// The range doesn't expand, huh !!
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ran&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Should output the 4th element in ran, Right?
                 Well, it gives &quot;undef&quot; instead !! */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ranges are not vectors, they were created for usage with loops only!&lt;/p&gt;

&lt;p&gt;Although, you can define a vector from a range in the following way:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ran&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Range starting from 1, ending with 4 (step =1)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ran&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* vec is a vector */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will result in the following vector: &lt;code class=&quot;highlighter-rouge&quot;&gt;[2 4 6 8]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;openscad-functions&quot;&gt;OpenSCAD functions&lt;/h3&gt;

&lt;p&gt;Functions in OpenSCAD are meant to take in some values, perform calculations and
return the results. The anatomy of a function looks like this:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The arguments are local and do not conflict with external variables.&lt;/p&gt;

&lt;p&gt;Say I want to test wether or not some input variables &lt;code class=&quot;highlighter-rouge&quot;&gt;x,y&lt;/code&gt; are
satisfying a certain constraint &lt;code class=&quot;highlighter-rouge&quot;&gt;x+y&amp;gt;=0&lt;/code&gt;. This can be achieved using a function:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Define the function
// x, y are local to the function here
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testConst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Now how to call that function?
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// You can't do this:
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testConst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Because you'll get &quot;Unknown module&quot; error (Modules are something else)
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// But you can definitely do this:
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testConst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// and
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testConst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The expression &lt;code class=&quot;highlighter-rouge&quot;&gt;(x+y&amp;gt;=0) ? 1 : 0&lt;/code&gt; is equivalent to:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Give&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// if x+y is strict. less than 0
&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Give&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course, you can also define argument-less functions:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Define a function named noArgsFunc that returns two random
numbers from the range (0,10).  */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noArgsFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call it
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noArgsFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What if I want to call the function I’m defining inside itself? This is also
supported (called recursive functions). You only need to ensure the recursion
is terminated somehow:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// There is no factorial function in standard library, so define one
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the definition of &lt;code class=&quot;highlighter-rouge&quot;&gt;fact&lt;/code&gt; is basically a conditional statement where
the same function is called again if the condition is &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Test if &lt;em&gt;n&lt;/em&gt; is equal to 1 or 0; If it’s the case, return the value of 1.&lt;/li&gt;
  &lt;li&gt;If not, multiply &lt;em&gt;n&lt;/em&gt; by the factorial of &lt;em&gt;n-1&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;This process is recursively performed until &lt;code class=&quot;highlighter-rouge&quot;&gt;fact(1)&lt;/code&gt; is reached; The recursion
is then terminated by the conditional statement.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;the-include-directive&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; “directive”&lt;/h3&gt;

&lt;p&gt;OpenSCAD uses two commands to include external OpenSCAD code into
the current model:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;include &amp;lt;file.scad&amp;gt;&lt;/code&gt; will act as if you copy-pasted the content of &lt;code class=&quot;highlighter-rouge&quot;&gt;file.scad&lt;/code&gt; into your
current file. It will evaluate all instructions in the imported library (including variable
initialization … etc).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;use &amp;lt;file.scad&amp;gt;&lt;/code&gt; will only include meta-code (function and module definitions) from 
&lt;code class=&quot;highlighter-rouge&quot;&gt;file.scad&lt;/code&gt;, but
doesn’t execute any other commands (No variable initialization, no shape creation …
etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;basic-openscad-commands&quot;&gt;Basic OpenSCAD commands&lt;/h2&gt;

&lt;p&gt;Now that you’ve mastered the basics of OpenSCAD’s usual-programming-language features,
let’s get to the real deal:&lt;/p&gt;

&lt;h3 id=&quot;2d-and-3d-shapes&quot;&gt;2D and 3D shapes&lt;/h3&gt;

&lt;p&gt;Try this:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
    r represents the radius of the circle.
    10 is the radius value, in mm by default.
    The circle is in X-Y plane by default.
    And it's center is at the origin.
    By default, The circle is &quot;coarse&quot; (low resolution).
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// You can specify a diameter instead
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// And you can increase the resolution
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
   $fn is the number of segments to draw a full circle
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The same applies to 3D shapes:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sphere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// if no &quot;r=&quot; or &quot;d=&quot;, then it's a radius
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
  [10,30,10] specifies [width,depth,height] (along [x,y,z])
  center= true | false specifies whether the cube should be
                       centered at the origin.
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are few other pre-defined shapes which you can find here: 
&lt;a href=&quot;http://www.openscad.org/cheatsheet/&quot;&gt;OpenSCAD CheatSheet&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;transformations-and-modules&quot;&gt;Transformations and Modules&lt;/h3&gt;

&lt;p&gt;Now that you’ve created some shapes, you’ll want to do some operations on them;
That’s exactly what modules are meant to do.&lt;/p&gt;

&lt;p&gt;They can be used to define shapes, or even operators, which are then added to
the language (You can also import them from an external file).&lt;/p&gt;

&lt;p&gt;An example of pre-defined module is the &lt;code class=&quot;highlighter-rouge&quot;&gt;translate&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// This is not the definition of translate
// This demonstrates its usage.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sphere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;cm&quot;&gt;/* Which translates the sphere in the z-direction by 20 mm */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command is called an &lt;code class=&quot;highlighter-rouge&quot;&gt;object module&lt;/code&gt;, ie. operates on primitives to define new
objects.&lt;/p&gt;

&lt;p&gt;You can define an object module in the following way:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;for example, let’s say I want to create an ellipsoid; Basically, I would write
something like this:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sphere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* scale is a transformation module */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a more modular way, I would define a special module which takes some vectors as
parameters and creates the ellipsoid for me:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
    Define a module named ellipsoid
    Parameters:
     - dims: vector for dimensions, default value: [10,20,10]
     - center: coords of the center of the new object,
               defaults to the origin.
    What's between {...} is the actions to take.

    Read it like this:
    1. Create a sphere of radius = 1mm
    2. scale it in all directions according to the vector 'dims'
    3. translate the resulting object by the vector 'center'
*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ellipsoid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dims&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dims&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sphere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Now call the module to create different objects:
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Ellipsoid with default values
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ellipsoid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Change only the center
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ellipsoid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Change all default parameters
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ellipsoid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dims&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that you can omit the &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; at the end of a module’s definition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you think about it carefully, this approach is useful only if you want to take a
specific “object” and do some operations on it in the sole purpose of creating
a new object (That’s why it’s called &lt;strong&gt;object module&lt;/strong&gt;). What if you need to 
operate in the same way on a set of different objects?&lt;/p&gt;

&lt;p&gt;To illustrate, assume we have a sphere, a cube and a square, and we want to
create a bunch of duplicates of each object in a specified direction. Indeed, we
would need an “operator module”, a module that doesn’t care about objects but
only cares about what operations to perform on them. For this, we’ll need a new 
concept (&lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt; of a module):&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
   Create a module named duplicate.
   Parameters:
     - num: The number of duplicates (original object included).
     - space: The space between two consecutive objects.
     - dir: normalized direction vector, defaults to the x-direction.
   This will take the first object in the children, and translate it by the 
   required amount each time (in the for loop)
*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;duplicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Starting the range with 0 will preserve the original object
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Uses only the first element of &quot;children&quot;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Five duplicates of a sphere in the x (default) direction
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duplicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sphere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Five duplicates of a cube in z-direction
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duplicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Five duplicates of a square in a custom 
// (but vector-normalized) direction
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duplicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                               &lt;span class=&quot;n&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;OpenSCAD doesn’t support STL export of mixed 2D and 3D shapes;&lt;br /&gt;
So, We have to create square-like cubes!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;for (i = range) action;&lt;/code&gt; loop will perform the action while varying &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;
in the &lt;code class=&quot;highlighter-rouge&quot;&gt;range&lt;/code&gt;. The action here is to take the first shape in the &lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt;
list and translate it by the vector (&lt;code class=&quot;highlighter-rouge&quot;&gt;dir*space*i&lt;/code&gt;).&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;!-- Disp add --&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-3635214305281166&quot; data-ad-slot=&quot;6599434036&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The previous script results in something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/OpenSCAD/openscad-duplicate.jpg&quot; alt=&quot;OpenSCAD duplicates Module&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(The Blue sphere is at the origin; Hopefully you can tell where everything is!!).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hey! you are no longer a “beginner”!! You can create modules and use
functions!!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;modifiers&quot;&gt;Modifiers&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;This not quite necessary to learn now, but it will become handy in the following
tutorial.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can use modifiers to control the way objects are displayed 
in OpenSCAD’s preview window:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Transparent cube 
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Highlight a sphere
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#sphere(10);
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Another way:
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* 0.8 controls transparency (alpha) */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it for today, I bet you already learned more tricks just by looking at
&lt;a href=&quot;http://www.openscad.org/cheatsheet/&quot;&gt;OpenSCAD’s Cheatsheet&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 07 Jun 2018 13:34:02 +0100</pubDate>
        <link>http://localhost:4000/openscad-basics/</link>
        <guid isPermaLink="true">http://localhost:4000/openscad-basics/</guid>
        
        <category>openfoam</category>
        
        <category>openscad</category>
        
        <category>meshing</category>
        
        
        <category>openscad basics</category>
        
      </item>
    
      <item>
        <title>Hilarious Videos of CFD Simulations</title>
        <description>&lt;p&gt;I can’t really think of a polished introduction to such a post, so,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;This post lists some eye-catching simulations.&lt;/li&gt;
  &lt;li&gt;The goal is to motivate and inspire new OpenFOAM users.&lt;/li&gt;
  &lt;li&gt;This is not an ordered list, OK!&lt;/li&gt;
  &lt;li&gt;That’s it, you can start watching the videos
&lt;!--more--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;I will try to keep this list of great CFD simulations updated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#a-simplified-openfoam-2d-model-for-a-bullet&quot; id=&quot;markdown-toc-a-simplified-openfoam-2d-model-for-a-bullet&quot;&gt;A simplified OpenFOAM 2D model for a bullet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#shock-waves-hitting-helium-bubbles&quot; id=&quot;markdown-toc-shock-waves-hitting-helium-bubbles&quot;&gt;Shock-waves hitting helium bubbles&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cfd-simulation-of-a-planing-hull-in-openfoam&quot; id=&quot;markdown-toc-cfd-simulation-of-a-planing-hull-in-openfoam&quot;&gt;CFD simulation of a planing hull in OpenFOAM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-cobra-aircraft-cfd-simulations&quot; id=&quot;markdown-toc-the-cobra-aircraft-cfd-simulations&quot;&gt;The Cobra Aircraft CFD Simulations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#is-it-appropriate-to-compare-ansysfluent-and-openfoam-this-way&quot; id=&quot;markdown-toc-is-it-appropriate-to-compare-ansysfluent-and-openfoam-this-way&quot;&gt;Is it appropriate to compare ANSYS/Fluent and OpenFOAM this way?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bathroom-toilet-cfd-simulation-using-openfoam&quot; id=&quot;markdown-toc-bathroom-toilet-cfd-simulation-using-openfoam&quot;&gt;Bathroom Toilet CFD Simulation using OpenFOAM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cfdsupports-transient-sports-car-simulation&quot; id=&quot;markdown-toc-cfdsupports-transient-sports-car-simulation&quot;&gt;CFDSupport’s Transient sports car simulation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#update-28072018-nasas-aircraft-landing-gear-air-flow-simulation&quot; id=&quot;markdown-toc-update-28072018-nasas-aircraft-landing-gear-air-flow-simulation&quot;&gt;[Update: 28/07/2018] NASA’s Aircraft landing gear air flow simulation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#update-28072018-a-drone-cfd-simulation-with-ansys-cfx&quot; id=&quot;markdown-toc-update-28072018-a-drone-cfd-simulation-with-ansys-cfx&quot;&gt;[Update: 28/07/2018] A Drone CFD Simulation with ANSYS CFX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#update-28072018-internal-combustion-engine-simulation-by-converge-cfd&quot; id=&quot;markdown-toc-update-28072018-internal-combustion-engine-simulation-by-converge-cfd&quot;&gt;[Update: 28/07/2018] Internal Combustion Engine Simulation by CONVERGE CFD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-simplified-openfoam-2d-model-for-a-bullet&quot;&gt;A simplified OpenFOAM 2D model for a bullet&lt;/h2&gt;

&lt;p&gt;This short video shows the results of simulating a &lt;strong&gt;9mm bullet&lt;/strong&gt; in a 2D domain
at a mach number of &lt;code class=&quot;highlighter-rouge&quot;&gt;1.6&lt;/code&gt; using OpenFOAM (More precisely, those are Mach, pressure, velocity and
shock wave fields).&lt;/p&gt;

&lt;p&gt;The simulation was conducted by &lt;strong&gt;GDTech Belgium&lt;/strong&gt; and was published around the
end of 2014.&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;!-- Disp add --&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-3635214305281166&quot; data-ad-slot=&quot;6599434036&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot; style=&quot;text-align:center;&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/D6iuVr9V6os&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;shock-waves-hitting-helium-bubbles&quot;&gt;Shock-waves hitting helium bubbles&lt;/h2&gt;

&lt;p&gt;Continuing in the same niche, but with better visualization, &lt;strong&gt;Physics Central&lt;/strong&gt;
published a YouTube video: “Mach 3 Bubble Shockwaves” featuring the results of
intense simulations of a Mach 3 shock-wave hitting a helium bubble.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot; style=&quot;text-align:center;&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/gnhbhpwTx1c&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can find appropriate credits in the video’s YouTube description.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;cfd-simulation-of-a-planing-hull-in-openfoam&quot;&gt;CFD simulation of a planing hull in OpenFOAM&lt;/h2&gt;

&lt;p&gt;This half-a-minute long animation visualizes the results obtained from an OpenFOAM simulation
 of a planing hull by &lt;strong&gt;TotalSimltd&lt;/strong&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot; style=&quot;text-align:center;&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/OH0l5CkY_aY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;the-cobra-aircraft-cfd-simulations&quot;&gt;The Cobra Aircraft CFD Simulations&lt;/h2&gt;

&lt;p&gt;Regardless of whether you want to watch Aircraft simulations or not, the next
video gives a great insight on how proper visualization is done!!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot; style=&quot;text-align:center;&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/cI7jxXdiGMI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;is-it-appropriate-to-compare-ansysfluent-and-openfoam-this-way&quot;&gt;Is it appropriate to compare ANSYS/Fluent and OpenFOAM this way?&lt;/h2&gt;

&lt;p&gt;Eager to watch a comparison between OpenFOAM’s and Fluent’s performances?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot; style=&quot;text-align:center;&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/OBae-GV9KEA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/figure&gt;

&lt;p&gt;Well, OpenFOAM always has the upper hand when it comes to being &lt;code class=&quot;highlighter-rouge&quot;&gt;open source&lt;/code&gt;!&lt;/p&gt;

&lt;h2 id=&quot;bathroom-toilet-cfd-simulation-using-openfoam&quot;&gt;Bathroom Toilet CFD Simulation using OpenFOAM&lt;/h2&gt;

&lt;p&gt;I wasn’t sure if CFD engineers could pull something so serious -until I watched this video-, but &lt;strong&gt;Clemens Lischka&lt;/strong&gt; 
did it and published the results 2 years ago!&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block; text-align:center;&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-3635214305281166&quot; data-ad-slot=&quot;4856474507&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot; style=&quot;text-align:center;&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/-d_zYeqebco&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;cfdsupports-transient-sports-car-simulation&quot;&gt;CFDSupport’s Transient sports car simulation&lt;/h2&gt;

&lt;p&gt;This kind of simulations could take forever to finish if the engineer gets
really serious about it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot; style=&quot;text-align:center;&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/cSsbcuZvO1I&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hey! If you know about any other simulations, you are encouraged to share a
(or few) link in the comments section, I would be happy to hear about new
great CFD simulation (OpenFOAM is preferred, but you can link to any other
CFD software simulation …).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;update-28072018-nasas-aircraft-landing-gear-air-flow-simulation&quot;&gt;[Update: 28/07/2018] NASA’s Aircraft landing gear air flow simulation&lt;/h2&gt;

&lt;p&gt;Just watch this one OK:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot; style=&quot;text-align:center;&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/-D5N_OnZ_Tg&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;update-28072018-a-drone-cfd-simulation-with-ansys-cfx&quot;&gt;[Update: 28/07/2018] A Drone CFD Simulation with ANSYS CFX&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot; style=&quot;text-align:center;&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/DbcYUcSxkV8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;update-28072018-internal-combustion-engine-simulation-by-converge-cfd&quot;&gt;[Update: 28/07/2018] Internal Combustion Engine Simulation by CONVERGE CFD&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot; style=&quot;text-align:center;&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/V6kqMDt1kac&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/figure&gt;

</description>
        <pubDate>Sat, 28 Apr 2018 13:07:47 +0100</pubDate>
        <link>http://localhost:4000/hilarious-cfd-simulations/</link>
        <guid isPermaLink="true">http://localhost:4000/hilarious-cfd-simulations/</guid>
        
        <category>openfoam</category>
        
        <category>videos</category>
        
        
      </item>
    
      <item>
        <title>5 Faux-Pas That Are Actually Okay to Make in OpenFOAM Simulations</title>
        <description>&lt;p&gt;OpenFOAM beginners often find it really hard to get a case to work; which is a
‘consequence’ of several factors (I’m not talking about syntax typos here!):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bad &lt;code class=&quot;highlighter-rouge&quot;&gt;mesh&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Bad &lt;code class=&quot;highlighter-rouge&quot;&gt;numerical schemes&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Bad &lt;code class=&quot;highlighter-rouge&quot;&gt;solver&lt;/code&gt; parameters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But it’s not about the things you do to break your case -You can learn about
those ones by yourself- : It’s all about the &lt;strong&gt;bad things&lt;/strong&gt; you do to your case
that have no to little effect on the results!!
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-omitting-important-stuff-in-the-dictionaries&quot; id=&quot;markdown-toc-1-omitting-important-stuff-in-the-dictionaries&quot;&gt;#1: Omitting important stuff in the dictionaries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-the-numerical-schemes&quot; id=&quot;markdown-toc-2-the-numerical-schemes&quot;&gt;#2: The numerical schemes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-mesh-quality&quot; id=&quot;markdown-toc-3-mesh-quality&quot;&gt;#3: Mesh Quality&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-openfoam-multiple-versions&quot; id=&quot;markdown-toc-4-openfoam-multiple-versions&quot;&gt;#4: OpenFOAM multiple versions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-the-writeformat&quot; id=&quot;markdown-toc-5-the-writeformat&quot;&gt;#5: The writeFormat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-omitting-important-stuff-in-the-dictionaries&quot;&gt;#1: Omitting important stuff in the dictionaries&lt;/h2&gt;

&lt;p&gt;I’ve talked about this particular issue in an earlier post: 
&lt;a href=&quot;/openfoam-evolution/&quot;&gt;OpenFOAM Evolution&lt;/a&gt; where I
mentioned that, starting from OpenFOAM 3.0, users can use any of the following
&lt;code class=&quot;highlighter-rouge&quot;&gt;keyword-value&lt;/code&gt; variations to express &lt;code class=&quot;highlighter-rouge&quot;&gt;nu&lt;/code&gt; in the standard units:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;nu&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;nu&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nu&lt;/span&gt;              &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nu&lt;/span&gt;              &lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that the last one is particularly dangerous: You absolutely shouldn’t put
something that mysterious in your case files, especially if the case is run
with a custom solver!&lt;/p&gt;

&lt;h2 id=&quot;2-the-numerical-schemes&quot;&gt;#2: The numerical schemes&lt;/h2&gt;

&lt;p&gt;Most of OpenFOAM beginners prefer to stick with the default numerical
schemes they find in the tutorial cases; which is considered as “good practice”
until you get excited and try to simulate something different from what the
tutorial simulates.&lt;/p&gt;

&lt;p&gt;Even though OpenFOAM developers do a great job choosing perfect numerical
schemes for tutorial cases, your case may require a slightly different scheme to
be used.&lt;/p&gt;

&lt;p&gt;That’s why I like to fall back to &lt;code class=&quot;highlighter-rouge&quot;&gt;upwind&lt;/code&gt; schemes whenever I’m confused! This
is probably a bad idea!! But &lt;code class=&quot;highlighter-rouge&quot;&gt;upwind&lt;/code&gt; schemes work! They really do!! Almost
always: They may not give the most accurate results in specific circumstances though.&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block; text-align:center;&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-3635214305281166&quot; data-ad-slot=&quot;3466181841&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;As an unspoken rule, starting simulations with:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;leastSquares&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;gradSchemes&lt;/code&gt; Unless you notice oscillations in the
calculations of gradients (happens if the mesh is of bad quality), then fall
back to &lt;code class=&quot;highlighter-rouge&quot;&gt;Gauss linear&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;upwind&lt;/code&gt; or even &lt;code class=&quot;highlighter-rouge&quot;&gt;linearUpwind&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;divSchemes&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;linear limited some_value&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;laplacianSchemes&lt;/code&gt; (Where &lt;code class=&quot;highlighter-rouge&quot;&gt;some_value&lt;/code&gt; is 1 if
the mesh is orthogonal, and decreases towards 0 as the mesh gains
non-orthogonality).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-mesh-quality&quot;&gt;#3: Mesh Quality&lt;/h2&gt;

&lt;p&gt;You should never skip checking mesh quality with &lt;code class=&quot;highlighter-rouge&quot;&gt;checkMesh&lt;/code&gt;; It’s crucial to
know the properties of your mesh:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the non-orthogonality is greater than 70, you should consider using non-orthogonal
correctors.&lt;/li&gt;
  &lt;li&gt;If skewness is greater than 15, consider refining the mesh.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The general rule says: If a hex-mesh’s non-orthogonality is &amp;gt; 80, this mesh is not a
valid one.&lt;/p&gt;

&lt;p&gt;However, it’s possible to tolerate high non-orthogonality values under some
circumstances: For example, if non-orthogonal cells are not contributing to the
flow.&lt;/p&gt;

&lt;h2 id=&quot;4-openfoam-multiple-versions&quot;&gt;#4: OpenFOAM multiple versions&lt;/h2&gt;

&lt;p&gt;Working with multiple versions of OpenFOAM is easy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You create aliases for installed versions of the software (in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt;
 file):&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;   &lt;span class=&quot;c&quot;&gt;# OpenFOAM versions&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fe32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'source /opt/foam-extend-3.2/etc/bashrc'&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'source /opt/openfoam4/etc/bashrc'&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'source /opt/openfoam5/etc/bashrc'&lt;/span&gt;
   &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;When you open the terminal you only need to issue the command &lt;code class=&quot;highlighter-rouge&quot;&gt;of5&lt;/code&gt; to load
 OpenFOAM 5.&lt;/li&gt;
  &lt;li&gt;When you are done with it, run &lt;code class=&quot;highlighter-rouge&quot;&gt;wmUnset&lt;/code&gt; to unload the shell environment and
 use another version of the software in the current terminal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that this is the safest way to do this, but it’s also OK to omit unloading
the environment if you are just simulating cases.&lt;/p&gt;

&lt;h2 id=&quot;5-the-writeformat&quot;&gt;#5: The writeFormat&lt;/h2&gt;

&lt;p&gt;Writing OpenFOAM output in ASCII format is not always a good option; if there is
too much information to write you may run out of space or crush your system.&lt;/p&gt;

&lt;p&gt;In general, it’s better to write the output as binary files, and compress them
with &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip&lt;/code&gt;. the only drawback of this approach is that the risk of damaging
these files increases and there is no way to repair them if this happens!
&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- Disp add --&gt;
&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-3635214305281166&quot; data-ad-slot=&quot;6599434036&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Except that you could re-run the simulation for the damaged &lt;code class=&quot;highlighter-rouge&quot;&gt;timeSteps&lt;/code&gt;, of
course.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I would be happy if you share your experience in this subject with us in the
comments sections.&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Apr 2018 10:08:13 +0100</pubDate>
        <link>http://localhost:4000/faux-pas-okay-to-make-in-openfoam-simulations/</link>
        <guid isPermaLink="true">http://localhost:4000/faux-pas-okay-to-make-in-openfoam-simulations/</guid>
        
        <category>openfoam</category>
        
        
      </item>
    
      <item>
        <title>The 3 Greatest Moments in Computational Fluid Dynamics History</title>
        <description>&lt;p&gt;The CFD knowledge you know now was accumulated over the years through Trial &amp;amp;
Error procedures, which lead to a continuous refinement of the concepts and
techniques used in this industry.
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#the-first-moment-calculations-done-by-humans-but-they-did-it&quot; id=&quot;markdown-toc-the-first-moment-calculations-done-by-humans-but-they-did-it&quot;&gt;The First Moment: Calculations done by humans, but they did it!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-second-moment-the-first-functional-model&quot; id=&quot;markdown-toc-the-second-moment-the-first-functional-model&quot;&gt;The Second Moment: The First Functional Model!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-third-moment-the-finite-volume-method&quot; id=&quot;markdown-toc-the-third-moment-the-finite-volume-method&quot;&gt;The Third Moment: The Finite Volume Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Predicting simple shear flows, free and confined jet flows wasn’t always a
simple task: This article showcases the most important “moments” in CFD history;
from my personal point of view of course!&lt;/p&gt;

&lt;h2 id=&quot;the-first-moment-calculations-done-by-humans-but-they-did-it&quot;&gt;The First Moment: Calculations done by humans, but they did it!&lt;/h2&gt;

&lt;p&gt;CFD was around for more than a century now: as early as 1910, &lt;strong&gt;Lewis Fry
Richardson&lt;/strong&gt;, the father of “Weather forecasting”, presented a paper, titled as
“&lt;a href=&quot;http://rsta.royalsocietypublishing.org/content/roypta/210/459-470/307.full.pdf&quot;&gt;The approximate arithmetical solution by finite differences of physical problems
 involving differential
equations&lt;/a&gt;”
, to Royal Society.&lt;/p&gt;

&lt;p&gt;At that time, there were no adequate means to carry out heavy calculations, so
humans, with hand-calculators, were the most effective solution.&lt;/p&gt;

&lt;p&gt;As you might know, CFD is heavily based on “solving” Navier-Stocks equations,
which were reduced to 1-D and 2-D equations describing physics problems on
“simple” domain geometries: Simply put, lack of computational power was
responsible for people suffering with hand calculations!!&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block; text-align:center;&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-3635214305281166&quot; data-ad-slot=&quot;3466181841&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-second-moment-the-first-functional-model&quot;&gt;The Second Moment: The First Functional Model!&lt;/h2&gt;

&lt;p&gt;Engineers had to wait for a team at the Los Alamos National Lab (1957) to develop the
first (really) functional CFD model (performed with computers). The team
dedicated the next 10 years to develop even better models: You probably know 
what the &lt;script type=&quot;math/tex&quot;&gt;k-\epsilon&lt;/script&gt; turbulence model is, right?&lt;/p&gt;

&lt;p&gt;You can find information about this big step in Fluid Flow Simulation here:
&lt;a href=&quot;http://collectivescience.com/documents/CFD_6_96.pdf&quot;&gt;The Legacy and Future of CFD At Los Alamos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Few years later, &lt;strong&gt;Douglas Aircraft&lt;/strong&gt; was able to develop a basic 3D CFD analysis in
order to simulate fluid flow around airfoils.&lt;/p&gt;

&lt;p&gt;But still, engineers were facing (trivial) problems back then:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Difficulties with handling irregular boundary conditions with simple
orthogonal grids.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Numerical Diffusion&lt;/code&gt; was really a big problem.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Efficient Time-dependent calculations (Just Dreams, nothing more!).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-third-moment-the-finite-volume-method&quot;&gt;The Third Moment: The Finite Volume Method&lt;/h2&gt;

&lt;p&gt;The Finite Volume method made its first appearance as a method to solve
Navier-Stocks Equations in 3 dimensional space around 1980 at the Imperial
College.&lt;/p&gt;

&lt;p&gt;This was a huge development in CFD history and important research papers kept
flowing in (considering the continuously improving computing power, this was
bound to happen!!).&lt;/p&gt;

&lt;p&gt;In 2004, OpenFOAM was released as an “Open Source” CFD library, which boosted
researches in this area and made it available to all engineers to share code and
experience.&lt;/p&gt;

&lt;p&gt;From this point on (&lt;code class=&quot;highlighter-rouge&quot;&gt;This point&lt;/code&gt; included …), I think advancement in CFD-related 
subjects was (and still) based on the development of mathematics and computer programming.&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block; text-align:center;&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-3635214305281166&quot; data-ad-slot=&quot;4856474507&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;I’ll be happy if you could share your thoughts on this subject with us in the
comments.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Mar 2018 09:33:34 +0100</pubDate>
        <link>http://localhost:4000/greatest-moments-computational-fluid-dynamics/</link>
        <guid isPermaLink="true">http://localhost:4000/greatest-moments-computational-fluid-dynamics/</guid>
        
        <category>openfoam</category>
        
        
      </item>
    
  </channel>
</rss>
