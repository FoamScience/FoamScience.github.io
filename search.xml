<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Object Registration in OpenFOAM</title>
      <link href="/coding/object-registration-in-openfoam/"/>
      <url>/coding/object-registration-in-openfoam/</url>
      
        <content type="html"><![CDATA[<p>Being aware of all the important variables during the simulation is a nice feature to have in any CFD software. I’ve even seen some software developers “brag” about how many “variables” their simulators efficiently manage at run time.  Today, we’ll discover how OpenFOAM solvers <strong>keep track</strong> of model data used across libraries.</p><a id="more"></a><h2 id="Know-the-difference-between-Object-Registration-and-Run-Time-Selection-Table"><a href="#Know-the-difference-between-Object-Registration-and-Run-Time-Selection-Table" class="headerlink" title="Know the difference between Object Registration and Run-Time Selection Table"></a>Know the difference between Object Registration and Run-Time Selection Table</h2><blockquote><p>By “Object registration” I don’t mean “Model registration” (The mechanism allowing for reporting possible models if the user input is unexpected, eg. if using a non-existent Boundary Condition Type). I refer instead to the mechanism allowing the program to retrieve references to all sorts of “data” objects (volScalarFields … etc) that are under the solver’s direct or indirect control. Read this section to make sense of the difference.</p></blockquote><p>Traditional C++ programming will probably employ “Factory-like” design to create new objects: A virtual base class will have a <code>static create()</code> (or a <code>static New()</code> in the case of OpenFOAM classes) to create a pointer (of some kind) to the newly created model.</p><p>This traditional technique is used when the programmer wants to give users the ability to “<strong>select</strong>“ a model from a set of pre-defined ones (Child classes of the base class). </p><p>It’s common in OpenFOAM to give the virtual base class (usually belonging to the <code>Foam</code> namespace) a static <code>New()</code> method returning an <code>autoPtr</code> to the newly created instance of the model class (<code>autoPtr</code> is used so that the created object couldn’t be referred to by more than <em>one</em> pointer). Of course, “templates” may complicate things a bit more, but nothing we can’t live with.</p><p>This <code>New()</code> method would typically read the model’s name from a dictionary, check if such model is “registered” to the RunTime selection Table, then construct an object of the appropriate type. This process is referred to as “selection of a model”.</p><blockquote><p>Note that if another library wants to provide a child for such base class, it has to statically link the base class’s library (at compile time). That is to say, if a library <code>transportModels.so</code> has a <code>phase</code> base class which already has some child classes (say <code>incompressiblePhase</code> and <code>gasPhase</code>) and you want to add a phase object for your specific solver, you can build a new library <code>myPhaseModels.so</code> which must statically link <code>transportModels.so</code> so it can be compiled. It’s that simple, you just create your new <code>compositionalPhase</code> class (inheriting from <code>phase</code>) and it will show up in the selection table when you load the library (in <code>controlDict</code> of your case).</p></blockquote><p>Older C++ code would contain overloaded versions of <code>New()</code> (each returning a different type) but OpenFOAM uses templates and a collection of Macros to construct a <code>RunTimeSelectionTable</code> which <code>New</code> uses to check for existence and select the model.</p><p>But that’s not the goal of this post. Let’s instead dive into the registration of model data. For example, consider the case of a library trying to access a field that is created and managed by another library! To illustrate, say we have some library <code>transportModels.so</code> whose basic <code>transportModel</code> class has a member <code>volScalarField rho</code>. Suppose we’re working on another library and we need a (maybe <code>const</code>) reference to this field without actually statically linking <code>transportModels.so</code> (Say, this would result in a <strong>cyclic dependency</strong> between the two libraries). How would one get a reference to such field?</p><p>That’s exactly the situation we need object registration for.</p><h2 id="OpenFOAM-objectRegistry-and-regIOobject"><a href="#OpenFOAM-objectRegistry-and-regIOobject" class="headerlink" title="OpenFOAM objectRegistry and regIOobject"></a>OpenFOAM objectRegistry and regIOobject</h2><p>OpenFOAM solvers keep a “hierarchical database”, logging objects at different levels:</p><ul><li>The master registry is always the Time object (<code>runTime</code>).</li><li>The second-level in the database logs mesh regions and the global <code>controlDict</code>.</li><li>The lower levels  register “sub-objects” (eg. Each mesh region would have its own <code>fvSchemes</code>, <code>fvSolution</code>, mesh data, the fields associated to the mesh region - created in <code>createFields.H</code> … etc) </li></ul><p>Note that each object in the database “can be” a database of registered objects allowing for the hierarchical structure; and by “mesh regions” I mean different mesh objects (for example, a mesh for fluids and another for solid regions in fluid-solid interaction simulations).</p><blockquote><p>If two “Time instances” are used in a solver, we would have two independent databases; and it makes complete sense!</p></blockquote><p>For illustration, standard solvers databases would look like this:</p><pre><code class="bash">* runTime         # objectRegistry |--&gt; controlDict # regIOobject (can&#39;t have sub-entries attached to it) |--&gt; mesh1       # objectRegistry (a database)    |--&gt; points, owner, neighbour, cellZones ...    |--&gt; fvSchemes, fvSolution    |--&gt; U, p |--&gt; mesh2    |--&gt; points, owner, neighbour, cellZones ...    |--&gt; fvSchemes, fvSolution    |--&gt; U, p</code></pre><blockquote><p>This Hierarchy is kept in memory, but the same class handles how it’s written to disk.</p></blockquote><p>The database class is called <code>objectRegistry</code> (so it’s a database and an entry in a database at the same time), and in order for objects to auto-register to a database, they must inherit from <code>regIOobject</code> class.</p><p>The inheritance from <code>regIOobject</code> promotes the object into an auto-registered object and it requires to implement the pure virtual member function <code>writeData()</code> (not <code>write()</code>) so that when the database issues the order of writing to disk to all its child entries, the child will be able to write itself properly :</p><pre><code class="cpp">virtual bool writeData(Ostream&amp;) const;</code></pre><p>An example of a simple, non-standard class which inherits from <code>regIOobject</code> is the basic <code>well</code> class in my <a href="https://github.com/FoamScience/OpenRSR/blob/master/libs/wellModels/wells/well/well.H" target="_blank" rel="noopener">Reservoir Simulation toolkit</a>. A well can then be written to disk as a regular dictionary.</p><h2 id="Cross-library-interaction-in-OpenFOAM"><a href="#Cross-library-interaction-in-OpenFOAM" class="headerlink" title="Cross library interaction in OpenFOAM"></a>Cross library interaction in OpenFOAM</h2><p>Now that we all have a good understanding of the hierarchical registration in OpenFOAM, let’s dive into how to use such mechanism for our benefit.</p><p>In practice, when writing OpenFOAM libraries, it’s common to pass a mesh reference to the base model’s constructor (You can do very little without a reference to the mesh, really). Thus, the mesh is the number-one database to log our objects to: Which database to use is decided at the object’s construction time (by calling <code>regIOobject</code>‘s  constructor with the right third parameter). </p><p>In standard solvers, the mesh is created by passing an <code>IOobject</code> to the constructor of the parent class <code>polyMesh</code> which passes it to <code>objectRegistry</code>‘s  constructor:</p><pre><code class="cpp">// fvMesh is an objectRegistryFoam::fvMesh mesh(    Foam::IOobject    (        Foam::fvMesh::defaultRegion,        runTime.timeName(),        runTime,    // That&#39;s the database we branch into        Foam::IOobject::MUST_READ    ));</code></pre><blockquote><p>And you can verify that the <code>Time</code> class is not registered to anything.</p></blockquote><p>Now, say we registered a <code>volScalarField</code> with the name of “fName” to the previous mesh object  (See <code>createFields.H</code> file of any standard solver for examples). How can we refer to it in a Boundary Condition Type we’re adding?</p><p>Well, that’s easy, we just use <code>fvMesh</code>‘s interface:</p><pre><code class="cpp">// Const-ref to the field named fNameconst volScalarField&amp; fN = mesh.lookupObject(&quot;fName&quot;);// Ref to the field named fNamevolScalarField&amp; fN = mesh.lookupObjectRef(&quot;fName&quot;);</code></pre><p>Well, for a more sophisticated way, we may give the user the option of selecting the field’s name:</p><pre><code class="cpp">// Read the name if providedword theName = someDict.lookupOrDefault&lt;word&gt;(&quot;fieldName&quot;,&quot;fName&quot;);// Const-ref to the field named fNameconst volScalarField&amp; fN = mesh.lookupObject(theName);</code></pre><p>This particular trick may complicate things for beginners with all the “<strong>didn’t find a field in the database</strong>“ Fatal Errors, but it’s a decent way to program things in OpenFOAM. Anyway, I hope this article clarified at least what the third argument to <code>IOobject</code>‘s constructor is meant to do <span class="emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">&#x1f604;</span></p><p>If you have any suggestions or comments on this matter, don’t hesitate, fire at me bellow.</p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenFOAM </tag>
            
            <tag> Programming </tag>
            
            <tag> Cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The forAll Macro in OpenFOAM</title>
      <link href="/coding/the-forall-macro-in-openfoam/"/>
      <url>/coding/the-forall-macro-in-openfoam/</url>
      
        <content type="html"><![CDATA[<p>Because of the frequent use of range-like loops in OpenFOAM (In official code base, forks, and any independent work for that matter), the nice developers provided a “shortcut” to loop through all elements of a list; any list. This post tries to take a way the popular misuse of this shortcut: Believe it or not, people abuse the <code>forAll</code> macro in every which way.</p><h2 id="The-forAll-macro-and-its-“friends”"><a href="#The-forAll-macro-and-its-“friends”" class="headerlink" title="The forAll macro and its “friends”"></a>The <code>forAll</code> macro and its “friends”</h2><p>First of all, we all know that <code>forAll</code> is not part of C++, so it is a user-defined macro. Assuming a recent fork/version of OpenFOAM is sourced, the definition of this macro and similar ones can be found by running the following shell commands:</p><pre><code class="bash">cd $FOAM_SRC/$WM_PROJECTgrep -r . -e &quot;define.*forAll&quot;</code></pre><p>The previous command reveals that there are at least four (4, <code>foam-extend</code> has some more)  defined macros to loop through “collections”:</p><ol><li>The good old <code>forAll</code> and its reversed-looping version <code>forAllReverse</code>.</li><li>A <code>forAllIter</code> macro specialized in iterating over a Container using an “iterator” and a const-version of it.</li></ol><p>Yep, browsing source code is extremely useful (These macros are defined in <code>UList.h</code>).</p><p>People need to understand that <code>forAll(list, i)</code> is “just” a shortcut to <code>for (int i=0; i&lt;(list).size(); i++)</code>.<br>Although <code>i</code> is actually a <code>Foam::label</code> in standard OF versions. Strictly speaking; the macro just “works” on any container that has a <code>size()</code> member method (Think of it as a vector of a known size - at construction time). Such containers will probably (publicly) inherit from the <code>UList</code>  (The most lightweight-efficient base class I know of).</p><p>Let’s examine a very simple example of constructing a <code>scalarList</code> (a <code>List&lt;scalar&gt;</code>, publicly inheriting from <code>UList&lt;scalar&gt;</code>).</p><pre><code class="cpp">#include &quot;fvCFD.H&quot;// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //int main(int argc, char *argv[]){       // Create a list of some scalars    scalarList someScalars(10, 0);    // Perfectly fine use of forAll    forAll(someScalars, sc)    {        someScalars[sc] = doSomeCalculations(sc);    };    Info&lt;&lt; &quot;End\n&quot; &lt;&lt; endl;    return 0;}</code></pre><p>But this may be misleading; what if someone uses the macro to loop over a “different” type of containers, say a <code>dictionary</code>? Is <code>forAll</code> suitable for such tasks?</p><p>The answer is in the previous example actually: Common use of <code>forAll</code> requires the list object to </p><ul><li>Have a <code>size()</code> method and</li><li>Be <em>efficiently</em> indexable with some method/operator (<code>operator[]</code> in this case), otherwise, there is no benefit in looping through some collection if you can’t access its elements!!</li></ul><p>So, if <code>dictionary</code> objects verify these requirements; we’re golden.</p><p>In fact, The <code>DictionaryBase</code> Template class publicly inherits from the (Link) List Type it is templated on. It’s easy to follow the inheritance diagram of the most commonly used class <a href="https://cpp.openfoam.org/v7/classFoam_1_1dictionary.html" target="_blank" rel="noopener">dictionary</a> to see that there is no <code>size()</code> method defined anywhere. Also, how would one refer to an entry as <code>dictionary[i]</code> ??</p><p>It should be obvious now that <code>forAll</code> is not the right macro to use in this case. That’s where the second family of macros kicks in: Instead of using a (possibly more efficient) predefined-size containers, some situations require the use of “more dynamic” ones which only hold “pointers” to their begin/end positions. An iterator is then used to go back and forth between these positions.</p><p>A nice usage of this macro can be found at line 175 of <a href="https://cpp.openfoam.org/v7/solution_8C_source.html" target="_blank" rel="noopener">solution.C</a> file so newer versions of OpenFOAM would understand older specification of <code>fvSolution.solver</code>.</p><p>The <strong>const-iter</strong> version of <code>forAllIter</code> is also used to read entries of a <code>dictionary</code> into a <code>HashTable</code> … you can find an example at line 146 of <a href="https://cpp.openfoam.org/v7/HashPtrTableIO_8C_source.html" target="_blank" rel="noopener">HashPtrTableIO.C</a>.</p><h2 id="A-word-on-UList-in-OpenFOAM"><a href="#A-word-on-UList-in-OpenFOAM" class="headerlink" title="A word on UList in OpenFOAM"></a>A word on <code>UList</code> in OpenFOAM</h2><p>As far as I can tell, this class is just “well written” - “well thought through”. Its purpose is  to provide an efficient base class for “Sub-Lists”. A quick look on <a href="https://cpp.openfoam.org/v7/classFoam_1_1UList.html#details" target="_blank" rel="noopener">the list of classes</a>  that directly inherit from it shows how important <code>UList</code> is.</p><p>By the way, the class also holds a random access iterator; so it can be used with <code>forAllIter</code>:  We use an object (usually called <code>iter</code>) to “point” to a list item each time we iterate. The list item itself is accessed by dereferencing the pointer (<code>*iter</code>).</p><p>I’m not aware of a way to get the “index” of an element in a List; It would be inefficient! So I never bothered to search for one. Another thing I should point out is that <code>std::distance</code> probably won’t work without some serious Type Casting :). It’s (was?) dangerous anyway, and I  don’t know if a similar function is available for OpenFOAM iterators).</p><p>In fact, the use of <code>std::distance</code> takes away one the most important features of iterator-based loops: The ability to loop through a container where either <code>.begin()</code> or <code>.end()</code> is not reachable from the other (possibly by incrementing <code>iter</code>) as it results in “undefined behavior”.</p><blockquote><p>In recent OpenFOAM versions, <code>GeometricField</code> (<code>volScalarField</code>s …) inherits from <code>UList</code>, so, one can typically loop through their elements  with both macros; although  template specializations specialize the sense of “loop through their elements”: Some types  support looping through “internalField”; others make it so the loop hits everything.</p></blockquote><h2 id="A-word-on-dictionary-in-OpenFOAM"><a href="#A-word-on-dictionary-in-OpenFOAM" class="headerlink" title="A word on dictionary in OpenFOAM"></a>A word on <code>dictionary</code> in OpenFOAM</h2><p>This class a good example of a lot of things. “An iterator-based container” as I introduced it in  this post is just the tip of the iceberg. The reason I chose it for this post is that most OpenFOAM <em>users</em> consider a dictionary to be a “list” which is not entirely true. The similarity of, for example, getting some IDs (0, 1, 2, 3 … ) for mesh patches from the <code>boundary</code> files doesn’t mean a dictionary is indexable (I’m talking about “old-fashion” indexing here).</p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenFOAM </tag>
            
            <tag> Programming </tag>
            
            <tag> Cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Customize VIM to work efficiently with OpenFOAM - Part 2</title>
      <link href="/productivity/customize-vim-to-work-efficiently-with-openfoam-part-2/"/>
      <url>/productivity/customize-vim-to-work-efficiently-with-openfoam-part-2/</url>
      
        <content type="html"><![CDATA[<p>We’ve seen in <a href="/vim-openfoam-power-part1">the previous part</a> some ways to improve our interaction with OpenFOAM case directories and files. In this new post, we want to implement something that facilitates running <code>blockMesh</code>, or the case solver, right from inside VIM; without going back to the shell. Of course, our implementation should catch errors in the quick fix list (if there are any),  then go to the concerned file, and put the cursor on the error line.</p><p>For this, we’ll use two main VIM facilities: <em>VIM compilers</em> and <em>QuickFix</em> list.<br>The compilers are used to automatically run a shell command on a file; For example:</p><ul><li>Running a <code>gcc</code> (or <code>make</code> if there is a <em>makeFile</em>) command on a <code>*.cpp</code> file would compile it to an executable, </li><li>Running a <code>pdflatex</code> (or better <code>latexmk</code>) command on a <em>Latex file</em> would compile a PDF version of the document.</li><li>Running a <code>blockMesh</code> command on a <em>blockMeshDict</em> would build the mesh and check for errors in <code>blockMesh</code>‘s output.</li></ul><p>In fact, we can run as many commands as we want on the file using VIM compilers. Think: Generate the mesh, check its validity, set fields and run appropriate solvers (In my opinion, this kind of work-flows beats GUIs to death).</p><p>So, let’s get to work: We need to know how VIM’s default compiler plugins are set, and the best way to learn is by looking at examples. On Unix systems, the default compilers should be in <code>/usr/share/vim/vim74/compiler</code> directory, you can use VIM’s ex-command <code>:compile</code> to find out where  they are on your system.</p><h2 id="Studying-an-example-VIM-compiler"><a href="#Studying-an-example-VIM-compiler" class="headerlink" title="Studying an example VIM compiler"></a>Studying an example VIM compiler</h2><p>First of all, a VIM compiler plugin is nothing more than a short <code>VimL</code> script, configuring two main things: <code>errorformat</code> (scanf-style strings, separated by commas, showing the format of error lines) and <code>makeprg</code> (make program, the shell executable to run).</p><p>As an example, let’s go through the <em>ant-compiler</em> line by line:</p><pre><code class="vim">&quot; Vim Compiler File&quot; Compiler:    ant&quot; Maintainer:    Johannes Zellner &lt;johannes@zellner.org&gt;&quot; Last Change:    Mi, 13 Apr 2005 22:50:07 CEST</code></pre><p>The header, just for information, then we have some checks to perform:</p><pre><code class="vim">if exists(&quot;current_compiler&quot;)    finishendiflet current_compiler = &quot;ant&quot;if exists(&quot;:CompilerSet&quot;) != 2        &quot; older Vim always used :setlocal  command -nargs=* CompilerSet setlocal &lt;args&gt;endif</code></pre><p>The first if structure checks if the compiler is already set (if it’s the case, vim will leave the script). If not, it<br>declares <code>current_compiler</code> as *”ant”* (so, the next time the script executes, it will be finished in the first if structure). The second if statement sets compatibility stuff for older VIM versions.</p><p>All the <code>cpo</code>-related stuff are set to configure Vi-compatibility options, we don’t need to learn about this topic, just don’t touch those lines!</p><p>The line <code>CompilerSet makeprg=ant</code> sets the ant program as the make program (when you execute the ex-command <code>:make</code>, VIM runs <code>ant</code> in a shell, and watches for its output).</p><p><code>CompilerSet errorformat=\ %#[%.%#]\ %#%f:%l:%v:%*\\d:%*\\d:\%t%[%^:]%#:%m</code> shows VIM how to find the error line and what to extract from it (explained in more details in the next section).</p><pre><code class="vim">let s:cpo_save = &amp;cposet cpo&amp;vimCompilerSet makeprg=ant&quot; first  line:&quot;     ant with jikes +E, which assumes  the following&quot;     two property lines in your &#39;build.xml&#39;:&quot;&quot;         &lt;property name = &quot;build.compiler&quot;       value = &quot;jikes&quot;/&gt;&quot;         &lt;property name = &quot;build.compiler.emacs&quot; value = &quot;true&quot;/&gt;&quot;&quot; second line:&quot;     ant with javac&quot;&quot; note that this will work also for tasks like [wtkbuild]&quot;CompilerSet errorformat=\ %#[%.%#]\ %#%f:%l:%v:%*\\d:%*\\d:\ %t%[%^:]%#:%m,    \%A\ %#[%.%#]\ %f:%l:\ %m,%-Z\ %#[%.%#]\ %p^,%C\ %#[%.%#]\ %#%m&quot; ,%-C%.%#let &amp;cpo = s:cpo_saveunlet s:cpo_save</code></pre><h3 id="Using-errorformats-to-catch-OpenFOAM-Fatal-Errors"><a href="#Using-errorformats-to-catch-OpenFOAM-Fatal-Errors" class="headerlink" title="Using errorformats to catch OpenFOAM Fatal Errors"></a>Using errorformats to catch OpenFOAM Fatal Errors</h3><p>These <em>errorformats</em> are similar to regular expressions. Assume a program outputting errors in the following format:</p><p><code>Error: something-is-wrong in /path/to/file at line 25</code></p><p>To match this error line, we use a single scanf-style string, that may contain special items (these are the most important ones):</p><ul><li><code>%f</code> matches a file name (a string), eg. <em>/path/to/file</em></li><li><code>%l</code> matches a line number (digits), eg. <em>25</em></li><li><code>%m</code> matches an error message, eg. <em>something-is-wrong</em></li><li><code>%*{conv}</code> converts stuff from regexp to scanf string, eg. %*[a-z] matches any number of lowercase alphabets.</li></ul><p>Thus, the example line would be matched with <code>\Error: %m in %f at line %l</code></p><h2 id="Building-a-compiler-plugin-for-blockMesh"><a href="#Building-a-compiler-plugin-for-blockMesh" class="headerlink" title="Building a compiler plugin for blockMesh"></a>Building a compiler plugin for blockMesh</h2><p>The goal of this section is to build a blockMesh-compiler for VIM which can be used to browse errors when the tool fails. For this, we need to create our custom-compilers directory <code>$HOME/.vim/compiler</code>.</p><p>Copy the <code>ant.vim</code> compiler to that directory and rename it as <code>blockMesh.vim</code>, on Unix systems, one can say:</p><pre><code class="bash">cp /usr/share/vim/vim74/compiler/ant.vim ~/.vim/compiler/blockMesh.vim</code></pre><p>Modify the header so it suits your preferences, and then start building the custom VIM compiler:</p><ul><li>Hopefully, you are editing the file with VIM.</li><li>Change all occurrences of “<em>ant</em>“ to “<em>blockMesh</em>“ in the file <code>:%s/ant/blockMesh/g</code></li><li>Time to set the “errorformat”: We know that OpenFOAM displays errors in multiple<br>lines (if you write “hxe” instead of “hex” in a <em>blockMeshDict</em>):</li></ul><pre><code class="text">--&gt; FOAM FATAL IO ERROR:CellShape has unknown model on line 45 the word &#39;hxe&#39;file: /home/elwardi/OpenFOAM/elwardi-4.1/run/movingCone/system/blockMeshDict.blocks at line 45.</code></pre><p>Note that this is NOT a general FOAM ERROR; some other IO errors specify a range of lines; others suggest solutions before stating the error-line.</p><p>The most important line is probably the one stating the filename, and the exact line to jump to (these will be stored in <code>%f</code> and <code>%l</code> respectively).However, there are some problems in the filename: notice the ending <code>.blocks</code> appended to it, in fact, things could be messier: <code>.ddtschemes.default</code>.</p><p>How many dots are there in the filename? The real problem is that the <code>path/to/case</code> always contains a dot character (frrom the OpenFOAM version, eg. user-4.1), so matching from the start of the path to the first dot character won’t work!</p><p>Instead, we do notice that versions are expressed in digits, and that case names usually contain no dots (hopefully); so, matching the path up to the first dot character preceding an alphabet character is a good idea:<br><code>CompilerSet errorformat=\file:\ %f\.%[a-z]%*[a-z\ ]\ line\ %l\.</code></p><ul><li><code>%f</code> matches the string “file: “ at the start of line, then starts storing the filename up to the first dot that falls immediately before a lowercase alphabet character (hopefully, that’s the keyword <code>.blocks</code>, or <code>.fvSchemes</code> …). Then we’ll have  some lowercase characters and spaces until we reach the last line before “line” string,  then <code>%l</code> catches the line number (in case there are two, it catches the last one!).</li></ul><p>Now, what to tell the user? Well, It’s good to have a message at the status line saying “<em>CellShape has unknown model …</em>“, so, we should use a complex multi-line <em>errorformat</em>! But, still we’ll have to deal with the problem of how many lines are there between the line that tells our message and the line that spells out the error line. </p><p>This is actually troublesome, so, I’ve decided to approach the situation differently: We leave our filename and error-line alone, and add another error that captures only the message (using a simple multi-line error-format).</p><pre><code class="vim">CompilerSet errorformat=\file:\ %f\.%[a-z]%*[a-z\ ]\ line\ %l\.                        \%E--&gt;\ %*[A-Z:\ ],%Z%m</code></pre><ul><li><code>%E</code> denotes the start of a multi-line error.</li><li>Then we find the line saying <code>Fatal IO Error</code> (starts with –&gt; then there are some uppercase letters,semicolons, and spaces).</li><li><code>%Z</code> denotes the end of multi-line error (which is only one line here!) then we capture everything in the second line as a <code>%m</code> (an error message).</li></ul><p>The compiler plugin is now complete:</p><pre><code class="vim">&quot; Vim Compiler File&quot; Compiler: blockMesh&quot; Fadeli Mohammed Elwardi &lt;foamscience.github.io&gt;if exists(&quot;current_compiler&quot;)finishendiflet current_compiler = &quot;blockMesh&quot;if exists(&quot;:CompilerSet&quot;) != 2&quot; older Vim always used :setlocalcommand -nargs=* CompilerSet setlocal &lt;args&gt;endiflet s:cpo_save = &amp;cposet cpo&amp;vimCompilerSet makeprg=blockMeshCompilerSet errorformat=                 \\file:\ %f\.%[a-z]%*[a-z\ ]\ line\ %l\.,                 \%E-&gt;\ %*[A-Z:\ ],%Z%mlet &amp;cpo = s:cpo_saveunlet s:cpo_save</code></pre><p>And you should be ready to test it with a sample (erroneous) <code>blockMeshDict</code>:</p><ol><li>Make something of importance go wrong in a <code>blockMeshDict</code> (the last ; in a block is not that important).</li><li>While editing <code>blockMeshDict</code>, run <code>:compile blockMesh</code> to set the correct compiler (We’ll improve on this).</li><li>Hopefully your working directory is set by our previous <code>customFoam</code> script, if it is the case, run the ex-command <code>:make</code> and check that beautiful (and useful) error message!</li><li>To automatically jump to the error line, type <code>:cn</code> (short of cnext).</li></ol><blockquote><p>The error format can’t handle “from line 15 to line 18.” lines, because no file path will be output in such lines!</p></blockquote><p>Now that VIM knows how to handle <code>blockMesh</code>, let’s introduce it to the other FOAM applications (we’ll be doing just solvers for illustration). Wait, should we repeat the work done previously tens of times? Absolutely not.</p><p>The goal of this blog post is to achieve this work-flow:</p><ol><li>When I read in a FOAM File, VIM changes its working dir. to case dir. (already implemented in <code>customFoam.vim</code>, see <a href="/vim-openfoam-power-part1">this earlier post</a>)</li><li>VIM looks for the suitable OpenFOAM solver for the current case (mentioned in <code>controlDict</code>).</li><li>VIM sets the right solver as the <code>makeprg</code> automatically.</li><li>When I run <code>:make</code> (Or press a shortcut to it), VIM will filter the output to show me the errors if there are any.</li></ol><p>One more thing, I want my own solvers to be involved, so, I won’t generate a list of standard solvers and compare anything to its content. That’s one lousy approach to take!</p><p>Instead, I’m going to define two functions: The first one, in <code>customFoam.vim</code>, which searches and stores the solver name, and the second sets the option <code>makeprg</code> dynamically in a general compiler plugin called <code>foam.vim</code>.</p><h2 id="Use-FOAMGetApplication-to-get-solver-name"><a href="#Use-FOAMGetApplication-to-get-solver-name" class="headerlink" title="Use FOAMGetApplication to get solver name"></a>Use FOAMGetApplication to get solver name</h2><p>From any file in the case dir., we can tell VIM what solver is to be used with the current case because it’s mentioned in the <code>controlDict</code> file. Actually, we have two options here:</p><ul><li>Use VIM to take a look at <code>controlDict</code>, and store a string representing the solver name.</li><li>Or, do it the FOAM way (use run functions: <code>getApplication</code>), which needs a working Installation of OpenFOAM (but that’s Ok, you won’t be reading this guide otherwise). This method is heavily used in <code>.Allrun</code> shell scripts.</li></ul><p>In order to learn how VIM interacts with the system, we’ll use the second option: We’ll add a <code>FOAMGetApplication()</code> function to our <code>customFoam.vim</code></p><pre><code class="vim">function! FOAMGetApplication()    &quot; Source run functions and execute getApplication    let cmd=&quot;. $WM_PROJECT_DIR/bin/tools/RunFunctions &amp;&amp; getApplication&quot;    let foamApp=system(cmd)[:-2]    echomsg &#39;This case is set to be simulated with: &#39;.foamApp    return foamAppendfunction</code></pre><ul><li><code>cmd</code> is a string, representing the shell command that sources run functions and then executes <code>getApplication</code> in the current case dir.</li><li><code>foamApp</code> is the output of the previous command (solver name), the <code>[:-2]</code> part deletes the last two characters from the output of the command (by default, It will output <code>icoFoam @</code>, the last two characters are not needed).</li><li><code>echomsg</code> writes messages to the status line, and keeps them in messages list (run <code>:messages</code>).</li></ul><h2 id="The-general-VIM-compiler-plugin-for-OpenFOAM"><a href="#The-general-VIM-compiler-plugin-for-OpenFOAM" class="headerlink" title="The general VIM compiler plugin for OpenFOAM"></a>The general VIM compiler plugin for OpenFOAM</h2><p>Copy <code>blockMesh.vim</code> to <code>foam.vim</code>.</p><ul><li>Don’t forget <code>let current_compiler = &quot;foam&quot;</code></li><li>Declare a script variable, storing the solver name<br><code>let s:foamApp = FOAMGetApplication()</code></li><li>Instead of <code>CompilerSet</code>, define a new function setting the compiler to the solver name, then call it.</li></ul><pre><code class="vim">function! FOAMSetCompiler()    exe &#39;CompilerSet makeprg=&#39;.s:foamAppendfunctioncall FOAMSetCompiler()</code></pre><ul><li>For the file line in the error format, use<br><code>\\file:\ %f\.%*[a-zA-Z]%*[a-zA-Z\ .]\ line\ %l%*[.a-zA-Z0-9\ ]</code><br>So we can cover stuff like “from line 15 to line 20.” and be more dynamic with the number of dots in the filename (handle things like <code>0/U.boundaryField.inlet</code>). Done!! We are ready to go!</li></ul><h2 id="Final-tweaks-VIM’s-auto-commands"><a href="#Final-tweaks-VIM’s-auto-commands" class="headerlink" title="Final tweaks: VIM’s auto-commands"></a>Final tweaks: VIM’s auto-commands</h2><p>We only need to tell VIM to set the compiler to “foam” whenever a Foam File is opened; and to set the compiler to <code>blockMesh</code> if the entered buffer is named <code>blockMeshDict</code>.</p><pre><code class="vim">augroup FOAMautocmdsautocmd!autocmd FileType foam* call FOAMSetPathToCaseDir()autocmd FileType foam* compile foamautocmd BufEnter *blockMeshDict compile blockMeshaugroup End</code></pre><blockquote><p><em>FileType</em> autocmds will <em>always</em> be executed before <em>BufEnter</em> ones, so <code>blockMeshDict</code> files will always have <code>blockMesh</code> as their compiler.</p></blockquote><p>The complete configuration files can be downloaded from here: <a href="https://drive.google.com/uc?id=1Sf-6Pm8twy8dM6YIcWZ8lMFaem2S2F0O&export=download" class="btn" target="_blank" rel="noopener">VIM Customization</a> </p>]]></content>
      
      
      <categories>
          
          <category> productivity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenFOAM </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Customize VIM to work efficiently with OpenFOAM - Part 1</title>
      <link href="/productivity/customize-vim-to-work-efficiently-with-openfoam-part-1/"/>
      <url>/productivity/customize-vim-to-work-efficiently-with-openfoam-part-1/</url>
      
        <content type="html"><![CDATA[<p>Today, I’m starting new (short) post series suggesting tricks to customize the <strong>VIM</strong> text editor so it can be used to edit OpenFOAM cases more efficiently. Of course, making VIM work optimally with every single piece of software you have installed through scripting is a bit of “over-kill”; but having it configured properly is crucial.</p><blockquote><p>These series of posts are for those who are ready to write some lines of VIML code to add interesting functionality to VIM (OpenFOAM-wise).</p></blockquote><h2 id="VIM-Plugins-for-OpenFOAM"><a href="#VIM-Plugins-for-OpenFOAM" class="headerlink" title="VIM Plugins for OpenFOAM"></a>VIM Plugins for OpenFOAM</h2><p>We can easily customize our VIM installation using our own scripts, sourced in the <code>.vimrc</code> file. The versatility of VIM allows for sharing these scripts between users, we then call the scripts: <em>Plug-ins</em>.</p><p>These plugins differ in both their goal and their implementation:</p><ul><li>General purpose plugins. Eg. for handling text formatting, VIM configuration.</li><li>File-Type specific plugins. Eg. those which operate only on C source/header files.</li><li>Syntax highlighting. Eg. highlight OpenFOAM keywords in a OpenFOAM dictionary.</li><li>Compiler plugins. Eg. interpret a python script from VIM command line and jump to errors.</li></ul><p>As OpenFOAM users, we’ll naturally be interested in any C++ related plugins in addition to few OpenFOAM-specific ones.</p><h3 id="Syntax-Highlighting-of-OPENFOAM-dictionaries-in-VIM"><a href="#Syntax-Highlighting-of-OPENFOAM-dictionaries-in-VIM" class="headerlink" title="Syntax Highlighting of OPENFOAM dictionaries in VIM"></a>Syntax Highlighting of OPENFOAM dictionaries in VIM</h3><p>It’s always good to have keyword-specific highlighting of a file; It helps you instantly catch misspelled keywords, it makes understanding the file easier; and with appropriate color themes, it makes you feel comfortable while editing the file.</p><p>There is already a VIM plugin that takes care of OpenFOAM keywords highlighting (Vim-OpenFOAM-syntax). It’s true that the plugin does some weird stuff (eg. loading weird files into the buffer list) but, in general, it’s good for the job of highlighting OpenFOAM syntax. To install it on your system, follow the instructions at <a href="https://github.com/effi/vim-OpenFoam-syntax" target="_blank" rel="noopener">Vim-OpenFoam-syntax</a> on github, or the fork for manual installation (not that scary) <a href="https://bitbucket.org/shor-ty/vimextensionopenfoam" target="_blank" rel="noopener">Vim-Extension-OpenFOAM</a> on bitbucket.</p><p>While programming, I usually use a couple of VIM plugins:</p><ul><li><em>c-support</em>: to turn VIM into a C/C++ IDE (code snippets … etc).</li><li><em>taglist</em>: to browse source code efficiently</li></ul><h2 id="Your-own-VIM-scripts"><a href="#Your-own-VIM-scripts" class="headerlink" title="Your own VIM scripts"></a>Your own VIM scripts</h2><p>In this blog post, we’ll write a very small VIM script, called <code>customFoam.vim</code>,  which is capable of doing a couple of things:</p><ul><li>It needs to be aware of the current file’s FileType.</li><li>When the file is of type <code>foam</code>, VIM should set a couple of things up:<ul><li>Changing the path variable for the <code>:find</code> command so it includes our case’s directory.</li><li>Changing VIM’s current directory to case directory.</li></ul></li><li>At this moment, that’s all, but we’ll add some stuff in the upcoming blog posts.</li></ul><h3 id="First-steps-Determining-file-types"><a href="#First-steps-Determining-file-types" class="headerlink" title="First steps: Determining file types"></a>First steps: Determining file types</h3><p>There are two common ways to determine a file type for a file:</p><ul><li>Use the extension in its same; I call it the <code>lazy Windows way</code>: for example ,files that have names ending with <code>.html</code> are considered HTML files no matter what their content is.</li><li>Take a look at the file’s content then decide; This is the Unix way, which we’ll be using here: It just means we’ll search the content of a file for the line that says <code>FoamFile</code>.</li></ul><p>We are not the first ones who try to detect <code>foam</code> file type in VIM; the <em>vim-OpenFoam-syntax</em> plugin already does that. Actually, it assigns different file types for different <code>foam</code> files. For example, it sets: <code>ft=&quot;foam256_thermodynamicProperties&quot;</code> for <code>thermodynamicProperties</code> dictionaries, but in general, its sets the file type to <code>foam256_general</code>.</p><p>Thus, if you have the plugin installed, you already have the required means to detect <code>foam</code> file type. However, for the sake of leaning VIM, we’ll illustrate a very quick way to do it (but not that efficient!).</p><p>All what we have to do is to write a small script -which contains only one function- searching the first few lines of a file for the keyword <code>FoamFile</code>.<br>This tells VIM that the file is a <code>OpenFOAM Dictionary File</code>:</p><pre><code class="vim">&quot; Filename: foamFT.vim&quot; No debug stuff&quot; Should check if the file type is already set&quot; But it&#39;s OK; just set it againfunction! SetFoamType()    &quot; loop through the first 10 lines    &quot; FoamFile is at line 8 usually    for nL in range(1,10)    &quot; match &#39;FoamFile&#39;        if (getline(nL) =~ &#39;FoamFile&#39;)            setfiletype foam            &quot; if file type is set, leave the loop            break        endif    endforendfunction&quot; That&#39;s it!&quot; Now, when to call it?augroup FOAMFTautocmdsautocmd!autocmd BufRead * call SetFoamType()augroup End</code></pre><p>To check whether the script works or not; Just execute the ex-command <code>:set ft</code> while an OpenFOAM dictionary is loaded. If it works, the output should say <em>filetype=foam</em>.</p><h3 id="Now-we-know-the-filetype-then-what"><a href="#Now-we-know-the-filetype-then-what" class="headerlink" title="Now we know the filetype, then what?"></a>Now we know the filetype, then what?</h3><p>Well, <strong>VIM</strong> knows <em>what</em> we are editing, but it doesn’t know <em>where</em> we are editing it. In fact, it does know the exact path to the current file (try running the ex-command <code>:pwd</code>): VIM considers the startup-directory as your current directory; and to change it, guess what, we have to use the <code>:cd</code> (change directory!) command.</p><p>If you invoke VIM from the case directory, you’ll have the advantage of file names auto-completion in command-line mode; that is, when you type <code>:e c&lt;TAB&gt;</code>, VIM automatically completes <em>constant</em> for you. But, if, for example, you invoke it from the system directory of a case, it won’t know about the files in the other directories (<em>0</em>, <em>constant</em> … etc).</p><p>There’s also the super-useful command <code>:find</code> which finds the specified file in the path (could include multiple -independent- directories) and then edit it. The desired work-flow can be summarized as follows: While editing <code>blockMeshDict</code> in <em>system</em> directory of a case; type <code>:find t&lt;TAB&gt;</code>, which instantly expands to <code>:find transportProperties</code> (Note that this file is located under <em>constant</em> directory), then, hitting <em>ENTER</em> switches to that file to edit it.</p><pre><code class="vim">&quot; Filename: customFoam.vimfunction! FOAMSetPathToCaseDir()    &quot; IF you care only for files in    &quot; system, 0, and constant, use    &quot; let caseDir = expand(&#39;%:p:h:h&#39;)    &quot; But, I&#39;m a regexp lover, so,    &quot; Make Vim remember everything in the path until case name.    &quot; delete everything else!    let caseDir = expand(&#39;%:p:s?\(\/.*run\/[a-zA-Z1-9\. ]*\)\/.*?\1?&#39;)    &quot; set path to include all subdirs of caseDir.    &quot; you can also use &#39;=+&#39; instead of &#39;=&#39; to add the caseDir to    &quot; the default path; but I like it this way.    exe &#39;set path=&#39;.caseDir.&#39;/**&#39;    &quot; I want to run blockMesh, solvers and other tools    &quot; Directly in VIM, so change dir to casedir    exe &#39;cd &#39;.caseDirendfunction&quot; This is just incredibleaugroup FOAMautocmdsautocmd!autocmd FileType foam* call FOAMSetPathToCaseDir()augroup End</code></pre><p>Let’s go through that script line-by-line, shall we?</p><ul><li><code>function! FOAMSetPathToCaseDir()</code> overwrites any function defined with this name (Remember, user-defined function names start with a capital letter). <code>endfunction</code> denotes the end of function block.</li><li>All lines preceded with ( <code>&quot;</code> ) are considered comments.</li><li>The line <code>let caseDir = expand(&#39;%:p:s?\(\/.*run\/[a-zA-Z1-9\. ]*\)\/.*?\1?&#39;)</code> needs deeper explanation: <ol><li>The standard function <code>let</code> defines Vim Variables (In this case, variables are local to the user-defined function).</li><li><em>caseDir</em> is the name of our variable (a string). It is local to the function: To use a global variable inside a function, name it <code>g:var</code>, to make it available only in this script, use <code>s:var</code>, and, in fact, to use a local variable in a function, it should be called <code>l:var</code>, but this is tolerated.</li><li>The standard function <code>expand</code> manipulates filenames (shortcut <em>%</em>) and paths to them, with modifiers:</li><li><code>:p</code> prints the whole absolute path to the file, eg. while editing <em>blockMeshDict</em>, the ex-command <code>echo expand(&#39;%:p&#39;)</code> should display something like <code>/home/path-to-case/system/blockMeshDict</code>.</li><li><code>:h</code> removes the last entry in a path, eg. <code>echo expand(&#39;%:p:h&#39;)</code> would display <code>/home/path-to-case/system</code></li><li><code>:s?pattern?string?</code> acts like the substitute command. <em>pattern</em> is a regular expression, and <em>string</em> accepts <strong>back-references</strong>; All the power one needs in one command.</li><li>So, the regexp <code>\(\/.*run\/[a-zA-Z1-9\. ]*\)\/.*</code> remembers everything from the start of filename to “run” (hopefully, your OpenFOAM cases directory) to the first directory (that’s the case dir. at least for me). Case Name may contain alphabet characters, digits, dots and spaces (The last two are really bad options). The rest of the path is forgotten (eg. /system/blockMeshDict).</li></ol></li></ul><p>This way, we can find our path to the case no matter what case file we are editing!</p><ul><li>In the line <code>exe &#39;set path=&#39;.caseDir.&#39;/**&#39;</code> , the command <code>exe</code> (short for <code>execute</code>) executes the following string as an ex-command. Concatenation in VIML is done with a dot,  and because our <em>caseDir</em> variable is a string, and we are still inside the same function, it can be concatenated with other strings. The /** part expands to all sub-directories, to the last one of them, no matter how many levels of directories the case have.</li><li>The path variable is set so the <code>:find</code> command can help us a bit.</li><li>I like to change the directory to the case dir. so I can run commands directly from within VIM without worrying about which files I’m editing, or the start-up directory. For that, we simply use the <code>:cd</code> ex-command (VIM’s command).</li></ul><p>The function is completed, now, we have to find a way to automate calling it: <code>auto-commands</code>. Simply, we group all of our autocmds in a group called <code>FOAMautocmds</code> (Good practice but optional) .</p><ul><li><code>autocmd!</code> overwrites previous autocmds of this group (often abbriviated as <code>au!</code> ).</li><li>We want to call the function when we open a file of type <code>foam*</code> (including <code>foam</code>, <code>foam_general</code> … etc), so we write: <code>autocmd FileType foam* call FOAMSetPathToCaseDir()</code><br>That’s it, source the script in your <code>.vimrc</code> file and you are good to test it out:</li><li>From the shell (from /../constant/polyMesh in an arbitrary OpenFOAM case, where the mesh is present) run <code>vim boundary</code></li><li>Now, in Vim, type <code>:fin tr&lt;TAB&gt;</code> (<code>fin</code> is a short form for <code>find</code>) then hit ENTER.</li><li>Check both the path and the working directory (using <code>:set path</code> and <code>:pwd</code> respectively).</li><li>You can issue <code>:!blockMesh</code> while editing the file to rebuild the mesh.</li></ul><p>That’s it for now, the next post will explain ways to get the most of VIM compilers to run <code>blockMesh</code> and OpenFOAM solvers on cases right from inside VIM and browse errors.</p>]]></content>
      
      
      <categories>
          
          <category> productivity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenFOAM </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stock-Tank mesh construction using OpenSCAD</title>
      <link href="/openscad/stock-tank-mesh-construction-using-openscad/"/>
      <url>/openscad/stock-tank-mesh-construction-using-openscad/</url>
      
        <content type="html"><![CDATA[<p>This post is part of a longer collection:</p><ul><li><a href="/openscad-basics/">OpenSCAD 101: Basics of the OpenSCAD language</a></li><li><a href="/openscad-transformations-boolean-operations/">OpenSCAD Transformations &amp; Boolean Ops</a></li><li><a href="/openscad-cfd-usage-examples/">OpenSCAD CFD-oriented Usage Examples</a></li></ul><p>It features a very simple, quick and efficient way of constructing a (2D) stock-tank geometry and similar shapes using <strong>OpenSCAD</strong>.</p><p>The main reason I present this way of thinking here is that I don’t think <code>blockMesh</code> is quite the right tool for such tasks; even when used with a powerful macro language, like <em>m4</em>.</p><p>Well, there are a couple of things I expect you to be proficient in:</p><ul><li>A decent text editor should be used (I’m using VIM) to edit OpenSCAD scripts:  It’s good to have something that allows for quick basic calculations to be inserted,  or at least, provide access to the shell.</li><li>Basic Knowledge of some interpreted languages (Python, Lua, Ruby … etc, pick the one you like, I usually use Python): They are great to test ideas quickly.</li></ul><p>As an example mesh, we will be creating the one presented in the following<br>figure:</p><p><img src="/assets/img/OpenSCAD/tank-model-sketch.png" alt="Sketch of desired OpenSCAD model"></p><p>Of course, model dimensions don’t matter because the goal is to create a parametric one.</p><h1 id="A-one-time-deal-Hard-code-everything-in-OpenSCAD-scripts"><a href="#A-one-time-deal-Hard-code-everything-in-OpenSCAD-scripts" class="headerlink" title="A one time deal: Hard code everything in OpenSCAD scripts!"></a>A one time deal: Hard code everything in OpenSCAD scripts!</h1><p>Constructing the stock-tank model point-by-point is not as hard as you might think:</p><ol><li>Create <strong>points</strong> and <strong>paths</strong> vectors (if necessary) using your text editor.</li><li>Run <code>linear_extrude</code> on resulting polygon.</li></ol><p>The first step strongly depends on used text editor; In VIM,  I have this awesome vim command defined in my <em>.vimrc</em> file:</p><pre><code class="vim">command! -nargs=+ Calc :read !python -c &quot;from math import *;            \ import numpy as np;            \ np.set_printoptions(precision=4);            \ &lt;args&gt;&quot;</code></pre><p>Which allows me to run Python code directly via VIM (imports are kind of important here).</p><p>If, for example, I need a set of points to define an “arc” of <strong>radius = 1</strong> between <code>[10,1]</code> and <code>[12,1]</code> points,<br>I only need to issue the following VIM command while editing the SCAD script:</p><pre><code class="vim">:Calc l=np.linspace(10,12,10); m=np.mat([l,1+np.sqrt(1-(l-11)**2)]); print(m.transpose().tolist())</code></pre><p>Which will insert all points into the current file (actually, the print command is the one responsible for this). <code>linear_extrude</code>‘s default <code>paths</code> vector is usually fine.</p><h2 id="Is-it-a-bad-idea-to-do-things-this-way"><a href="#Is-it-a-bad-idea-to-do-things-this-way" class="headerlink" title="Is it a bad idea to do things this way?"></a>Is it a bad idea to do things this way?</h2><p>Yes, it is. These tricks may work if one only needs to prototype something, or if one desires to check whether an idea is good enough to be implemented!  But they fail badly in real situations, where users absolutely have to create a parametric model.</p><p>Fortunately, similar tricks often suggest possible approaches to the task at hand: Notice that we used Python’s <strong>list comprehensions</strong> to create <em>numpy</em> vectors; So, why not using <strong>OpenSCAD list comprehensions</strong> to create OpenSCAD vectors?</p><h1 id="Parametric-design-of-a-stock-tank"><a href="#Parametric-design-of-a-stock-tank" class="headerlink" title="Parametric design of a stock tank"></a>Parametric design of a stock tank</h1><h2 id="Better-than-hard-coding-points-but-still-not-an-optimal-approach"><a href="#Better-than-hard-coding-points-but-still-not-an-optimal-approach" class="headerlink" title="Better than hard-coding points, but still not an optimal approach"></a>Better than hard-coding points, but still not an optimal approach</h2><p>Instead of relying on the power of a text editor, it might be a good idea to use list comprehensions to build needed points. Here’s a complete OpenSCAD script explaining the situation:</p><pre><code class="clike">// Points of the lower arc:// half-a-circle, radius = 1, between [10,1] and [12,1]// which means center is [11,1]list1 = [ for (i = [10 : 0.1 : 12]) [i, 1+sqrt(1-pow((i-11),2))] ];// Points of the upper arc// half-a-circle, radius = 2, between [9,1] and [13,1]// which means center is [11,1]list2 = [ for (i = [13 : -0.1 : 9]) [i, 1+sqrt(4-pow((i-11),2))] ];// Repeating code, --&gt; consider a function// polygon points, just some concatenated listspoints = concat(    [[0,0], [10,0]],    list1,    [[12, -3], [13, -3]],    list2,    [[8,1], [8,8], [4,8], [4,4], [3,4], [3,6], [0,6]]    );  // Default behavior of polygon modulepaths = [ for (i = [0 : 1 : len(points)-1]) i ];// The actual 3D modellinear_extrude(2,[0,0]) polygon(points, [paths]);</code></pre><p>This is certainly a better approach, but we still need to do some adjustments for easier parameterization: Let’s define an (object) module to create the boxes-like portion of our model.</p><h2 id="Using-modules-to-construct-parametric-geometries"><a href="#Using-modules-to-construct-parametric-geometries" class="headerlink" title="Using modules to construct parametric geometries"></a>Using modules to construct parametric geometries</h2><pre><code class="clike">/*    Create an object model called tank.    Parameters:    - w: Base width, to interface with the &quot;arc-y region&quot;, default=1.    - tbh: Total Box height, defaults to 10.    - pbl: A list of partial box lengths, defaults to [6,4]    - pbw: A list of partial box &quot;widths&quot;, default = [3,1]    - st: Translate partial boxes in x-direction, defaults to [0,3]*/module tank (w=1, tbh=10, pbl=[6,4],pbw=[3,1],st=[0,3]) {        // create a parent cube, and subtruct all following objects        // You can also build this region box-by-box            difference () {            // parent cube            cube([tbh,tbh,2]);            // A special box, allows for better connection with the arc.            translate([tbh-2*w,w,-0.01]) cube([2.001,tbh+0.01,3]);            // A set of helper boxes to create desired shape.            for (i=[0:len(pbl)-1]) translate([st[i]-0.01,pbl[i]-0.01,-0.01])                 cube([pbw[i]+0.001,tbh,3]);        }   }</code></pre><p>We can also define our own module to create arcs:</p><pre><code class="clike">/*    Create module named arc.    Parameters:    - r: inner radius, default=1.    - w: arc width, defaults to 1.    - ext: vertical extension length, defaults  to 3.*/module arc (r=1, w=1, ext=3) {    ar = r+w;    // points on arcs    list1 = [ for (i = [-r : 0.1 : r])        [i, sqrt(pow(r,2)-pow(i,2))] ];    list2 = [ for (i = [ar : -0.1 : -ar])        [i, sqrt(pow(ar,2)-pow(i,2))] ];    points = concat(        [[-ar,0]],        list1,        [[r, -ext], [ar, -ext]],        list2        );    // Default behavior of polygon, but let&#39;s    // specify it.    paths = [ for (i = [0 : 1 : len(points)-1]) i ];    linear_extrude(2) polygon(points, [paths]);}</code></pre><p>To make sense of module arguments, refer to the following figure:</p><p><img src="/assets/img/OpenSCAD/tank-model-boxes.png" alt="Partially parametric OpenSCAD model"></p><p>Now, creating basic models is as simple as issuing:</p><pre><code class="clike">union() {    tank();    translate([11,1]) arc();}</code></pre><p>More complicated models can be easily derived by overwriting default parameter values:</p><pre><code class="clike">union() {    tank(tbh=15, pbl=[6,4,10],pbw=[3,1,5],st=[0,3,4]);    translate([16,1]) arc();    translate([-2,6,2]) rotate([0,180,0]) arc(r=2);}</code></pre><p>Which results in:</p><p><img src="/assets/img/OpenSCAD/tank-model.png" alt="Final OpenSCAD parametric model"></p><blockquote><p>There may be simpler ways to achieve these results, but this approach is most useful for users who want to practice creating 3D geometry models with <strong>OpenSCAD</strong>.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> openscad </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Meshing </tag>
            
            <tag> OpenSCAD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenSCAD CFD-oriented Usage Examples</title>
      <link href="/openscad/openscad-cfd-oriented-usage-examples/"/>
      <url>/openscad/openscad-cfd-oriented-usage-examples/</url>
      
        <content type="html"><![CDATA[<p>We’ve been learning the basics of OpenSCAD language:</p><ul><li><a href="/openscad-basics/">OpenSCAD 101: Basics of the OpenSCAD language</a></li><li><a href="/openscad-transformations-boolean-operations/">OpenSCAD Transformations &amp; Boolean Ops</a></li></ul><p>In this post, I’ll teach you how to build commonly used shapes using new tricks:<br>You probably can create them already, but I want to show you the power of 2D-shapes Extrusion in OpenSCAD.</p><blockquote><p>One of the most important lessons I learned while working with OpenSCAD is<br>that I absolutely have to keep my models “parametric” no matter what!</p></blockquote><h2 id="A-parametric-T-junction-module"><a href="#A-parametric-T-junction-module" class="headerlink" title="A parametric T-junction module."></a>A parametric T-junction module.</h2><p>First, let’s learn how to manipulate module parameters (arguments) efficiently:</p><ol><li>You already know that you can specify a default value for a parameter.</li><li><code>cylinder(r=1,h=2)</code> and <code>cylinder(r1=1, r2=2, h=5)</code> both work fine because the cylinder module is set up in a way that if only one radius is supplied, it’s considered as “cylinder radius”; but if two are supplied, the module produces a cone like shape.</li><li>At the moment, OpenSCAD doesn’t support setting a module’s parameter value as the default value of another one, i.e. the command <code>module dum(p1,p2=p1) {echo(p2);}</code>  will result in a warning: “Ignoring unknown variable p1”, and the <code>echo</code> command will say that <code>p2</code> is <code>undef</code>.</li></ol><p>The following example shows a way of dealing with such situations where we want to use a second radius only if the user says so.</p><p>The T-Junction shape I have in mind is illustrated in the following image  (Well, this is actually the resulting one …):</p><p><img src="/assets/img/OpenSCAD/openscad-tjunction.jpg" alt="OpenSCAD T-Junction Model"></p><blockquote><p>If you have any questions, don’t hesitate, fire at me in the comments section.</p></blockquote><pre><code class="clike">/*    Create an object module called tJunction.    Parameters:    - mr1: Main cylinder radius in mm    - mh:  Main cylinder height in mm    - ar1: Additional cylinder radius in mm    - ah:  Additional cylinder height in mm    [Optional parameters, for cone-like shapes]    - mr2: Second main cylinder radius in mm     - ar2: Second additional cylinder radius in mm     This module creates a T-shaped pipe (pointing up in z-direction).*/module tJunction(mr1,mh,ar1,ah, mr2,ar2) {    // First check that the main cylinder is wider    if (mr1&lt;ar1){        // ECHO knows HTML        // Use checkMesh-like indicators (***) for auto error finding        echo(&quot;&lt;font color=&#39;red&#39;&gt;*** Check cylinders dimensions&lt;/font&gt;&quot;);    }       // If optional parameters are not defined,    // Use only the main ones.    mr2 = (mr2 == undef) ? mr1: mr2;    ar2 = (ar2 == undef) ? ar1: ar2;    // Build the actual thing    union(){        rotate([0,90,0]) cylinder(r1=mr1,r2=mr2,h=mh, center=true);        cylinder(r1=ar1, r2=ar2, h=ah);    }   }// An exampletJunction(10,100,5,50, $fn=60);/* translate(-[100,0,0]) tJunction(12,100,5,50,5,3, $fn=60); */</code></pre><h2 id="A-parametric-U-like-pipe-For-OpenSCAD-2016"><a href="#A-parametric-U-like-pipe-For-OpenSCAD-2016" class="headerlink" title="A parametric U-like pipe [For OpenSCAD 2016+]"></a>A parametric U-like pipe [For OpenSCAD 2016+]</h2><p>There are generally two ways to create 3D shapes out of 2D ones with OpenSCAD:</p><ul><li><strong>Linear Extrusion:</strong> Extruding a 2D shape in a single direction (Specifically, in the z-direction), but the shape can be twisted!</li><li><strong>Rotating Extrusion:</strong> Rotating a 2D shape around the Z-axis to create a symmetric shape (Rotational symmetry).</li></ul><p>… And there is a command for each method: <code>linear_extrude</code> and <code>rotate_extrude</code>.</p><p>Let’s see what parameters we need to specify in order to build a U-shaped pipe:</p><p><img src="/assets/img/OpenSCAD/openscad-ushape.jpg" alt="OpenSCAD UShaped pipe"></p><pre><code class="clike">/*    Create an object module named Ushape.    Parameters:    - ur1: Pipe radius.    - ur2: 2*ur2 is the center-to-center distance between            the extensions of U shape.    - uh: length of these extensions.    Requires OpenSCAD 2016.xx or newer because:    ** It uses the angle argument **    Makes use of standard extrusions to build    a U-shaped pipe.*/module Ushape(ur1, ur2 ,uh) {    // Circle resolution    cRes = 30;    // Extrusion resolution    eRes = 50;    union(){        // The rounded part        rotate_extrude(angle=180, convexity=10, $fn=eRes)               translate([ur2, 0]) circle(ur1, $fn=cRes);        // U extensions        rotate([90,0,0]) linear_extrude(height=uh,$fn=eRes)               translate([ur2, 0]) circle(ur1, $fn=cRes);        rotate([90,0,0]) linear_extrude(height=uh,$fn=eRes)               translate([-ur2, 0]) circle(ur1, $fn=cRes);    }}// Simple example usage:// Ushape(2,10,20);// Hollow U-shapedifference(){Ushape(2,10,20);Ushape(1,10,20.01);}</code></pre><blockquote><p>It’s important that you learn more about these extrusion commands from the <a href="https://en.wikibooks.org/wiki/OpenSCAD_User_Manual/2D_to_3D_Extrusion#Rotate_Extrude" target="_blank" rel="noopener">User Manual</a></p></blockquote><h2 id="A-parametric-U-like-pipe-For-older-OpenSCAD"><a href="#A-parametric-U-like-pipe-For-older-OpenSCAD" class="headerlink" title="A parametric U-like pipe [For older OpenSCAD]"></a>A parametric U-like pipe [For older OpenSCAD]</h2><pre><code class="clike">/*    Create an object module named Ushape.    Parameters:    - ur1: Pipe radius.    - ur2: 2*ur2 is the center-to-center distance between            the extensions of U shape.    - uh: length of these extensions.    Works with all OpenSCAD versions:    Instead of using the new &quot;angle&quot; argument,    use an intersection to get the same effect.    Makes use of standard extrusions to build    a U-shaped pipe.*/module Ushape(ur1, ur2 ,uh) {    // Circle resolution    cRes = 30;    // Extrusion resolution    eRes = 50;    union(){    // The rounded part        intersection(){ // Intersect the extruded circle with a cube        rotate_extrude(convexity=10, $fn=eRes)               translate([ur2, 0]) circle(ur1, $fn=cRes);        # translate([0,(ur2+ur1),0])            cube([2*(ur2+ur1),2*(ur2+ur1),2*ur1],center=true);        }        // U extensions        rotate([90,0,0]) linear_extrude(height=uh,$fn=eRes)               translate([ur2, 0]) circle(ur1, $fn=cRes);        rotate([90,0,0]) linear_extrude(height=uh,$fn=eRes)               translate([-ur2, 0]) circle(ur1, $fn=cRes);    }}</code></pre><blockquote><p>Don’t forget to remove the highlighter (#) from the cube command.</p></blockquote><h2 id="An-Even-Better-Ushape-module"><a href="#An-Even-Better-Ushape-module" class="headerlink" title="An Even Better Ushape module"></a>An Even Better Ushape module</h2><p>Why limiting ourselves to circles? Indeed, there is no reason, so, we can upgrade our previous model to take in any 2D shape (hopefully) and use it when creating the U shape. </p><p>The transition is simple:</p><ul><li>Remove instructions and variables (Resolution and Radius variables) that are related to the base circle in old module.</li><li>Replace every instance of the circle with <code>children(0)</code> (The first item in the children list).</li></ul><pre><code class="clike">/*    Create an operator module named Ushape.    Parameters:    - ur: 2*ur is the center-to-center distance between            the extensions of U shape.    - uh: length of these extensions.    Children:    - Use only one child object    Requires OpenSCAD 2016.xx or newer because:    ** It uses the angle argument **    Makes use of standard extrusions to build    a U-shaped pipe.*/module Ushape(ur ,uh) {    // Extrusion resolution    eRes = 50;     union(){        // The rounded part        rotate_extrude(angle=180, convexity=10, $fn=eRes)               translate([ur, 0]) children(0);         // U extensions        rotate([90,0,0]) linear_extrude(height=uh,$fn=eRes)               translate([ur, 0]) children(0);        rotate([90,0,0]) linear_extrude(height=uh,$fn=eRes)               translate([-ur, 0]) children(0);    }   }// Hollow U-shapedifference(){    Ushape(10,20) {scale([1,.7]) circle(4, $fn=30);};    Ushape(10,20.01) {circle(2,$fn=30);};}</code></pre><p>The previous example should produce something like this:</p><p><img src="/assets/img/OpenSCAD/openscad-operator-ushape.jpg" alt="OpenSCAD operator module Ushape"></p><blockquote><blockquote><p>Note: These modules produce a medium-quality STLs (in terms of Triangle Quality), but this can be easily improved if you are in dire need of quality triangles.</p></blockquote><blockquote><p>You can check these models using OpenFOAM’s <code>surfaceCheck</code> utility after exporting them to STL files.</p></blockquote></blockquote><h2 id="A-Bottle-of-water"><a href="#A-Bottle-of-water" class="headerlink" title="A Bottle of water"></a>A Bottle of water</h2><h3 id="A-simple-model"><a href="#A-simple-model" class="headerlink" title="A simple model"></a>A simple model</h3><p>Extrusion commands are best used with <code>polygons</code>; This example illustrate how simple it is to model a bottle of water in OpenSCAD. Of course, the approach used here is my own way of dealing with simple problems efficiently; For more complicated shapes, I’ll show you another way to make the most of <code>rotate_extrude</code>.</p><p>First, we have to get a simple blueprint for a bottle of water. </p><p><a href="https://us.123rf.com/450wm/maralingstad/maralingstad1509/maralingstad150901356/45434655-vector-blueprint-water-bottle-on-engineer-or-architect-background-.jpg" target="_blank" rel="noopener">This picture</a> is good enough, I think.</p><p>I usually use <a href="https://automeris.io/WebPlotDigitizer" target="_blank" rel="noopener">WepPlotDigitizer</a> to extract the coordinates of the most important points in the shape:</p><p>In this case, I chose the center of the main circle as an origin of coordinates system (Both axes are chosen to match the featured “diameters”).</p><p>In the following picture: </p><ul><li><code>X1</code> and <code>Y1</code> are at the origin.</li><li><code>X2= (1,0)</code></li><li><code>Y2= (0,3)</code></li></ul><p><img src="/assets/img/OpenSCAD/openscad-bottle-coords.png" alt="OpenSCAD bottle coords"></p><p>Next we mark some points on one half of the bottle (so we can rotate it later):</p><ul><li>The order of these points is actually not important because the <code>polygon</code> command in OpenSCAD has a <code>paths</code> option to specify the correct order of linked points, but this is extra work; Thus, make sure you create a manifold polygon while selecting these points.</li></ul><p><img src="/assets/img/OpenSCAD/openscad-bottle-points.png" alt="WebPlotDigitizer bottle"></p><p>Point coordinates can be viewed by Pressing <code>View Data</code> under the <code>Dataset</code> tab in <code>WebPlotDigitizer</code>:</p><p><img src="/assets/img/OpenSCAD/openscad-bottle-data.png" alt="WebPlotDigitizer bottle"></p><p>Finally, creating the actual bottle model is as easy as executing the command:</p><pre><code class="clike">// Create points vectorpnts = [ [0.000, -3.458],         [1.033, -3.458],         [1.100, -3.395],         [1.100, -0.553],         [0.433, 2.842],         [0.367, 2.905],         [0.300, 3.000],         [0.000, 3.000] ];// Create the polygon and rotate it.rotate_extrude(convexity=4) polygon(pnts*10);</code></pre><blockquote><blockquote><p>Note that we can omit point’s z-coordinate if it’s <code>0</code>.</p></blockquote><blockquote><p>Using a decent text editor is crucial here: In VIM, you can create the <code>pnts</code> vector with only one command (applied to the text in previous figure).<br><code>:1,8 g/^/ exe &quot;norm! A],\&lt;Esc&gt;I[&quot;</code><br>Done! Now you only have to delete the last <code>,</code></p><ul><li><code>1</code> is the first line’s number, and <code>8</code> is the last one.</li><li>If you want to know more, ask in the comments.</li></ul></blockquote></blockquote><p>This should result in the following model:</p><p><img src="/assets/img/OpenSCAD/openscad-bottle-water.jpg" alt="OpenSCAD Bottle Model"></p><h3 id="A-more-complicated-model"><a href="#A-more-complicated-model" class="headerlink" title="A more complicated model"></a>A more complicated model</h3><p>If you want an exact match to your sketch, you can follow the following approach:</p><ol><li>Create an SVG-path file using <code>GIMP</code> and <code>LibreCAD</code> for your model.</li><li>Convert the SVG file to DXF using <code>inkscape</code> and <code>pstoedit</code>.</li><li>Get it into OpenSCAD and use <code>rotate_extrude</code> on it.</li></ol><p>An example SVG file for a sample bottle of water can be found <a href="/assets/img/OpenSCAD/openscad-path-bottle.svg">here</a></p><p>It looks like this:</p><p><img src="/assets/img/OpenSCAD/openscad-path-bottle.png" alt="OpenSCAD SVG path"></p><p>Now, let’s convert this SVG file to an OpenSCAD-compatible DXF:</p><pre><code class="bash">$ inkscape -E intermediate.eps openscad-path-bottle.svg$ pstoedit -dt -f dxf:-polyaslines\ -mm intermediate.eps openscad-path-bottle.dxf</code></pre><ul><li>The first command uses <code>inkscape</code> to convert the SVG file to the EPS format.</li><li>The second one uses <code>pstoedit</code> to convert the resulting EPS file to a DXF file.</li></ul><blockquote><p>Note that the <code>-polyaslines</code> option is very important as OpenSCAD doesn’t support curved lines in DXF files. </p></blockquote><p>To use <code>openscad-path-bottle.dxf</code> put it in the same directory as the following script (2D shape highlighted):</p><pre><code class="clike">// Easy as eveything else in OpenSCADrotate_extrude(convexity=4)#import(&quot;openscad-path-bottle.dxf&quot;);</code></pre><p>Which will result in the following shape:</p><p><img src="/assets/img/OpenSCAD/openscad-bottle-svg.png" alt="OpenSCAD STL bottle"></p><p>Hey, why don’t you try this for fun (Try it multiple times):</p><pre><code class="clike">function polyR(l=1) =[    for (i=[0:20:180])    [rands(0,l,1)[0]*cos(90-i), rands(0,l,1)[0]*sin(90-i)]];v = polyR();rotate_extrude(convexity=10) scale(15) polygon(v);</code></pre><h2 id="Exporting-models-to-STL-format"><a href="#Exporting-models-to-STL-format" class="headerlink" title="Exporting models to STL format"></a>Exporting models to STL format</h2><p>To export your geometry models to STL files, you can either:</p><ul><li>Use the GUI: <code>File &gt; Export &gt; Export as STL ...</code> after rendering the model (with <code>F6</code>).</li><li>Or, from the command line:</li></ul><pre><code class="bash">$ openscad file.scad -o file.stl</code></pre><p>By default, OpenSCAD exports everything as a single region (named <code>OpenSCAD_Model</code>) to an ASCII STL file. You’ll learn how to improve this behavior in the next posts.</p><blockquote><p>All the models described here are fairly simple and OpenFOAM’s <code>autoPatch</code> can handle separating mesh boundary patches later efficiently!</p></blockquote><p>That’s all for today, I hope this was a useful post; see you next time!</p>]]></content>
      
      
      <categories>
          
          <category> openscad </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Meshing </tag>
            
            <tag> OpenSCAD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenSCAD Transformations &amp; Boolean Operations</title>
      <link href="/openscad/openscad-transformations-boolean-operations/"/>
      <url>/openscad/openscad-transformations-boolean-operations/</url>
      
        <content type="html"><![CDATA[<p>In my previous post, <a href="/openscad-basics/">OpenSCAD 101: Basics of the Programmers’ CAD software</a>, we’ve talked about the most important commands and OpenSCAD’s language features. This time, we’ll discuss transformations (<code>translate</code>, <code>scale</code>, … etc) and introduce you to a new subject: Boolean operations on primitives.</p><h2 id="More-on-OpenSCAD’s-transformation-modules"><a href="#More-on-OpenSCAD’s-transformation-modules" class="headerlink" title="More on OpenSCAD’s transformation modules"></a>More on OpenSCAD’s transformation modules</h2><h3 id="Cascading-transformations-on-a-group-of-objects"><a href="#Cascading-transformations-on-a-group-of-objects" class="headerlink" title="Cascading transformations on a group of objects"></a>Cascading transformations on a group of objects</h3><p>A transformation is basically an operator module, so, it returns a new object, which, naturally, can be transformed again. You are already familiar with this concept, but, what if we wanted to perform two transformations on a group of objects?</p><p>Well, grouping in OpenSCAD is usually performed with <code>{...}</code> (groups objects, actions … etc). The only requirement here is that you don’t forget the tailing semi-colon at the end of each object definition:</p><pre><code class="clike">m_axis = [0,0,1];cent = [10,5,30];mirror(m_axis) translate(cent){   cube([10,20,20],center=true);   translate([10,0,0]) sphere(5);}</code></pre><p>The <code>mirror</code> transformation mirrors the object on a plane through the origin. </p><p><code>m_axis</code> is a normal vector to that plane. So, the previous snippet will:</p><ol><li>Create a 10x20x20 cube at the origin.</li><li>Create a sphere of radius 5 at (10,0,0).</li><li>Translate each object by <code>cent</code> vector.</li><li>Mirror both resulting objects on the X-Y plane.</li></ol><blockquote><p>This <a href="http://openscad.org/cheatsheet/" target="_blank" rel="noopener">[CheatSheet]</a> lists the available transformations and the <a href="https://en.wikibooks.org/wiki/OpenSCAD_User_Manual/Transformations#mirror" target="_blank" rel="noopener">[user manual]</a> explains how to use them. </p></blockquote><h3 id="Scope-of-OpenSCAD-variables"><a href="#Scope-of-OpenSCAD-variables" class="headerlink" title="Scope of OpenSCAD variables"></a>Scope of OpenSCAD variables</h3><p>Continuing with our grouping thing: Remember when I told you not to mess with variables in OpenSCAD? Well, you are now ready to do so:</p><ol><li>OpenSCAD (starting from 2015.03 I think) is a scope-aware language, which means variables are defined locally in their scopes and can overwrite outer ones but only inside their scope.</li><li>A couple of braces <code>{...}</code> defines a new scope only if used with a module.</li></ol><p>To illustrate, you can try out these few lines:</p><pre><code class="clike">// Global scopevec = [10,5,0];echo(vec);translate(vec) {    // Inner scope    vec = 5;    sphere(vec);    echo(vec);}// Global scope is backrotate(vec) cube(10);</code></pre><p>The first <code>echo</code> will output the value of the vector <code>vec</code>; the second one will say that <code>vec</code> is a floating point equal to 5, and the <code>rotate</code> command will use the vector <code>vec</code> simply because it doesn’t know about the other <code>vec</code> (note that the <code>translate</code> command also doesn’t know about it!).</p><p>Dummy scopes like this one:</p><pre><code class="clike">{ var = 10; } // is this a scope?echo(var); /* ECHO: 10               No it&#39;s not!               If it was, ECHO should say &#39;undef&#39; */</code></pre><p>are not considered as valid scopes.</p><p><strong>A side note:</strong><br>Numbers are represented as 64 bit IEEE floating points, and only decimal notation is supported.<br><code>nan</code> (“NotANumber”) is the only value that is not equal to any value (including itself):</p><pre><code class="clike">x = 0/0;// You can&#39;t say this:// if (x == 0/0) echo &quot;yes&quot;;// Because nothing is equal to 0/0 including 0/0// Alternatively, use this:if (x != x) echo(&quot;yes&quot;);// This also useful:// Test to see if y is defined or not:if (y == undef) echo(&quot;y is not defined yet&quot;);</code></pre><h2 id="Boolean-Operations-with-OpenSCAD"><a href="#Boolean-Operations-with-OpenSCAD" class="headerlink" title="Boolean Operations with OpenSCAD"></a>Boolean Operations with OpenSCAD</h2><p>There are three basic Boolean operations you can perform on a group of objects in OpenSCAD:</p><ol><li><strong>Union (logical Or)</strong>: Simply sums all child objects into a single one.</li><li><strong>Difference (logical and not)</strong>: Subtracts all child objects starting from the second one from the first one.</li><li><strong>Intersection (logical and)</strong>: Intersects all child objects.</li></ol><p>They are all modules with no arguments, so:</p><pre><code class="clike">vec = [40, 0, 0];union() {    sphere(10);    cube(20);}translate(vec) difference() {sphere(10);// Subtract all following objects from the spherecube(20);}translate(-vec) intersection() {cube(20);sphere(10);}</code></pre><p>The following image showcases the results of each module call:<br><img src="/assets/img/OpenSCAD/openscad-boolean-operations.jpg" alt="&quot;OpenSCAD Boolean Operations&quot;"></p><p>Now let’s do something interesting with what we have just learned:</p><pre><code class="cpp">/*   Create a module named specialCubes.   It places a series of cubes on the perimeter of   a circle (centered at the origin) where each   cube is oriented towards the center of this circle.   Parameters:     - num: The number of cubes to place.     - dist: circle radius (distance from origin). */module specialCubes(num, dist) {// Approximate the size of each cube// Remember, this var. is local to this modulesize = (2* PI *dist/num)/sqrt(2);/* Yes, PI is defined in the MCAD library   Alongside TAU (2*PI) and mm_per_inch to convert   inches to meters.   Take a look at /usr/share/openscad/libraries/MCAD/constants.scad*/range = [0:360/num:360];// ranges are of the form [start: step :end]for (i=range)rotate(i)translate(dist*[1,0,0])rotate(45)cube(size, center=true);}// Subtract cubes as we create them from the first// Cylinder.difference(){cylinder(r= 20, h=1, $fn=60,center=true);specialCubes(30, 20);specialCubes(20, 10);cylinder(r= 2, h=5, $fn=30, center=true);}</code></pre><p>This will result in something similar to:</p><p><img src="/assets/img/OpenSCAD/openscad-interesting-boolean.jpg" alt="OpenSCAD transformations and boolean ops"></p><blockquote><blockquote><p>Try to remove the <code>center=true</code> option from the first cylinder and evaluate the results!</p></blockquote><blockquote><p>If you are having trouble figuring out what happened here, rebuild the module from scratch without the for command.</p></blockquote></blockquote><p>Let’s explain the <code>for</code> command though:</p><ol><li>Create a cube at the origin of calculated size.</li><li>Rotate it 45 degrees so it’s oriented towards the origin in its original state.</li><li>Translate it in the x-direction by <code>dist</code> units.</li><li>Rotate the resulting object by <code>i</code> degrees around the z-axis. </li><li>These four steps are repeated for each <code>i</code> in the <code>range</code>.</li></ol><p>Note that the last cylinder cannot have a height of ‘1’, because the <code>difference</code> module will be confused when it finds the common surface (<code>h = 1.01</code> will work fine though).</p>]]></content>
      
      
      <categories>
          
          <category> openscad </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Meshing </tag>
            
            <tag> OpenSCAD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenSCAD 101: Basics of the Programmers&#39; CAD software</title>
      <link href="/openscad/openscad-101-basics-of-the-programmers-cad-software/"/>
      <url>/openscad/openscad-101-basics-of-the-programmers-cad-software/</url>
      
        <content type="html"><![CDATA[<p>When it comes to <code>creating a Mesh</code> for OpenFOAM, I always look for the most <strong>modular</strong> way to do things:</p><ul><li>If a great control over the mesh is required, <strong>m4 macro language</strong> and <code>blockMesh</code>  are good choices. They are somewhat tiresome to use, but as long as they allow me to do pretty much anything I can think of; I don’t care!</li><li>If I can live with little control over the mesh, (which is a more frequent case) I usually follow a<br><strong>Model-it-with-CAD-then-cfMesh-it</strong> approach; and there are two reasons:<ol><li>If I’m to loose some control over the mesh anyway, why struggle with the <em>very-</em>long <code>snappyHexMeshDict</code>?</li><li>Parameterization of <em>cfMesh’s</em> <code>meshDict</code> is much easier.</li></ol></li></ul><p>This post is part of a longer series on how to make use of OpenSCAD capabilities to perform CFD-like mesh generation. The typical workflow you are supposed to follow can be summarized in these three key points:</p><ol><li>Create a <code>parametric</code> OpenSCAD model for your problem’s geometry.</li><li>Use <code>cfMesh</code> to generate quality meshes (which can also be parametric).</li><li>Simulate the case with OpenFOAM, change some design variables (Geometry, Mesh or Simulation properties) and go back to step <code>1</code> or <code>2</code> as needed. </li></ol><blockquote><p>DISCLAIMER:</p><p>Every Code snippet in this post is a fully-functional OpenSCAD “script”.  I strongly recommend you follow through by “trying” the commands!</p></blockquote><h2 id="Before-we-start-…"><a href="#Before-we-start-…" class="headerlink" title="Before we start …"></a>Before we start …</h2><p>Before we dive into details of how to create parametric models in OpenSCAD, I would like to introduce you to some important tips that you will find very useful along the course of your learning process:</p><ol><li>You can run OpenSCAD scripts here: <a href="http://openscad.net" target="_blank" rel="noopener">openscad.net</a> if you don’t want to install it on your system.</li><li>OpenSCAD is written in <strong>C++</strong>, and it’s a language by itself.</li><li><code>Variables</code> in OpenSCAD are a bit <em>weird</em>: They are set at compile time rather than at “run” time (We’ll talk about this later, you only need to know that you should never change the value of a variable after setting it).</li><li>Just like pretty much any other CAD software, you don’t need to stick with the standard library: You can easily develop your own, and use others libraries.</li><li>Learning the basics of OpenSCAD shouldn’t take longer than 15mins!</li><li><strong>OpenSCAD binaries</strong> are available for a wide range of OSs but I’m focusing on Linux distros (Command-line usage … etc).</li><li>You don’t need to write code with the awful default <em>text editor</em> that comes with OpenSCAD: Use your own text editor instead (I’m using VIM with <a href="http://github.com/torrancew/vim-openscad" target="_blank" rel="noopener">VIM-OpenSCAD plugin</a>).</li></ol><h2 id="Setting-up-OpenSCAD"><a href="#Setting-up-OpenSCAD" class="headerlink" title="Setting up OpenSCAD"></a>Setting up OpenSCAD</h2><p>On Ubuntu-based distros, installing OpenSCAD is as easy as executing the command:</p><pre><code class="bash">$ sudo apt install openscad</code></pre><p>But this may install a relatively outdated version of the software (<strong>Ubuntu 16.04 LTS</strong> repos have the 2015.3 version, which is good for now). If you want the latest release, follow the instructions provided in the<br><a href="http://www.openscad.org/downloads.html" target="_blank" rel="noopener">Official OpenSCAD Download page</a>.</p><p>The default interface will combine a basic <em>text editor</em>, a <em>preview/render window</em> (to preview the created models), and a *”log” console* (displays useful information).</p><p>I just can’t stand the default text editor so I’m using <strong>VIM</strong> instead (you can use your favorite text editor). You just have to make sure that <code>Design &gt;&gt; Automatic Reload and Preview</code> option is turned on (in OpenSCAD); This way, every time you save your <em>.scad</em> file, it gets reloaded and models are automatically previewed.</p><p>Of course, VIM doesn’t have native support for OpenSCAD’s language, that’s why I needed to install a syntax-highlighting plugin first: <a href="http://github.com/torrancew/vim-openscad" target="_blank" rel="noopener">Vim-OpenSCAD</a></p><p>Also, you may need to create a directory to hold all your OpenSCAD projects  (Store <em>all</em> of your OpenSCAD scripts in this directory) :</p><pre><code class="bash">$ mkdir -p ~/OpenSCADProjs</code></pre><blockquote><p>Just do it, OK! It eases dealing with library imports later!</p></blockquote><h2 id="First-steps-Learning-the-Syntax"><a href="#First-steps-Learning-the-Syntax" class="headerlink" title="First steps: Learning the Syntax"></a>First steps: Learning the Syntax</h2><p>OpenSCAD’s language is actually very simple, and can be learned in no time; In this section we’ll try to break down the most interesting features of the language (from a beginner’s perspective of course).</p><h3 id="General-syntax"><a href="#General-syntax" class="headerlink" title="General syntax"></a>General syntax</h3><ul><li>Every statement in an OpenSCAD “script” has to end with a semi-colon.</li><li>A simple statement can create shapes, transform them, perform Boolean operations … etc.</li><li>Single-line comments are triggered with <code>//</code>, and multi-line ones are enclosed between <code>/*</code> and <code>*/</code> just like in other C-like languages.</li></ul><h3 id="Variables-in-OpenSCAD"><a href="#Variables-in-OpenSCAD" class="headerlink" title="Variables in OpenSCAD"></a>Variables in OpenSCAD</h3><p>Variables in OpenSCAD are set during compile-time; Their behavior is different from what you would expect. To illustrate this, let’s take a simple example:</p><p>Suppose you have this Python script (Or the equivalent in any other well-known language which implements some sort of mutable data approaches):</p><pre><code class="python"># This is a commentdo_something_with(x) # Hey! x is not initialized!!x = 1  # x variable will have a value of onedo_something_with(x) # Will do something with x = 1x = 5  # Now x will have the value of 5do_something_with(x) # Will do something with x = 5</code></pre><p>In OpenSCAD, things are quite different:</p><pre><code class="clike">// This is a commentdo_something_with(x); // OK, this will do something with x = 5x = 3;  // x will have the value of 3 for a momenty = x+1; // y will have the value of 6x = 5;  /* The final value of x, which is used in all other instructions */</code></pre><p>See? Instead of treating the script line by line; OpenSCAD collects all variable values first (If a variable is defined twice, the last value wins), then processes the remaining instructions.</p><p>Variable assignment is very simple <code>varName = varValue;</code>, and you can use arithmetic expressions in <code>varValue</code>.</p><p>As a general rule:</p><ul><li>Never change a variable’s value with another instruction in your script;    Create new variables instead. Think of these variables as immutable.</li></ul><blockquote><p>You can also think of OpenSCAD’s variables as C’s constants; Don’t mess with them unless you know what you are doing!</p></blockquote><h3 id="OpenSCAD-Vectors-Lists"><a href="#OpenSCAD-Vectors-Lists" class="headerlink" title="OpenSCAD Vectors (Lists)"></a>OpenSCAD Vectors (Lists)</h3><p>You can define vectors in the following way:</p><pre><code class="clike">a = 2;b = 3;// Vector creationvec = [a,b];// Display vector value in the consoleecho(vec);// Matrix creation, trivialmat = [vec, vec+[2,4]];  // Some Vector operations are supported// Access to elements:echo(mat[1][0]);   /* Indexing follows C conventions */</code></pre><p>Vectors are represented as simple lists; and some of their operations are  supported by default (The ‘+’ operator can handle both floats and vectors).</p><p>The <code>echo</code> command displays the value of the variable in the console (Look for lines starting with <code>ECHO:</code> in the few first lines of the log).</p><p>Indexing starts from ‘0’, so <code>vec[0]</code> represents the value of <code>a</code> (Just like in any other C-based language).</p><blockquote><p>Can you predict what the result of the last instruction in the previous snippet would be?</p></blockquote><p>Beginners may be tempted to use ranges to define vectors, which is not quite right!</p><pre><code class="clike">ran = [1:10];  // Range starting from 1, ending with 10 (step =1)echo(ran);  // The range doesn&#39;t expand, huh !!echo(ran[3]); /* Should output the 4th element in ran, Right?                 Well, it gives &quot;undef&quot; instead !! */</code></pre><p>Ranges are not vectors, they were created for usage with loops only!</p><p>Although, you can define a vector from a range in the following way:</p><pre><code class="clike">ran = [1:4];  // Range starting from 1, ending with 4 (step =1)vec = [for (i = ran) i*2 ];  /* vec is a vector */</code></pre><p>This will result in the following vector: <code>[2 4 6 8]</code></p><h3 id="OpenSCAD-functions"><a href="#OpenSCAD-functions" class="headerlink" title="OpenSCAD functions"></a>OpenSCAD functions</h3><p>Functions in OpenSCAD are meant to take in some values, perform calculations and return the results. The anatomy of a function looks like this:</p><pre><code class="clike">function funcName(arguments) = outputValue ;</code></pre><p>The arguments are local and do not conflict with external variables.</p><p>Say I want to test whether or not some input variables <code>x,y</code> are satisfying a certain constraint <code>x+y&gt;=0</code>. This can be achieved using a function:</p><pre><code class="clike">// Define the function// x, y are local to the function herefunction testConst(x,y) = (x+y&gt;=0) ? 1 : 0;// Now how to call that function?// You can&#39;t do this:testConst(1,2);// Because you&#39;ll get &quot;Unknown module&quot; error (Modules are something else)// But you can definitely do this:a = testConst(1,2);// andecho(testConst(1,2));</code></pre><p>The expression <code>(x+y&gt;=0) ? 1 : 0</code> is equivalent to:</p><pre><code class="clike">if (x+y is greater than or equal to 0)  {Give the value 1 to the function }else  // if x+y is strict. less than 0 {Give the value 0 to the function }</code></pre><p>Of course, you can also define argument-less functions:</p><pre><code class="clike">/* Define a function named noArgsFunc that returns two randomnumbers from the range (0,10).  */function noArgsFunc() = rands(0,10,2);// Call itecho(noArgsFunc());</code></pre><p>What if I want to call the function I’m defining inside itself? This is also supported (called recursive functions). You only need to ensure the recursion is terminated somehow:</p><pre><code class="clike">// There is no factorial function in standard library, so define onefunction fact(n) = ( (n==1 || n==0) ? 1 : n*fact(n-1));echo(fact(4));</code></pre><p>Note that the definition of <code>fact</code> is basically a conditional statement where the same function is called again if the condition is <code>false</code>:</p><ol><li>Test if <em>n</em> is equal to 1 or 0; If it’s the case, return the value of 1.</li><li>If not, multiply <em>n</em> by the factorial of <em>n-1</em>.</li><li>This process is recursively performed until <code>fact(1)</code> is reached; The recursion is then terminated by the conditional statement.</li></ol><h3 id="The-include-“directive”"><a href="#The-include-“directive”" class="headerlink" title="The include “directive”"></a>The <code>include</code> “directive”</h3><p>OpenSCAD uses two commands to include external OpenSCAD code into the current model:</p><ul><li><code>include &lt;file.scad&gt;</code> will act as if you copy-pasted the content of <code>file.scad</code> into your current file. It will evaluate all instructions in the imported library (including variable initialization … etc).</li><li><code>use &lt;file.scad&gt;</code> will only include meta-code (function and module definitions) from  <code>file.scad</code>, but doesn’t execute any other commands (No variable initialization, no shape creation … etc)</li></ul><h2 id="Basic-OpenSCAD-commands"><a href="#Basic-OpenSCAD-commands" class="headerlink" title="Basic OpenSCAD commands"></a>Basic OpenSCAD commands</h2><p>Now that you’ve mastered the basics of OpenSCAD’s usual-programming-language features, let’s get to the real deal:</p><h3 id="2D-and-3D-shapes"><a href="#2D-and-3D-shapes" class="headerlink" title="2D and 3D shapes"></a>2D and 3D shapes</h3><p>Try this:</p><pre><code class="clike">circle(r=10);/*    r represents the radius of the circle.    10 is the radius value, in mm by default.    The circle is in X-Y plane by default.    And it&#39;s center is at the origin.    By default, The circle is &quot;coarse&quot; (low resolution).*/// You can specify a diameter insteadcircle(d=10);// And you can increase the resolutioncircle(r=10, $fn=40);/*   $fn is the number of segments to draw a full circle*/</code></pre><p>The same applies to 3D shapes:</p><pre><code class="clike">sphere(10, $fn = 40); // if no &quot;r=&quot; or &quot;d=&quot;, then it&#39;s a radiuscube([10,30,10], center=true);/*  [10,30,10] specifies [width,depth,height] (along [x,y,z])  center= true | false specifies whether the cube should be                       centered at the origin.*/</code></pre><p>There are few other pre-defined shapes which you can find here: <a href="http://www.openscad.org/cheatsheet/" target="_blank" rel="noopener">OpenSCAD CheatSheet</a></p><h3 id="Transformations-and-Modules"><a href="#Transformations-and-Modules" class="headerlink" title="Transformations and Modules"></a>Transformations and Modules</h3><p>Now that you’ve created some shapes, you’ll want to do some operations on them;<br>That’s exactly what modules are meant to do.</p><p>They can be used to define shapes, or even operators, which are then added to the language (You can also import them from an external file).</p><p>An example of pre-defined module is the <code>translate</code> command:</p><pre><code class="clike">// This is not the definition of translate// This demonstrates its usage.translate([0,0,20]) sphere(10); /* Which translates the sphere in the z-direction by 20 mm */</code></pre><p>This command is called an <code>object module</code>, ie. operates on primitives to define new objects. You can define an object module in the following way:</p><pre><code class="clike">module name ( parameters ) { actions }</code></pre><p>For example, let’s say I want to create an ellipsoid; Basically, I would write something like this:</p><pre><code class="clike">scale([10,20,10]) sphere(1, $fn=30);/* scale is a transformation module */</code></pre><p>In a more modular way, I would define a special module which takes some vectors as parameters and creates the ellipsoid for me:</p><pre><code class="cpp">/*    Define a module named ellipsoid    Parameters:     - dims: vector for dimensions, default value: [10,20,10]     - center: coords of the center of the new object,               defaults to the origin.    What&#39;s between {...} is the actions to take.    Read it like this:    1. Create a sphere of radius = 1mm    2. scale it in all directions according to the vector &#39;dims&#39;    3. translate the resulting object by the vector &#39;center&#39;*/module ellipsoid(dims=[10,20,10], center=[0,0,0]) {  translate(center) scale(dims) sphere(1, $fn=30); }// Now call the module to create different objects:// Ellipsoid with default valuesellipsoid();// Change only the centerellipsoid(center=[0,0,30]);// Change all default parametersellipsoid(dims=[10,10,5],center=[0,40,0]);</code></pre><blockquote><p>Note that you can omit the <code>;</code> at the end of a module’s definition.</p></blockquote><p>If you think about it carefully, this approach is useful only if you want to take a specific “object” and do some operations on it in the sole purpose of creating a new object (That’s why it’s called <strong>object module</strong>). What if you need to operate in the same way on a set of different objects?</p><p>To illustrate, assume we have a sphere, a cube and a square, and we want to create a bunch of duplicates of each object in a specified direction. Indeed, we would need an “operator module”, a module that doesn’t care about objects but only cares about what operations to perform on them. For this, we’ll need a new  concept (<code>children</code> of a module):</p><pre><code class="clike">/*   Create a module named duplicate.   Parameters:     - num: The number of duplicates (original object included).     - space: The space between two consecutive objects.     - dir: normalized direction vector, defaults to the x-direction.   This will take the first object in the children, and translate it by the    required amount each time (in the for loop)*/module duplicate(num, space, dir=[1,0,0]) {// Starting the range with 0 will preserve the original object    for (i = [0:num-1]) translate(dir*space*i) children(0);// Uses only the first element of &quot;children&quot;}// Five duplicates of a sphere in the x (default) directionduplicate(num=5, space=20) sphere(5);// Five duplicates of a cube in z-directionduplicate(5,20,[0,0,1]) translate([0,0,30]) cube(10,center=true);// Five duplicates of a square in a custom // (but vector-normalized) directionduplicate(5,20,[0,sqrt(2)/2,sqrt(2)/2]) translate([0,20,0])                               cube([20,10,1],center=true);</code></pre><blockquote><p>OpenSCAD doesn’t support STL export of mixed 2D and 3D shapes;  So, We have to create square-like cubes!!</p></blockquote><p>The <code>for (i = range) action;</code> loop will perform the action while varying <code>i</code> in the <code>range</code>. The action here is to take the first shape in the <code>children</code> list and translate it by the vector (<code>dir*space*i</code>).</p><p>The previous script results in something like this:</p><p><img src="/assets/img/OpenSCAD/openscad-duplicate.jpg" alt="OpenSCAD duplicates Module"></p><p>(The Blue sphere is at the origin; Hopefully you can tell where everything is!!).</p><blockquote><p>Hey! you are no longer a “beginner”!! You can create modules and use functions!!!</p></blockquote><h3 id="Modifiers"><a href="#Modifiers" class="headerlink" title="Modifiers"></a>Modifiers</h3><blockquote><p>This not quite necessary to learn now, but it will become handy in the following tutorial.</p></blockquote><p>You can use modifiers to control the way objects are displayed  in OpenSCAD’s preview window:</p><pre><code class="clike">// Transparent cube %translate([10,0,0]) cube(10);// Highlight a sphere#sphere(10);// Another way:color(&quot;blue&quot;,0.8) translate([0,0,10]) cube(10);/* 0.8 controls transparency (alpha) */</code></pre><p>That’s it for today, I bet you already learned more tricks just by looking at <a href="http://www.openscad.org/cheatsheet/" target="_blank" rel="noopener">OpenSCAD’s Cheatsheet</a>.</p>]]></content>
      
      
      <categories>
          
          <category> openscad </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Meshing </tag>
            
            <tag> OpenSCAD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hilarious Videos of CFD Simulations</title>
      <link href="/videos/hilarious-videos-of-cfd-simulations/"/>
      <url>/videos/hilarious-videos-of-cfd-simulations/</url>
      
        <content type="html"><![CDATA[<p>I can’t really think of a polished introduction to such a post, so,</p><ul><li>This post lists some eye-catching simulations.</li><li>The goal is to motivate and inspire new OpenFOAM users.</li><li>This is not an ordered list, OK!</li><li>That’s it, you can start watching the videos</li></ul><blockquote><p>I will try to keep this list of great CFD simulations updated.</p></blockquote><h2 id="A-simplified-OpenFOAM-2D-model-for-a-bullet"><a href="#A-simplified-OpenFOAM-2D-model-for-a-bullet" class="headerlink" title="A simplified OpenFOAM 2D model for a bullet"></a>A simplified OpenFOAM 2D model for a bullet</h2><p>This short video shows the results of simulating a <strong>9mm bullet</strong> in a 2D domain at a mach number of <code>1.6</code> using OpenFOAM (More precisely, those are Mach, pressure, velocity and shock wave fields).</p><p>The simulation was conducted by <strong>GDTech Belgium</strong> and was published around the end of 2014.</p><div class="video-container"><iframe src="//www.youtube.com/embed/D6iuVr9V6os" frameborder="0" allowfullscreen></iframe></div><h2 id="Shock-waves-hitting-helium-bubbles"><a href="#Shock-waves-hitting-helium-bubbles" class="headerlink" title="Shock-waves hitting helium bubbles"></a>Shock-waves hitting helium bubbles</h2><p>Continuing in the same niche, but with better visualization, <strong>Physics Central</strong> published a YouTube video: “Mach 3 Bubble Shockwaves” featuring the results of intense simulations of a Mach 3 shock-wave hitting a helium bubble.</p><div class="video-container"><iframe src="//www.youtube.com/embed/gnhbhpwTx1c" frameborder="0" allowfullscreen></iframe></div><blockquote><p>You can find appropriate credits in the video’s description on YouTube.</p></blockquote><h2 id="CFD-simulation-of-a-planing-hull-in-OpenFOAM"><a href="#CFD-simulation-of-a-planing-hull-in-OpenFOAM" class="headerlink" title="CFD simulation of a planing hull in OpenFOAM"></a>CFD simulation of a planing hull in OpenFOAM</h2><p>This half-a-minute long animation visualizes the results obtained from an OpenFOAM simulation of a planing hull by <strong>TotalSimltd</strong>:</p><div class="video-container"><iframe src="//www.youtube.com/embed/OH0l5CkY_aY" frameborder="0" allowfullscreen></iframe></div><h2 id="The-Cobra-Aircraft-CFD-Simulations"><a href="#The-Cobra-Aircraft-CFD-Simulations" class="headerlink" title="The Cobra Aircraft CFD Simulations"></a>The Cobra Aircraft CFD Simulations</h2><p>Regardless of whether you want to watch Aircraft simulations or not, the next video gives a great insight on how proper visualization is done!!</p><div class="video-container"><iframe src="//www.youtube.com/embed/cI7jxXdiGMI" frameborder="0" allowfullscreen></iframe></div><h2 id="Is-it-appropriate-to-compare-ANSYS-Fluent-and-OpenFOAM-this-way"><a href="#Is-it-appropriate-to-compare-ANSYS-Fluent-and-OpenFOAM-this-way" class="headerlink" title="Is it appropriate to compare ANSYS/Fluent and OpenFOAM this way?"></a>Is it appropriate to compare ANSYS/Fluent and OpenFOAM this way?</h2><p>Eager to watch a comparison between OpenFOAM’s and Fluent’s performances?</p><div class="video-container"><iframe src="//www.youtube.com/embed/OBae-GV9KEA" frameborder="0" allowfullscreen></iframe></div><p>Well, OpenFOAM always has the upper hand when it comes to being <code>open source</code>!</p><h2 id="Bathroom-Toilet-CFD-Simulation-using-OpenFOAM"><a href="#Bathroom-Toilet-CFD-Simulation-using-OpenFOAM" class="headerlink" title="Bathroom Toilet CFD Simulation using OpenFOAM"></a>Bathroom Toilet CFD Simulation using OpenFOAM</h2><p>I wasn’t sure if CFD engineers could pull something so serious -until I watched this video-, but <strong>Clemens Lischka</strong>  did it and published the results 2 years ago!</p><div class="video-container"><iframe src="//www.youtube.com/embed/-d_zYeqebco" frameborder="0" allowfullscreen></iframe></div><h2 id="CFDSupport’s-Transient-sports-car-simulation"><a href="#CFDSupport’s-Transient-sports-car-simulation" class="headerlink" title="CFDSupport’s Transient sports car simulation"></a>CFDSupport’s Transient sports car simulation</h2><p>This kind of simulations could take forever to finish if the engineer gets really serious about it:</p><div class="video-container"><iframe src="//www.youtube.com/embed/cSsbcuZvO1I" frameborder="0" allowfullscreen></iframe></div><blockquote><p>Hey! If you know about any other simulations, you are encouraged to share a (or few) link in the comments section, I would be happy to hear about new great CFD simulation (OpenFOAM is preferred, but you can link to any other CFD software simulation …).</p></blockquote><h2 id="Update-28-07-2018-NASA’s-Aircraft-landing-gear-air-flow-simulation"><a href="#Update-28-07-2018-NASA’s-Aircraft-landing-gear-air-flow-simulation" class="headerlink" title="[Update: 28/07/2018] NASA’s Aircraft landing gear air flow simulation"></a>[Update: 28/07/2018] NASA’s Aircraft landing gear air flow simulation</h2><p>Just watch this one OK:</p><div class="video-container"><iframe src="//www.youtube.com/embed/-D5N_OnZ_Tg" frameborder="0" allowfullscreen></iframe></div><h2 id="Update-28-07-2018-A-Drone-CFD-Simulation-with-ANSYS-CFX"><a href="#Update-28-07-2018-A-Drone-CFD-Simulation-with-ANSYS-CFX" class="headerlink" title="[Update: 28/07/2018] A Drone CFD Simulation with ANSYS CFX"></a>[Update: 28/07/2018] A Drone CFD Simulation with ANSYS CFX</h2><div class="video-container"><iframe src="//www.youtube.com/embed/DbcYUcSxkV8" frameborder="0" allowfullscreen></iframe></div><h2 id="Update-28-07-2018-Internal-Combustion-Engine-Simulation-by-CONVERGE-CFD"><a href="#Update-28-07-2018-Internal-Combustion-Engine-Simulation-by-CONVERGE-CFD" class="headerlink" title="[Update: 28/07/2018] Internal Combustion Engine Simulation by CONVERGE CFD"></a>[Update: 28/07/2018] Internal Combustion Engine Simulation by CONVERGE CFD</h2><div class="video-container"><iframe src="//www.youtube.com/embed/V6kqMDt1kac" frameborder="0" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> videos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenFOAM </tag>
            
            <tag> Simulations </tag>
            
            <tag> Videos </tag>
            
            <tag> ANSYS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5 Faux-Pas That Are Actually Okay to Make in OpenFOAM Simulations</title>
      <link href="/QA/5-faux-pas-that-are-actually-okay-to-make-in-openfoam-simulations/"/>
      <url>/QA/5-faux-pas-that-are-actually-okay-to-make-in-openfoam-simulations/</url>
      
        <content type="html"><![CDATA[<p>OpenFOAM beginners often find it really hard to get a case to work; which is a ‘consequence’ of several factors (I’m not talking about syntax typos here!):</p><ul><li>Bad <code>mesh</code>.</li><li>Bad <code>numerical schemes</code>.</li><li>Bad <code>solver</code> parameters.</li></ul><p>But it’s not about the things you do to break your case -You can learn about those ones by yourself- : It’s all about the <strong>bad things</strong> you do to your case that have no to little effect on the results!!</p><h2 id="1-Omitting-important-stuff-in-the-dictionaries"><a href="#1-Omitting-important-stuff-in-the-dictionaries" class="headerlink" title="#1: Omitting important stuff in the dictionaries"></a>#1: Omitting important stuff in the dictionaries</h2><p>I’ve talked about this particular issue in an earlier post:  <a href="/openfoam-evolution/">OpenFOAM Evolution</a> where I mentioned that, starting from OpenFOAM 3.0, users can use any of the following <code>keyword-value</code> variations to express <code>nu</code> in the standard units:</p><pre><code class="clike">nu              nu [0 2 -1 0 0 0 0] 0.01;nu              [0 2 -1 0 0 0 0] 0.01;nu              0.01;</code></pre><p>Note that the last one is particularly dangerous: You absolutely shouldn’t put something that mysterious in your case files, especially if the case is run with a custom solver! </p><h2 id="2-The-numerical-schemes"><a href="#2-The-numerical-schemes" class="headerlink" title="#2: The numerical schemes"></a>#2: The numerical schemes</h2><p>Most of OpenFOAM beginners prefer to stick with the default numerical schemes they find in the tutorial cases; which is considered as “good practice” until you get excited and try to simulate something different from what the tutorial simulates.</p><p>Even though OpenFOAM developers do a great job choosing perfect numerical schemes for tutorial cases, your case may require a slightly different scheme to be used.</p><p>That’s why I like to fall back to <code>upwind</code> schemes whenever I’m confused! This is probably a bad idea!! But <code>upwind</code> schemes work! They really do!! Almost always: They may not give the most accurate results in specific circumstances though.</p><p>As an unspoken rule, starting simulations with:</p><ul><li><code>leastSquares</code> as <code>gradSchemes</code> Unless you notice oscillations in the calculations of gradients (happens if the mesh is of bad quality), then fall back to <code>Gauss linear</code>.</li><li><code>upwind</code> or even <code>linearUpwind</code> as <code>divSchemes</code></li><li><code>linear limited some_value</code> as <code>laplacianSchemes</code> (Where <code>some_value</code> is 1 if the mesh is orthogonal, and decreases towards 0 as the mesh gains non-orthogonality).</li></ul><h2 id="3-Mesh-Quality"><a href="#3-Mesh-Quality" class="headerlink" title="#3: Mesh Quality"></a>#3: Mesh Quality</h2><p>You should never skip checking mesh quality with <code>checkMesh</code>; It’s crucial to know the properties of your mesh:</p><ul><li>If the non-orthogonality is greater than 70, you should consider using non-orthogonal correctors.</li><li>If skewness is greater than 15, consider refining the mesh.<br>The general rule says: If a hex-mesh’s non-orthogonality is &gt; 80, this mesh is not a valid one.</li></ul><p>However, it’s possible to tolerate high non-orthogonality values under some circumstances: For example, if non-orthogonal cells are not contributing to the flow.</p><h2 id="4-OpenFOAM-multiple-versions"><a href="#4-OpenFOAM-multiple-versions" class="headerlink" title="#4: OpenFOAM multiple versions"></a>#4: OpenFOAM multiple versions</h2><p>Working with multiple versions of OpenFOAM is easy:</p><ul><li>You create aliases for installed versions of the software (in <code>~/.bashrc</code> file):<pre><code class="bash"> ### OpenFOAM Versions alias fe32=&#39;source /opt/foam-extend-3.2/etc/bashrc&#39; alias of4=&#39;source /opt/openfoam4/etc/bashrc&#39; alias of5=&#39;source /opt/openfoam5/etc/bashrc&#39;</code></pre></li><li>When you open the terminal you only need to issue the command <code>of5</code> to load OpenFOAM 5.</li><li>When you are done with it, run <code>wmUnset</code> to unload the shell environment and use another version of the software in the current terminal.</li></ul><p>Note that this is the safest way to do this, but it’s also OK to omit unloading the environment if you are just simulating cases.</p><h2 id="5-The-writeFormat"><a href="#5-The-writeFormat" class="headerlink" title="#5: The writeFormat"></a>#5: The writeFormat</h2><p>Writing OpenFOAM output in ASCII format is not always a good option; if there is too much information to write you may run out of space or crush your system.</p><p>In general, it’s better to write the output as binary files, and compress them with <code>gzip</code>. the only drawback of this approach is that the risk of damaging these files increases and there is no way to repair them if this happens!</p><blockquote><p>Except that you could re-run the simulation for the damaged <code>timeSteps</code>, of course.</p></blockquote><p>I would be happy if you share your experience in this subject with us in the comments sections.</p>]]></content>
      
      
      <categories>
          
          <category> QA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenFOAM </tag>
            
            <tag> Simulations </tag>
            
            <tag> Mistakes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The 3 Greatest Moments in Computational Fluid Dynamics History</title>
      <link href="/QA/the-3-greatest-moments-in-computational-fluid-dynamics-history/"/>
      <url>/QA/the-3-greatest-moments-in-computational-fluid-dynamics-history/</url>
      
        <content type="html"><![CDATA[<p>The CFD knowledge you know now was accumulated over the years through Trial &amp; Error procedures, which lead to a continuous refinement of the concepts and techniques used in this industry.</p><p>Predicting simple shear flows, free and confined jet flows wasn’t always a simple task: This article showcases the most important “moments” in CFD history; from my personal point of view of course!</p><h2 id="The-First-Moment-Calculations-done-by-humans-but-they-did-it"><a href="#The-First-Moment-Calculations-done-by-humans-but-they-did-it" class="headerlink" title="The First Moment: Calculations done by humans, but they did it!"></a>The First Moment: Calculations done by humans, but they did it!</h2><p>CFD was around for more than a century now: as early as 1910, <strong>Lewis Fry Richardson</strong>, the father of “Weather forecasting”, presented a paper, titled as<br>“<a href="http://rsta.royalsocietypublishing.org/content/roypta/210/459-470/307.full.pdf" target="_blank" rel="noopener">The approximate arithmetical solution by finite differences of physical problems involving differential equations</a>“ , to Royal Society.</p><p>At that time, there were no adequate means to carry out heavy calculations, so humans, with hand-calculators, were the most effective solution.</p><p>As you might know, CFD is heavily based on “solving” Navier-Stocks equations, which were reduced to 1-D and 2-D equations describing physics problems on “simple” domain geometries: Simply put, lack of computational power was responsible for people suffering with hand calculations!!</p><h2 id="The-Second-Moment-The-First-Functional-Model"><a href="#The-Second-Moment-The-First-Functional-Model" class="headerlink" title="The Second Moment: The First Functional Model!"></a>The Second Moment: The First Functional Model!</h2><p>Engineers had to wait for a team at the Los Alamos National Lab (1957) to develop the first (really) functional CFD model (performed with computers). The team dedicated the next 10 years to develop even better models: You probably know  what the $$ k-\epsilon $$ turbulence model is, right?</p><p>You can find information about this big step in Fluid Flow Simulation here:<br><a href="http://collectivescience.com/documents/CFD_6_96.pdf" target="_blank" rel="noopener">The Legacy and Future of CFD At Los Alamos</a></p><p>Few years later, <strong>Douglas Aircraft</strong> was able to develop a basic 3D CFD analysis in order to simulate fluid flow around airfoils.</p><p>But still, engineers were facing (trivial) problems back then:</p><ul><li>Difficulties with handling irregular boundary conditions with simple orthogonal grids.</li><li>Numerical Diffusion was really a big problem.</li><li>Efficient Time-dependent calculations (Just Dreams, nothing more!).</li></ul><h2 id="The-Third-Moment-The-Finite-Volume-Method"><a href="#The-Third-Moment-The-Finite-Volume-Method" class="headerlink" title="The Third Moment: The Finite Volume Method"></a>The Third Moment: The Finite Volume Method</h2><p>The Finite Volume method made its first appearance as a method to solve Navier-Stocks Equations in 3 dimensional space around 1980 at the Imperial College. </p><p>This was a huge development in CFD history and important research papers kept flowing in (considering the continuously improving computing power, this was bound to happen!!).</p><p>In 2004, OpenFOAM was released as an “Open Source” CFD library, which boosted researches in this area and made it available to all engineers to share code and experience.</p><p>From this point on (<code>This point</code> included …), I think advancement in CFD-related subjects was (and still) based on the development of mathematics and computer programming.</p><p>I’ll be happy if you could share your thoughts on this subject with us in the comments.</p>]]></content>
      
      
      <categories>
          
          <category> QA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenFOAM </tag>
            
            <tag> CFD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Evolution of OpenFOAM</title>
      <link href="/QA/the-evolution-of-openfoam/"/>
      <url>/QA/the-evolution-of-openfoam/</url>
      
        <content type="html"><![CDATA[<p>OpenFOAM was originally a commercial product called <strong>FOAM</strong>, and it was first released as an “Open Source Software” in December 2004 (Under the <a href="https://en.wikipedia.org/wiki/GNU_General_Public_License" target="_blank" rel="noopener">GNU GPL</a>, renamed OpenFOAM since then).</p><p>This act had great effects on OpenFOAM’s user base and started to build a vast caring community. In this post, I’m going to showcase the major improvements introduced to OpenFOAM (official) code from the beginning (<code>OF1.0</code>) up until now (<code>OF5.0</code>).</p><h2 id="OPENFOAM-1-x"><a href="#OPENFOAM-1-x" class="headerlink" title="OPENFOAM 1.x"></a>OPENFOAM 1.x</h2><p>At the beginning, the development focused on user interaction with the software (mainly compiling errors and similar stuff). After few partial versions, <code>OF1.4</code> came with the first noticeable efficiency improvements:</p><ul><li>A new compressible two-phase flow (<strong>cavitation</strong>) was added.</li><li>Porous media models were introduced for the first time.</li><li>Implementation of Multiple reference frames (MRF).</li></ul><p>The next few releases have introduced new applications (meshing, case initialization, functionObjects and post-processing) and libraries (radiation modeling, LES &amp; RAS turbulence models, basic mesh motion … etc).</p><p>And before reaching <code>OF2.0</code>, many numerical polynomial-fit higher-order interpolation schemes were added (linear, quadratic, cubic), and many new boundary conditions were added and improved in association with new library development (Turbulence and thermophysical modeling).</p><h2 id="OPENFOAM-2-x"><a href="#OPENFOAM-2-x" class="headerlink" title="OPENFOAM 2.x"></a>OPENFOAM 2.x</h2><p><code>OF2.0</code> was the first release that officially supported some Linux distributions (Binary Deb packages for Ubuntu and .RPM ones for SUSE).</p><p>On the technical side, it is worth mentioning that a “local-time stepping, Steady-state VoF (Volume of Fluid) “ method was introduced to OpenFOAM in this  release.</p><p>The next releases, up until <code>OF3.0</code>, added support for  Fedora Linux while continuing to improve efficiency of the code and introducing new features:</p><ul><li>Arbitrary mesh interface (AMI): Rotation of geometries and more flexibility when using cyclic boundaries and coupling simulations between separate mesh regions (e.g. surface film and bulk flow)</li><li>Meshing tools got interesting features: They had new useful options. <ol><li><code>snappyHexMesh</code> features and capabilities were on fire during this cycle of releases.</li><li><code>checkMesh</code> learned how to listen for user-specified mesh quality settings.</li><li><code>decomposePar</code> and <code>reconstructPar</code> were improved for multi-region simulations handling.</li></ol></li><li><code>fvOptions</code> used for source/sink specification in <code>OF2.2.0</code> (How they were doing this before?). </li><li>Migration to <strong>Doxygen</strong> to generate code documentation.</li><li>Macro expansions and regular expressions in keyword names were first introduced for the first time in <code>OF2.2.2</code>.</li><li>And Hey! <code>OF2.3</code> came with a new meshing tool <code>foamyHexMesh</code>.</li><li>Pre-processing tools also got a boost in terms of efficiency and user convenience.</li></ul><blockquote><p>In general, any complains about meshing tools originate from this era :)</p></blockquote><h2 id="OPENFOAM-3-x"><a href="#OPENFOAM-3-x" class="headerlink" title="OPENFOAM 3.x"></a>OPENFOAM 3.x</h2><p>With the release of <code>OF3.0.0</code> things got a lot more interesting (from the user perspective at least):</p><ul><li><code>blockMeshDict</code> moved to <strong>system</strong> directory</li><li>Official packages supported only Ubuntu</li><li><strong>fvSchemes</strong> no longer requires the dictionary <code>fluxRequired</code></li><li>Many regions of the code were redesigned to improve consistency and make it easier to work with.</li></ul><p>This release focused mainly on turbulence models:</p><ul><li>it gave <strong>turbulenceProperties</strong> the ability to select any turbulence model instead of using the old <strong>RASProperties</strong> and <strong>LESProperties</strong></li></ul><p>Also, many of you may not know this, but <code>blockMesh</code> learned how to overcome the particular vertex ordering when constructing block faces in this release!</p><p>This basically means that:</p><pre><code class="cpp">    fixedWalls    {           type wall;        faces        (            (0 7 4 3)            (2 6 5 1)            (1 5 4 0)        );    }   </code></pre><p>Is the same as</p><pre><code class="cpp">    fixedWalls    {           type wall;        faces        (            (0 4 7 3)            (2 1 5 6)            (1 5 4 0)        );    }   </code></pre><blockquote><p>You can try this immediately on a tutorial case!!</p></blockquote><p>Teaching the tool the ability to find the appropriate ordering of face vertices on its own helped a lot with improving its “scriptability”.</p><p>Many input-related improvements were performed, for example, the following entries are all valid starting from this release:</p><pre><code class="cpp">nu              nu [0 2 -1 0 0 0 0] 0.01;nu              [0 2 -1 0 0 0 0] 0.01;</code></pre><p>You can also omit the dimensions specification and write:</p><pre><code class="cpp">nu              0.01;</code></pre><p>But it’s not recommended to do so.</p><p>After <code>OF3.0.0</code>, <code>OF3.0.1</code> was released to fix some bugs and help programmers with the development of new applications:</p><ul><li><code>foamNewBC</code> and <code>foamNewApp</code> now create templates for boundary conditions and new applications (solvers, utilities).</li></ul><h2 id="OPENFOAM-4-x"><a href="#OPENFOAM-4-x" class="headerlink" title="OPENFOAM 4.x"></a>OPENFOAM 4.x</h2><p><code>OpenFOAM 4.0</code> introduced many improvements to the user interface:</p><ul><li><code>foamDictionary</code> prints and modifies dictionary content.</li><li><code>foamListTimes -rm</code> removes time directories (but not <strong>0</strong> dir.): Use this instead of struggling with regular expressions.</li><li>We used to <code>grep</code> things if we want to know how a keyword is used (and I still do), but the new <code>foamSearch</code> is a great tool for this task.</li><li>All old post-processing (small, one-task-oriented ) tools are fused into a single one: <code>postProcess</code></li><li>Many <code>functionObjects</code> are re-factored.</li><li>A load of new BCs are added, with <strong>noSlip</strong> standing out!!</li><li><code>foamList</code> lists models used in OpenFOAM (<code>-functionObjects</code>, <code>-scalarBCs</code> … etc).</li></ul><p>As usual the version after this one (<code>OF4.1</code>) only fixed some bugs.</p><h2 id="OPENFOAM-5-x-Updated-17-08-2018"><a href="#OPENFOAM-5-x-Updated-17-08-2018" class="headerlink" title="OPENFOAM 5.x  [Updated: 17/08/2018]"></a>OPENFOAM 5.x  [Updated: 17/08/2018]</h2><h2 id="OPENFOAM-6-0-Updated-17-08-2018"><a href="#OPENFOAM-6-0-Updated-17-08-2018" class="headerlink" title="OPENFOAM 6.0  [Updated: 17/08/2018]"></a>OPENFOAM 6.0  [Updated: 17/08/2018]</h2><p>OF6 is being tested by regular users for more than a month now, including me, and I love it.<br>The focus mainly goes to making OpenFOAM a more user-friendly software:</p><ul><li>Remember using DyM versions of solvers? Well, that’s deprecated because now, standard solvers are able to handle mesh motion natively instead of using specialized versions of the same solver.</li><li>There is no need to copy <code>0.orig</code> to <code>0</code>; Initial and boundary conditions are now read from both directories automatically.</li><li>A new <code>atmosphericModels</code> library which I missed for a while now!!</li></ul><blockquote><p>More exciting changes at:<br><a href="https://openfoam.org/release/6/" target="_blank" rel="noopener">OF6 Release Info Page</a></p></blockquote><h2 id="OPENFOAM-7-0-Updated-08-08-2019"><a href="#OPENFOAM-7-0-Updated-08-08-2019" class="headerlink" title="OPENFOAM 7.0 [Updated: 08/08/2019]"></a>OPENFOAM 7.0 [Updated: 08/08/2019]</h2>]]></content>
      
      
      <categories>
          
          <category> QA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenFOAM </tag>
            
            <tag> Evolution </tag>
            
            <tag> History </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5 Killer Quora Answers about OpenFOAM</title>
      <link href="/QA/5-killer-quora-answers-about-openfoam/"/>
      <url>/QA/5-killer-quora-answers-about-openfoam/</url>
      
        <content type="html"><![CDATA[<p>There are <strong>1.3K</strong> <code>OpenFOAM</code> topic followers on Quora out of a total of <strong>23.1K</strong> <code>CFD</code>  topic followers. I know this is probably not an accurate way to estimate how many Quora users use OpenFOAM for their CFD simulation, but, at least, it gives a rough estimate of how many Quora users are watching for OpenFOAM-related questions.</p><p>Personally, I wasn’t watching them until the moment I decided to summarize interesting answers about OpenFOAM in this blog post.</p><p>So, let’s get started.</p><h2 id="Will-I-learn-CFD-better-using-OpenFOAM-as-compared-to-Ansys-CFD"><a href="#Will-I-learn-CFD-better-using-OpenFOAM-as-compared-to-Ansys-CFD" class="headerlink" title="Will I learn CFD better using OpenFOAM as compared to Ansys CFD?"></a>Will I learn CFD better using OpenFOAM as compared to Ansys CFD?</h2><p>When a user asked this question, he was, apparently, looking for an advice on how to learn <strong>Computational Fluid Dynamics</strong>, and what piece of software should he use to learn it.</p><p>Answers seem to emphasize on the fact that <strong>OpenFOAM</strong> is an <code>Open Source</code> software which makes learning <strong>CFD</strong> easier.</p><p>Going down the <strong>OpenFOAM</strong> road has the following benefits:</p><ul><li>Makes people learn all sorts of things: Numerical analysis, C++ (even Python in my case) coding, and the physics of things.</li><li>Has a welcoming community which will help out if needed.</li><li>Allows (and encourages) you to <strong>read</strong> the “source code” of all libraries, solvers and utilities!! Actually, this a big help even if you don’t understand C++ at all!</li></ul><p>If one chooses to work with Commercial Software, he will benefit from:</p><ul><li>Their GUI, probably; If he is a GUI person (Windows users mostly).</li><li>Integrated <code>Optimization</code> and <code>Parameterization</code> facilities (In OpenFOAM case, we usually use <strong>DAKOTA</strong> for this).</li><li>Dedicated support (hopefully).</li><li>The learning curve (The software’s learning curve) is often shorter that OpenFOAM’s.</li></ul><p>The ability to see what’s actually going on behind the scenes has always been a big plus for open source software.</p><h2 id="Does-OpenFOAM-come-with-an-integrated-GUI"><a href="#Does-OpenFOAM-come-with-an-integrated-GUI" class="headerlink" title="Does OpenFOAM come with an integrated GUI?"></a>Does OpenFOAM come with an integrated GUI?</h2><blockquote><p>Simply put: The answer is “there is no official graphical user interface for OpenFOAM!”</p></blockquote><p>I don’t get why people keep fixating on that! There is little need to a GUI, so official releases don’t include one.</p><p>In addition, most OpenFOAM users run a great deal of their simulations in Ubuntu servers, thus they will be interacting with the command line the whole time anyway.</p><p>The answers for this question feature some useful (for absolute beginners) GUI applications:</p><ul><li><a href="https://sim-flow.com" target="_blank" rel="noopener">SimFlow</a>: A really good GUI application which uses standard OpenFAOM solvers and utilities to solve basic CFD problems. It allows the integration of custom solvers but sets a low limit on <code>mesh cell count</code>.</li><li><a href="http://simscale.com" target="_blank" rel="noopener">SimScale</a>: A platform integrating OpenFOAM solvers and providing free online CFD projects.</li></ul><p>But I find it a bit weird that no one mentioned the very useful <a href="https://openfoamwiki.net/index.php/GUI" target="_blank" rel="noopener">wiki page</a> which holds all major open source, free and commercial GUIs built for OpenFAOM (Even the text-based one: <strong>pyFoam</strong>)</p><h2 id="Does-it-matter-what-version-of-OpenFOAM-you-use"><a href="#Does-it-matter-what-version-of-OpenFOAM-you-use" class="headerlink" title="Does it matter what version of OpenFOAM you use?"></a>Does it matter what version of OpenFOAM you use?</h2><p>OpenFOAM versions and forks can easily confuse new comers: I mean there are many versions for official releases, extend project releases, OpenFOAM for Windows … and the list goes on. So, It may be quite difficult for a new Open-Source software  follower to distinguish between their features.</p><p>Answers on Quora on this question claim, and I agree with them, that:</p><ul><li>If you are just starting to learn OpenFOAM, it doesn’t really matter which version you use as long as it’s a not-so-old version. You are one release behind? that’s OK.</li><li>If you want to solve a specific problem, It’s good to have both the newest stable official version along side a <code>foam-extend</code> fork; It has many community additions that may be of some use in your case.</li></ul><p>I think It’s worth mentioning that OpenFOAM I/O (Input Output) format has changed only once in 20 years, so, this probably something you shouldn’t worry about (especially if you are a beginner who uses newer versions only).</p><blockquote><p>Choosing an OpenFOAM fork to work with is really a matter of preference; just get the latest stable version of that fork!</p></blockquote><h2 id="OpenFOAM-users-what-is-the-biggest-bottleneck-in-using-it-CAD-to-meshing-solver-parallel-performance-scalability-or-post-processing"><a href="#OpenFOAM-users-what-is-the-biggest-bottleneck-in-using-it-CAD-to-meshing-solver-parallel-performance-scalability-or-post-processing" class="headerlink" title="OpenFOAM users, what is the biggest bottleneck in using it? CAD to meshing, solver, parallel performance (scalability), or post-processing?"></a>OpenFOAM users, what is the biggest bottleneck in using it? CAD to meshing, solver, parallel performance (scalability), or post-processing?</h2><p>Let’s first present some user feedback for this question:</p><ul><li>CAD to OpenFOAM Mesh (people were using ~OF2 at that time) is considered painful.</li><li>PISO and PIMPLE based solvers are hard to follow up (harder than basic ones at least) because things  are done implicitly!</li><li>Post-processing tools are good (Talking about <strong>ParaView</strong> here, I think).</li></ul><p>Some users also report the lack of a GUI as an inconvenience, but this is their opinion; Personally I think that:</p><ul><li>Meshing is no longer an issue: <code>snappyHexMesh</code> and the great <code>cfMesh</code> are up for the task now (see my <a href="/openfoam-utilities-roundup-first/">OpenFOAM Utilities Roundup 1</a> if you want to know more).</li><li>Native post-processing is getting better with every release!</li><li>The learning curve is steep: That’s what most people should focus on. May be using a GUI first can help with this problem?</li></ul><p>You really need to take a look at the “Utilities Roundup” post; It has interesting tricks that might be helpful when learning OpenFOAM.</p><h2 id="How-can-I-learn-the-workings-of-the-source-code-for-OpenFOAM"><a href="#How-can-I-learn-the-workings-of-the-source-code-for-OpenFOAM" class="headerlink" title="How can I learn the workings of the source code for OpenFOAM?"></a>How can I learn the workings of the source code for OpenFOAM?</h2><blockquote><p>Ho-Ho, this may take some time!!</p></blockquote><p>Here are the steps that I think they would give nice results in a reasonable time period:</p><ul><li>Master <strong>C++ Programming</strong>: Are you a <strong>C</strong> programmer? Do you think you can handle programming in OpenFOAM? Well, think again, you really need to take a course on <strong>C++</strong> because OpenFOAM heavily uses its Object Oriented features.</li><li>You need to completely master you field of study (what are you programming OpenFOAM solvers/models for).</li><li>Locally build The documentation (using <strong>Doxygen</strong>): It will be helpful.</li><li>May be take a course, or use online resources to master the use of different OpenFOAM classes.</li></ul><p>If you have any suggestion or feedback about this post, don’t hesitate to comment below.</p>]]></content>
      
      
      <categories>
          
          <category> QA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenFOAM </tag>
            
            <tag> Post-Processing </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenFOAM utilities Roundup 1</title>
      <link href="/porous-medium/openfoam-utilities-roundup-1/"/>
      <url>/porous-medium/openfoam-utilities-roundup-1/</url>
      
        <content type="html"><![CDATA[<p>While working on any OpenFOAM case, users frequently find themselves in need of a tool to perform a specific task, in a specific way. This article identifies some of the best available utilities associated with OpenFOAM’s workflow.</p><p>There are several conditions for a utility to gain a place in this list (That’s how I choose the tools I work with anyways):</p><ol><li>It has to be free.</li><li>It has to be efficient enough (Both machine-wise and user-wise).</li><li>It has to deliver quality results.</li><li>It has to be customizable to some extent.</li><li>It has to be scriptable (for parameter variation … etc).</li></ol><blockquote><p>Note: Utilities are not required to be “cross-platform”; If not mentioned otherwise, they are designed to work in Unix-like systems.</p></blockquote><p>This post tries to mention some useful OpenFOAM utilities that every OpenFOAM user should know of; and we’ll be glad if you can share your experience with these tools (and any others) with us in the comments section.</p><h2 id="Meshing-utilities"><a href="#Meshing-utilities" class="headerlink" title="Meshing utilities"></a>Meshing utilities</h2><p>Let’s start with the (probably) most important step in any <strong>CFD simulation</strong>; the <code>meshing phase</code>. Finding a decent meshing tool is crucial for the accuracy of your simulations; and what’s more important is the amount of time <code>you</code> spend on meshing the domain.</p><p>For me, thinking about what strategy to take when attempting to mesh a domain is worth several minutes, (See the <strong>meshing phase tutorial</strong> in <a href="/simulations/s01l001">The S01L001 simulation</a> for more information).</p><p>However, time needed for the machine to produce a good mesh should also be kept minimal: This is where the meshing utility’s efficiency can shine.</p><h3 id="CfMesh"><a href="#CfMesh" class="headerlink" title="CfMesh"></a>CfMesh</h3><p><a href="https://cfmesh.com" target="_blank" rel="noopener">CfMesh</a> is a really great cross-platform meshing utility. It delivers quality meshes starting from (possibly coarse) surface geometries. The amusing thing is that it only requires the presence of a small dictionary<br>file called <code>meshDict</code> describing few mesh settings (<code>maxCellSize</code> …etc).</p><p>Let me present some of its features:</p><ul><li>Built on top of <strong>OpenFOAM</strong>; which means it tries to generate OpenFOAM valid meshes whenever possible.</li><li>Can construct 3D hexahedral, tetrahedral and polyhedral meshes.</li><li>Also capable of generating 2D hex-meshes.</li><li>Parallel computing is supported (using MPI).</li><li>The mesh is created from geometries in the form of surface triangulation (.STL or .FMS files); which can be coarse (to some extent).</li><li>Takes into account <em>geometry patch names</em> if you want it to.</li><li>The <code>meshDict</code> file has to contain only two entries (one pointing to the path for the geometry file, and the other featuring the <code>maxCellSize</code>)</li><li>Automatic and local mesh refinement.</li></ul><p>This tool has quickly become my <em>favorite meshing</em> utility mainly because:</p><ol><li>It saves me the trouble of going through <code>snappyHexMesh</code> dictionary file.</li><li>I already know how to quickly create STL geometry files using CAD tools. </li></ol><p>If you want to see it in action, go through the <a href="/simulations/s01l001">S01L001 Simulation</a>.</p><h3 id="Mesh-Converters"><a href="#Mesh-Converters" class="headerlink" title="Mesh Converters"></a>Mesh Converters</h3><p>Sometimes, you may want to work on an <em>existing mesh</em>: But the mesh is in another format. In this case, you may want to execute the following commands:</p><pre><code class="bash">$ util$ ls mesh/conversion</code></pre><p>to discover what standard OpenFOAM mesh conversion tools are available.</p><p>The most important ones are probably:</p><pre><code class="bash">$ gmshToFoam -help$ gambitToFoam</code></pre><h2 id="Post-processing"><a href="#Post-processing" class="headerlink" title="Post-processing"></a>Post-processing</h2><p>Visualizing case results is another important step in OpenFOAM workflow, and for that, we’ll need capable tools (in addition to the well-known <strong>ParaView</strong>):</p><h3 id="postProcess"><a href="#postProcess" class="headerlink" title="postProcess"></a>postProcess</h3><p><code>postProcess</code> is the standard post-processing utility which is shipped with official OpenFOAM releases. It does nothing more than “executing” specified <code>functionObjects</code>.</p><p>Here are some common uses for this tool from the command line:</p><pre><code class="bash">$ postProcess -func &quot;flowRatePatch(name=outlet)&quot;$ postProcess -func &quot;patchAverage(name=outlet,U)&quot;</code></pre><p>The usage of this tool from the command line seems to be a <em>bit confusing</em> for new OpenFOAM users; So, let’s see how a typical get-to-know-this-utility workflow goes:</p><blockquote><p>As a general advice; The source code and the user guide are great resources (Probably the best ones)</p></blockquote><ul><li>First, users are encouraged to read the help section:<pre><code class="bash">$ postProcess -help</code></pre></li><li>Which leads to an important conclusion: The utility accepts to run a <code>functionObject</code> specified by the  <code>-func</code> option.</li><li>Now, we only need to figure out how exactly the function object is specified; Thus, we try:<pre><code class="bash">$ postProcess -list</code></pre>to list what types of functionObjects are ready to use; Then:<pre><code class="bash">$ postProcess -func flowRatePatch</code></pre></li><li>This command will throw a <code>FOAM_FATAL_ERROR</code> because the utility simply can’t find any information about the target patch (its <code>patchName</code>).</li><li>Run the following command to locate any flowRatePatch-related files:<pre><code class="bash">$ locate -i flowRatePatch</code></pre>We are specifically interested in these two files:<pre><code class="bash">/opt/openfoam4/etc/caseDicts/postProcessing/flowRate/flowRatePatch/opt/openfoam4/etc/caseDicts/postProcessing/flowRate/flowRatePatch.cfg</code></pre></li></ul><p>Of course, the first one is the main file, and the second is just a configuration one.</p><p>Opening the first file in a text editor reveals all the secrets we are seeking:</p><pre><code class="cpp">/*--------------------------------*- C++ -*----------------------------------*\  =========                 |  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox   \\    /   O peration     |       \\  /    A nd           | Web:      www.OpenFOAM.org     \\/     M anipulation  |  Description      Calculates the flow rate through a specified patch by summing the flux on      patch faces.  For solvers where the flux is volumetric, the flow rate is      volumetric; where flux is mass flux, the flow rate is mass flow rate.  \*---------------------------------------------------------------------------*/  name    &lt;patchName&gt;;  #includeEtc &quot;caseDicts/postProcessing/flowRate/flowRatePatch.cfg&quot;  // ************************************************************************* //</code></pre><p>The <code>name</code> keyword is responsible for holding the target patch name; This is why we must invoke <code>postProcess</code> passing a <code>name</code> to the functionObject:</p><pre><code class="bash">$ postProcess -func &quot;flowRatePatch(name=outlet)&quot;</code></pre><blockquote><p>We don’t really care, but the include statement loads up this <code>functionObject</code>‘s configuration.</p></blockquote><p>I hope this post was helpful; if you have any useful suggestions, you are encouraged to share them with us in the comments section.</p>]]></content>
      
      
      <categories>
          
          <category> porous-medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Meshing </tag>
            
            <tag> Post-Processing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Permeability Simulation with OPENFOAM and OPENPNM</title>
      <link href="/porous-medium/permeability-simulation-with-openfoam-and-openpnm/"/>
      <url>/porous-medium/permeability-simulation-with-openfoam-and-openpnm/</url>
      
        <content type="html"><![CDATA[<p>Permeability and Filtration coefficients are some must-know factors for oil/gas reservoir management and optimization. <strong>OpenFOAM</strong> and Network-based software (<strong>OpenPNM</strong> for example) are our chosen open-source software toolkits for permeability simulation.</p><p>It’s hard to define an audience for this paper, really. Anyone who wants to:</p><ul><li>Kill the time by learning about permeability of soils, or</li><li>Prepare for a numerical simulation of permeability of soils</li></ul><p>And understands the basics of:</p><ul><li>Flow through porous medium,</li><li>OpenFOAM, or Python programming language,</li><li>Image processing (we are using <strong>FIJI</strong> -<strong>F</strong>iji <strong>I</strong>s <strong>J</strong>ust <strong>I</strong>mageJ- )</li></ul><p>Should be able to benefit from this presentation and related files (The way I presented it: Split it up to parts and give each part to the appropriate audience).</p><p><img src="/assets/img/permeabilitySimulation/openfoam-pressure-permeability-results.png" alt="Simulating flow through porous medium with openfoam"></p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>One of the most important properties of hydrocarbon reservoirs is their capacity of passing fluids; ie, their permeability to fluids in question. The engineering knowledge have accumulated over the years to explain, optimize and use the behavior of reservoirs in this matter.</p><p>With a great focus on granular reservoirs, this presentation introduces key concepts regarding this interesting property of rocks, including the most effective way of comparing two reservoirs in respect to their permeability: The use of permeability coefficient; In addition, we’ve tried to present the most important factors affecting rock permeability, and how they affect it.</p><p>Based on these factors, several mathematical models -adhering to certain conditions- were formed; we’ve picked two well-known well-accepted models to feature: Kozeny-Carman (relatively simple porosity-permeability relationship); Happel-Brenner (more complex porosity-permeability relationship).</p><p>With their “very limited” porosity range, these models fail in predicting the permeability of many rock sample; especially if they require the determination of grain shape descriptors (sphericity, roundness … etc). </p><p>Thus, results from mathematical predictions are always treated with caution; The most accurate method to estimate permeability of a sample rock to a certain test fluid is to actually measure it (More precisely, calculate it from measured data). This paper features the most-common permeability tests methods (Principle: apply pressure gradients, measure the outgoing flow rate, and use Darcy’s law to determine permeability). We’ve also tried to show how field-based methods (Well tests and logs) are used to estimate permeability.</p><p>To formulate a better understanding of this concept, we’ve tried to use common simulation approaches to determine the permeability of a piece of porous material (a 2-D $1.024mm \times 0.728mm$ image generated with <code>porespy</code> - a Python Library -):</p><ul><li>Directly simulate a viscous flow through medium’s pores using OpenFOAM (The most trusted method).</li><li>Instead of real pore (complex) geometry, assemble the porous material to a network of spheres (pores) connected by cylinders (throats), and solve the flow there, using PpenPNM - also a Python Library -.</li></ul><h2 id="Downloads"><a href="#Downloads" class="headerlink" title="Downloads"></a>Downloads</h2><blockquote><p><strong>Note:</strong> <strong>PDF</strong> files are meant to be opened with <code>evince</code> (don’t complain about animations if you use Adobe Reader <span class="emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f626.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f626.png?v8">&#x1f626;</span> ); <strong>OpenFOAM</strong> cases are packaged in a ready-to-mesh-and-run state, and <strong>python scripts</strong> are meant to show the typical work-flow - not to provide fully-featured applications -.</p></blockquote><p> <a href="https://www.slideshare.net/ElwardiFadli/permeability-of-soils" class="btn" target="_blank" rel="noopener">Presentation File</a><br> <a href="http://drive.google.com/uc?id=1eBVsfmtI6_5wTZXx2mo_BStNigOdLF2r&export=download" class="btn" target="_blank" rel="noopener">OpenFOAM Case (.7z)</a><br> <a href="https://drive.google.com/uc?id=16FrDxyDcyaxj9KQIND6rI1mxQEdpr4KJ&export=download" class="btn" target="_blank" rel="noopener">Python stuff</a><br> <a href="https://drive.google.com/uc?id=1F65s__fS8RzqrLwfZcVWKkjHNNCPITg-&export=download" class="btn" target="_blank" rel="noopener">Latex sources</a> </p><h2 id="Contribution-and-improvements"><a href="#Contribution-and-improvements" class="headerlink" title="Contribution and improvements"></a>Contribution and improvements</h2><p>Any suggestions and remarks are welcomed through Comments, or by e-mailing me.</p>]]></content>
      
      
      <categories>
          
          <category> porous-medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenFOAM </tag>
            
            <tag> OpenPNM </tag>
            
            <tag> Pore-Networks </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
